{"version":3,"sources":["webpack:///./node_modules/geotiff/dist-module/dataview64.js","webpack:///./node_modules/geotiff/dist-module/dataslice.js","webpack:///./node_modules/geotiff/dist-module/source/httputils.js","webpack:///./node_modules/geotiff/dist-module/source/blockedsource.js","webpack:///./node_modules/geotiff/dist-module/source/client/fetch.js","webpack:///./node_modules/geotiff/dist-module/source/client/xhr.js","webpack:///./node_modules/geotiff/dist-module/source/remote.js","webpack:///./node_modules/geotiff/dist-module/source/arraybuffer.js","webpack:///./node_modules/geotiff/dist-module/source/filereader.js","webpack:///./node_modules/geotiff/dist-module/geotiffwriter.js","webpack:///./node_modules/geotiff/dist-module/geotiff.js","webpack:///./node_modules/geotiff/dist-module/source/file.js","webpack:///./node_modules/geotiff/dist-module/source/client/base.js","webpack:///./node_modules/geotiff/dist-module/resample.js","webpack:///./node_modules/geotiff/dist-module/geotiffimage.js","webpack:///./node_modules/geotiff/dist-module/compression/index.js","webpack:///./node_modules/geotiff/dist-module/source/client/http.js","webpack:///./node_modules/geotiff/dist-module/globals.js","webpack:///./node_modules/geotiff/dist-module/rgb.js","webpack:///./node_modules/geotiff/dist-module/utils.js","webpack:///./node_modules/geotiff/dist-module/source/basesource.js"],"names":["arrayBuffer","this","_dataView","DataView","buffer","offset","littleEndian","left","getUint32","right","combined","Number","isSafeInteger","Error","value","isNegative","getUint8","carrying","i","byte","getInt8","getUint16","getInt16","getInt32","getFloat32","getFloat64","DataSlice","sliceOffset","bigTiff","_sliceOffset","_littleEndian","_bigTiff","byteLength","length","sliceTop","readUint32","readUint64","CRLFCRLF","itemsToObject","items","Object","fromEntries","obj","key","toLowerCase","parseHeaders","text","split","map","line","kv","str","trim","parseContentType","rawContentType","type","rawParams","s","paramsItems","param","params","parseContentRange","rawContentRange","start","end","total","match","parseInt","parseByteRanges","responseArrayBuffer","boundary","decoder","TextDecoder","out","startBoundary","endBoundary","decode","Uint8Array","Math","min","startsWith","innerText","substr","endOfHeaders","indexOf","headers","startOfData","push","data","slice","fileSize","Block","BlockGroup","blockIds","source","blockSize","cacheSize","super","blockCache","maxSize","blockRequests","Map","blockIdsToFetch","Set","abortedBlockIds","slices","signal","missingBlockIds","allBlockIds","top","firstBlockOffset","floor","current","blockId","has","add","get","fetchBlocks","missingRequests","Promise","allSettled","abortedBlockRequests","filter","id","forEach","aborted","block","blocks","failedBlocks","requiredBlocks","readSliceData","size","groups","groupBlocks","groupRequests","fetch","groupIndex","group","set","response","blockOffset","o","t","delete","err","name","clear","sortedBlockIds","Array","from","sort","a","b","lastBlockId","blockIdLow","blockIdHigh","sliceData","ArrayBuffer","sliceView","delta","topDelta","usedBlockLength","blockInnerOffset","rangeInnerOffset","blockView","status","url","credentials","xhr","getResponseHeader","resolve","reject","XMLHttpRequest","open","responseType","entries","setRequestHeader","onload","onerror","onabort","send","abort","addEventListener","constructRequest","client","maxRanges","allowFullFile","_fileSize","fetchSlices","all","fetchSlice","request","Range","join","ok","getHeader","byteRanges","getData","first","others","concat","maybeWrapInBlockedSource","makeFetchSource","blockOptions","makeXHRSource","makeHttpSource","makeRemoteSource","forceXHR","clientOptions","tagName2Code","geoKeyName2Code","name2code","_binBE","nextZero","oincr","readUshort","buff","p","readShort","ui8","i16","readInt","i32","readUint","ui32","readASCII","l","String","fromCharCode","readFloat","fl32","readDouble","fl64","writeUshort","n","writeUint","writeASCII","charCodeAt","Float64Array","writeDouble","getFieldTypeLength","fieldType","BYTE","ASCII","SBYTE","UNDEFINED","SHORT","SSHORT","LONG","SLONG","FLOAT","IFD","RATIONAL","SRATIONAL","DOUBLE","LONG8","SLONG8","IFD8","RangeError","parseGeoKeyDirectory","fileDirectory","rawGeoKeyDirectory","GeoKeyDirectory","geoKeyDirectory","location","count","substring","subarray","getValues","dataSlice","values","readMethod","fieldTypeLength","readUint8","Int8Array","readInt8","Uint16Array","readUint16","Int16Array","readInt16","Uint32Array","Int32Array","readInt32","readInt64","Float32Array","readFloat32","readFloat64","call","ImageFileDirectory","nextIFDByteOffset","GeoTIFFImageIndexError","index","GeoTIFFBase","options","window","imageWindow","width","height","resX","resY","bbox","firstImage","getImage","usedImage","imageCount","getImageCount","imgBBox","getBoundingBox","oX","oY","getOrigin","rX","rY","getResolution","usedBBox","allImages","image","SubfileType","subfileType","NewSubfileType","newSubfileType","getWidth","imgResX","imgResY","getHeight","wnd","imageResX","imageResY","round","max","readRasters","firstIFDOffset","cache","ifdRequests","ghostValues","fallbackSize","entrySize","offsetSize","getSlice","numDirEntries","byteSize","covers","entryCount","fieldTag","typeCount","fieldValues","valueOffset","actualOffset","readOffset","fieldDataSlice","parseFileDirectoryAt","requestIFD","e","previousIfd","ifd","dataView","hasNext","detectionString","heuristicAreaSize","valuesString","firstLine","metadataSize","fullString","headerData","BOM","TypeError","magicNumber","offsetByteSize","getUint64","close","mainFile","overviewFiles","imageFiles","fileDirectoriesPerFile","fileDirectoriesPerFileParsing","requests","file","parseFileDirectoriesPerFile","visited","relativeIndex","imageFile","ii","imageCounts","reduce","ifds","async","fromUrl","fromSource","fromUrls","mainUrl","overviewUrls","closeAsync","fd","openAsync","path","flags","mode","readAsync","args","read","bytesRead","FileSource","openRequest","Buffer","alloc","makeFileSource","BaseResponse","headerName","BaseClient","copyNewSize","array","samplesPerPixel","getPrototypeOf","resampleNearest","valueArrays","inWidth","inHeight","outWidth","outHeight","relX","relY","newArray","y","cy","x","cx","lerp","v0","v1","resampleBilinear","rawY","yl","yh","ceil","rawX","tx","xl","xh","ll","hl","lh","hh","resample","method","resampleNearestInterleaved","valueArray","samples","resampleBilinearInterleaved","resampleInterleaved","sum","arrayForType","format","bitsPerSample","needsNormalization","normalizeArray","inBuffer","planarConfiguration","tileWidth","tileHeight","view","outSize","samplesToTransfer","outArray","bitMask","repeat","pixelBitSkip","bitsPerLine","lineBitOffset","pixelBitOffset","bitOffset","outIndex","byteOffset","innerBitOffset","raw","geoKeys","tiles","isTiled","StripOffsets","PlanarConfiguration","ImageWidth","ImageLength","SamplesPerPixel","TileWidth","TileLength","RowsPerStrip","getTileWidth","getTileHeight","bytes","BitsPerSample","getSampleByteSize","sampleIndex","SampleFormat","prototype","getSampleFormat","getBitsPerSample","sample","poolOrDecoder","numTilesPerRow","numTilesPerCol","byteCount","TileOffsets","TileByteCounts","StripByteCounts","sampleFormat","getSamplesPerPixel","getBlockHeight","interleave","resampleMethod","imageWidth","imageHeight","minXTile","maxXTile","minYTile","maxYTile","windowWidth","bytesPerPixel","getBytesPerPixel","srcSampleOffsets","sampleReaders","getReaderForSample","promises","yTile","xTile","si","promise","getTileOrStrip","then","tile","blockHeight","firstCol","lastLine","lastCol","reader","ymax","xmax","pixelOffset","windowCoordinate","resampled","pool","fillValue","imageWindowWidth","imageWindowHeight","numPixels","apply","fill","getArrayForSample","isArray","result","_readRaster","enableAlpha","pi","PhotometricInterpretation","RGB","ExtraSamples","Unspecified","WhiteIsZero","BlackIsZero","Palette","CMYK","YCbCr","CIELab","subOptions","raster","ColorMap","red","green","blue","j","ModelTiepoint","tiePoints","k","z","metadata","GDAL_METADATA","string","item","undefined","inner","GDAL_NODATA","modelTransformation","ModelTransformation","referenceImage","modelPixelScale","ModelPixelScale","refResX","refResY","refResZ","GTRasterTypeGeoKey","origin","resolution","x1","y1","x2","y2","registry","addDecoder","cases","importFn","c","getDecoder","Compression","Decoder","m","default","HttpResponse","dataPromise","statusCode","HttpClient","parsedUrl","parse","httpApi","protocol","resolveData","chunks","on","chunk","destroy","fieldTagNames","fieldTags","hasOwnProperty","fieldTagTypes","256","257","258","259","262","273","274","277","278","279","282","283","284","286","287","296","297","305","306","338","339","513","514","1024","1025","2048","2049","3072","3073","33550","33922","34665","34735","34737","42113","arrayFields","StripRowCounts","SubIFDs","fieldTypeNames","fieldTypes","photometricInterpretations","TransparencyMask","ICCLab","ExtraSamplesValues","Assocalpha","Unassalpha","LercParameters","Version","AddCompression","LercAddCompression","None","Deflate","geoKeyNames","1026","2050","2051","2052","2053","2054","2055","2056","2057","2058","2059","2060","2061","2062","3074","3075","3076","3077","3078","3079","3080","3081","3082","3083","3084","3085","3086","3087","3088","3089","3090","3091","3092","3093","3094","3095","3096","4096","4097","4098","4099","fromWhiteIsZero","rgbRaster","fromBlackIsZero","fromPalette","colorMap","greenOffset","blueOffset","mapIndex","fromCMYK","cmykRaster","fromYCbCr","yCbCrRaster","Uint8ClampedArray","cb","cr","Xn","Yn","Zn","fromCIELab","cieLabRaster","L","a_","b_","r","g","assign","target","endsWith","expectedEnding","actualEnding","iterable","func","invert","oldObj","newObj","times","numTimes","results","wait","milliseconds","setTimeout","zip","A","B","AbortError","captureStackTrace","CustomAggregateError","errors","message","AggregateError","BaseSource"],"mappings":"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","file":"js/chunk-0c60a39a.8d8d8155.js","sourcesContent":["import { getFloat16 } from '@petamoriken/float16';\n\nexport default class DataView64 {\n  constructor(arrayBuffer) {\n    this._dataView = new DataView(arrayBuffer);\n  }\n\n  get buffer() {\n    return this._dataView.buffer;\n  }\n\n  getUint64(offset, littleEndian) {\n    const left = this.getUint32(offset, littleEndian);\n    const right = this.getUint32(offset + 4, littleEndian);\n    let combined;\n    if (littleEndian) {\n      combined = left + ((2 ** 32) * right);\n      if (!Number.isSafeInteger(combined)) {\n        throw new Error(\n          `${combined} exceeds MAX_SAFE_INTEGER. `\n          + 'Precision may be lost. Please report if you get this message to https://github.com/geotiffjs/geotiff.js/issues',\n        );\n      }\n      return combined;\n    }\n    combined = ((2 ** 32) * left) + right;\n    if (!Number.isSafeInteger(combined)) {\n      throw new Error(\n        `${combined} exceeds MAX_SAFE_INTEGER. `\n        + 'Precision may be lost. Please report if you get this message to https://github.com/geotiffjs/geotiff.js/issues',\n      );\n    }\n\n    return combined;\n  }\n\n  // adapted from https://stackoverflow.com/a/55338384/8060591\n  getInt64(offset, littleEndian) {\n    let value = 0;\n    const isNegative = (this._dataView.getUint8(offset + (littleEndian ? 7 : 0)) & 0x80) > 0;\n    let carrying = true;\n    for (let i = 0; i < 8; i++) {\n      let byte = this._dataView.getUint8(offset + (littleEndian ? i : 7 - i));\n      if (isNegative) {\n        if (carrying) {\n          if (byte !== 0x00) {\n            byte = ~(byte - 1) & 0xff;\n            carrying = false;\n          }\n        } else {\n          byte = ~byte & 0xff;\n        }\n      }\n      value += byte * (256 ** i);\n    }\n    if (isNegative) {\n      value = -value;\n    }\n    return value;\n  }\n\n  getUint8(offset, littleEndian) {\n    return this._dataView.getUint8(offset, littleEndian);\n  }\n\n  getInt8(offset, littleEndian) {\n    return this._dataView.getInt8(offset, littleEndian);\n  }\n\n  getUint16(offset, littleEndian) {\n    return this._dataView.getUint16(offset, littleEndian);\n  }\n\n  getInt16(offset, littleEndian) {\n    return this._dataView.getInt16(offset, littleEndian);\n  }\n\n  getUint32(offset, littleEndian) {\n    return this._dataView.getUint32(offset, littleEndian);\n  }\n\n  getInt32(offset, littleEndian) {\n    return this._dataView.getInt32(offset, littleEndian);\n  }\n\n  getFloat16(offset, littleEndian) {\n    return getFloat16(this._dataView, offset, littleEndian);\n  }\n\n  getFloat32(offset, littleEndian) {\n    return this._dataView.getFloat32(offset, littleEndian);\n  }\n\n  getFloat64(offset, littleEndian) {\n    return this._dataView.getFloat64(offset, littleEndian);\n  }\n}\n","export default class DataSlice {\n  constructor(arrayBuffer, sliceOffset, littleEndian, bigTiff) {\n    this._dataView = new DataView(arrayBuffer);\n    this._sliceOffset = sliceOffset;\n    this._littleEndian = littleEndian;\n    this._bigTiff = bigTiff;\n  }\n\n  get sliceOffset() {\n    return this._sliceOffset;\n  }\n\n  get sliceTop() {\n    return this._sliceOffset + this.buffer.byteLength;\n  }\n\n  get littleEndian() {\n    return this._littleEndian;\n  }\n\n  get bigTiff() {\n    return this._bigTiff;\n  }\n\n  get buffer() {\n    return this._dataView.buffer;\n  }\n\n  covers(offset, length) {\n    return this.sliceOffset <= offset && this.sliceTop >= offset + length;\n  }\n\n  readUint8(offset) {\n    return this._dataView.getUint8(\n      offset - this._sliceOffset, this._littleEndian,\n    );\n  }\n\n  readInt8(offset) {\n    return this._dataView.getInt8(\n      offset - this._sliceOffset, this._littleEndian,\n    );\n  }\n\n  readUint16(offset) {\n    return this._dataView.getUint16(\n      offset - this._sliceOffset, this._littleEndian,\n    );\n  }\n\n  readInt16(offset) {\n    return this._dataView.getInt16(\n      offset - this._sliceOffset, this._littleEndian,\n    );\n  }\n\n  readUint32(offset) {\n    return this._dataView.getUint32(\n      offset - this._sliceOffset, this._littleEndian,\n    );\n  }\n\n  readInt32(offset) {\n    return this._dataView.getInt32(\n      offset - this._sliceOffset, this._littleEndian,\n    );\n  }\n\n  readFloat32(offset) {\n    return this._dataView.getFloat32(\n      offset - this._sliceOffset, this._littleEndian,\n    );\n  }\n\n  readFloat64(offset) {\n    return this._dataView.getFloat64(\n      offset - this._sliceOffset, this._littleEndian,\n    );\n  }\n\n  readUint64(offset) {\n    const left = this.readUint32(offset);\n    const right = this.readUint32(offset + 4);\n    let combined;\n    if (this._littleEndian) {\n      combined = left + ((2 ** 32) * right);\n      if (!Number.isSafeInteger(combined)) {\n        throw new Error(\n          `${combined} exceeds MAX_SAFE_INTEGER. `\n          + 'Precision may be lost. Please report if you get this message to https://github.com/geotiffjs/geotiff.js/issues',\n        );\n      }\n      return combined;\n    }\n    combined = ((2 ** 32) * left) + right;\n    if (!Number.isSafeInteger(combined)) {\n      throw new Error(\n        `${combined} exceeds MAX_SAFE_INTEGER. `\n        + 'Precision may be lost. Please report if you get this message to https://github.com/geotiffjs/geotiff.js/issues',\n      );\n    }\n\n    return combined;\n  }\n\n  // adapted from https://stackoverflow.com/a/55338384/8060591\n  readInt64(offset) {\n    let value = 0;\n    const isNegative = (this._dataView.getUint8(offset + (this._littleEndian ? 7 : 0)) & 0x80)\n      > 0;\n    let carrying = true;\n    for (let i = 0; i < 8; i++) {\n      let byte = this._dataView.getUint8(\n        offset + (this._littleEndian ? i : 7 - i),\n      );\n      if (isNegative) {\n        if (carrying) {\n          if (byte !== 0x00) {\n            byte = ~(byte - 1) & 0xff;\n            carrying = false;\n          }\n        } else {\n          byte = ~byte & 0xff;\n        }\n      }\n      value += byte * (256 ** i);\n    }\n    if (isNegative) {\n      value = -value;\n    }\n    return value;\n  }\n\n  readOffset(offset) {\n    if (this._bigTiff) {\n      return this.readUint64(offset);\n    }\n    return this.readUint32(offset);\n  }\n}\n","const CRLFCRLF = '\\r\\n\\r\\n';\n\n/*\n * Shim for 'Object.fromEntries'\n */\nfunction itemsToObject(items) {\n  if (typeof Object.fromEntries !== 'undefined') {\n    return Object.fromEntries(items);\n  }\n  const obj = {};\n  for (const [key, value] of items) {\n    obj[key.toLowerCase()] = value;\n  }\n  return obj;\n}\n\n/**\n * Parse HTTP headers from a given string.\n * @param {String} text the text to parse the headers from\n * @returns {Object} the parsed headers with lowercase keys\n */\nfunction parseHeaders(text) {\n  const items = text\n    .split('\\r\\n')\n    .map((line) => {\n      const kv = line.split(':').map((str) => str.trim());\n      kv[0] = kv[0].toLowerCase();\n      return kv;\n    });\n\n  return itemsToObject(items);\n}\n\n/**\n * Parse a 'Content-Type' header value to the content-type and parameters\n * @param {String} rawContentType the raw string to parse from\n * @returns {Object} the parsed content type with the fields: type and params\n */\nexport function parseContentType(rawContentType) {\n  const [type, ...rawParams] = rawContentType.split(';').map((s) => s.trim());\n  const paramsItems = rawParams.map((param) => param.split('='));\n  return { type, params: itemsToObject(paramsItems) };\n}\n\n/**\n * Parse a 'Content-Range' header value to its start, end, and total parts\n * @param {String} rawContentRange the raw string to parse from\n * @returns {Object} the parsed parts\n */\nexport function parseContentRange(rawContentRange) {\n  let start;\n  let end;\n  let total;\n\n  if (rawContentRange) {\n    [, start, end, total] = rawContentRange.match(/bytes (\\d+)-(\\d+)\\/(\\d+)/);\n    start = parseInt(start, 10);\n    end = parseInt(end, 10);\n    total = parseInt(total, 10);\n  }\n\n  return { start, end, total };\n}\n\n/**\n * Parses a list of byteranges from the given 'multipart/byteranges' HTTP response.\n * Each item in the list has the following properties:\n * - headers: the HTTP headers\n * - data: the sliced ArrayBuffer for that specific part\n * - offset: the offset of the byterange within its originating file\n * - length: the length of the byterange\n * @param {ArrayBuffer} responseArrayBuffer the response to be parsed and split\n * @param {String} boundary the boundary string used to split the sections\n * @returns {Object[]} the parsed byteranges\n */\nexport function parseByteRanges(responseArrayBuffer, boundary) {\n  let offset = null;\n  const decoder = new TextDecoder('ascii');\n  const out = [];\n\n  const startBoundary = `--${boundary}`;\n  const endBoundary = `${startBoundary}--`;\n\n  // search for the initial boundary, may be offset by some bytes\n  // TODO: more efficient to check for `--` in bytes directly\n  for (let i = 0; i < 10; ++i) {\n    const text = decoder.decode(\n      new Uint8Array(responseArrayBuffer, i, startBoundary.length),\n    );\n    if (text === startBoundary) {\n      offset = i;\n    }\n  }\n\n  if (offset === null) {\n    throw new Error('Could not find initial boundary');\n  }\n\n  while (offset < responseArrayBuffer.byteLength) {\n    const text = decoder.decode(\n      new Uint8Array(responseArrayBuffer, offset,\n        Math.min(startBoundary.length + 1024, responseArrayBuffer.byteLength - offset),\n      ),\n    );\n\n    // break if we arrived at the end\n    if (text.length === 0 || text.startsWith(endBoundary)) {\n      break;\n    }\n\n    // assert that we are actually dealing with a byterange and are at the correct offset\n    if (!text.startsWith(startBoundary)) {\n      throw new Error('Part does not start with boundary');\n    }\n\n    // get a substring from where we read the headers\n    const innerText = text.substr(startBoundary.length + 2);\n\n    if (innerText.length === 0) {\n      break;\n    }\n\n    // find the double linebreak that denotes the end of the headers\n    const endOfHeaders = innerText.indexOf(CRLFCRLF);\n\n    // parse the headers to get the content range size\n    const headers = parseHeaders(innerText.substr(0, endOfHeaders));\n    const { start, end, total } = parseContentRange(headers['content-range']);\n\n    // calculate the length of the slice and the next offset\n    const startOfData = offset + startBoundary.length + endOfHeaders + CRLFCRLF.length;\n    const length = parseInt(end, 10) + 1 - parseInt(start, 10);\n    out.push({\n      headers,\n      data: responseArrayBuffer.slice(startOfData, startOfData + length),\n      offset: start,\n      length,\n      fileSize: total,\n    });\n\n    offset = startOfData + length + 4;\n  }\n\n  return out;\n}\n","import QuickLRU from 'quick-lru';\nimport { BaseSource } from './basesource.js';\nimport { AbortError, AggregateError, wait, zip } from '../utils.js';\n\nclass Block {\n  /**\n   *\n   * @param {number} offset\n   * @param {number} length\n   * @param {ArrayBuffer} [data]\n   */\n  constructor(offset, length, data = null) {\n    this.offset = offset;\n    this.length = length;\n    this.data = data;\n  }\n\n  /**\n   * @returns {number} the top byte border\n   */\n  get top() {\n    return this.offset + this.length;\n  }\n}\n\nclass BlockGroup {\n  /**\n   *\n   * @param {number} offset\n   * @param {number} length\n   * @param {number[]} blockIds\n   */\n  constructor(offset, length, blockIds) {\n    this.offset = offset;\n    this.length = length;\n    this.blockIds = blockIds;\n  }\n}\n\nexport class BlockedSource extends BaseSource {\n  /**\n   *\n   * @param {Source} source The underlying source that shall be blocked and cached\n   * @param {object} options\n   */\n  constructor(source, { blockSize = 65536, cacheSize = 100 } = {}) {\n    super();\n    this.source = source;\n    this.blockSize = blockSize;\n\n    this.blockCache = new QuickLRU({ maxSize: cacheSize });\n\n    // mapping blockId -> Block instance\n    this.blockRequests = new Map();\n\n    // set of blockIds missing for the current requests\n    this.blockIdsToFetch = new Set();\n\n    this.abortedBlockIds = new Set();\n  }\n\n  get fileSize() {\n    return this.source.fileSize;\n  }\n\n  /**\n   *\n   * @param {basesource/Slice[]} slices\n   */\n  async fetch(slices, signal) {\n    const blockRequests = [];\n    const missingBlockIds = [];\n    const allBlockIds = [];\n\n    for (const { offset, length } of slices) {\n      let top = offset + length;\n\n      const { fileSize } = this;\n      if (fileSize !== null) {\n        top = Math.min(top, fileSize);\n      }\n\n      const firstBlockOffset = Math.floor(offset / this.blockSize) * this.blockSize;\n\n      for (let current = firstBlockOffset; current < top; current += this.blockSize) {\n        const blockId = Math.floor(current / this.blockSize);\n        if (!this.blockCache.has(blockId) && !this.blockRequests.has(blockId)) {\n          this.blockIdsToFetch.add(blockId);\n          missingBlockIds.push(blockId);\n        }\n        if (this.blockRequests.has(blockId)) {\n          blockRequests.push(this.blockRequests.get(blockId));\n        }\n        allBlockIds.push(blockId);\n      }\n    }\n\n    // allow additional block requests to accumulate\n    await wait();\n    this.fetchBlocks(signal);\n\n    // Gather all of the new requests that this fetch call is contributing to `fetch`.\n    const missingRequests = [];\n    for (const blockId of missingBlockIds) {\n      // The requested missing block could already be in the cache\n      // instead of having its request still be outstanding.\n      if (this.blockRequests.has(blockId)) {\n        missingRequests.push(this.blockRequests.get(blockId));\n      }\n    }\n\n    // Actually await all pending requests that are needed for this `fetch`.\n    await Promise.allSettled(blockRequests);\n    await Promise.allSettled(missingRequests);\n\n    // Perform retries if a block was interrupted by a previous signal\n    const abortedBlockRequests = [];\n    const abortedBlockIds = allBlockIds\n      .filter((id) => this.abortedBlockIds.has(id) || !this.blockCache.has(id));\n    abortedBlockIds.forEach((id) => this.blockIdsToFetch.add(id));\n    // start the retry of some blocks if required\n    if (abortedBlockIds.length > 0 && signal && !signal.aborted) {\n      this.fetchBlocks(null);\n      for (const blockId of abortedBlockIds) {\n        const block = this.blockRequests.get(blockId);\n        if (!block) {\n          throw new Error(`Block ${blockId} is not in the block requests`);\n        }\n        abortedBlockRequests.push(block);\n      }\n      await Promise.allSettled(abortedBlockRequests);\n    }\n\n    // throw an  abort error\n    if (signal && signal.aborted) {\n      throw new AbortError('Request was aborted');\n    }\n\n    const blocks = allBlockIds.map((id) => this.blockCache.get(id));\n    const failedBlocks = blocks.filter((i) => !i);\n    if (failedBlocks.length) {\n      throw new AggregateError(failedBlocks, 'Request failed');\n    }\n\n    // create a final Map, with all required blocks for this request to satisfy\n    const requiredBlocks = new Map(zip(allBlockIds, blocks));\n\n    // TODO: satisfy each slice\n    return this.readSliceData(slices, requiredBlocks);\n  }\n\n  /**\n   *\n   * @param {AbortSignal} signal\n   */\n  fetchBlocks(signal) {\n    // check if we still need to\n    if (this.blockIdsToFetch.size > 0) {\n      const groups = this.groupBlocks(this.blockIdsToFetch);\n\n      // start requesting slices of data\n      const groupRequests = this.source.fetch(groups, signal);\n\n      for (let groupIndex = 0; groupIndex < groups.length; ++groupIndex) {\n        const group = groups[groupIndex];\n\n        for (const blockId of group.blockIds) {\n          // make an async IIFE for each block\n          this.blockRequests.set(blockId, (async () => {\n            try {\n              const response = (await groupRequests)[groupIndex];\n              const blockOffset = blockId * this.blockSize;\n              const o = blockOffset - response.offset;\n              const t = Math.min(o + this.blockSize, response.data.byteLength);\n              const data = response.data.slice(o, t);\n              const block = new Block(\n                blockOffset,\n                data.byteLength,\n                data,\n                blockId,\n              );\n              this.blockCache.set(blockId, block);\n              this.abortedBlockIds.delete(blockId);\n            } catch (err) {\n              if (err.name === 'AbortError') {\n                // store the signal here, we need it to determine later if an\n                // error was caused by this signal\n                err.signal = signal;\n                this.blockCache.delete(blockId);\n                this.abortedBlockIds.add(blockId);\n              } else {\n                throw err;\n              }\n            } finally {\n              this.blockRequests.delete(blockId);\n            }\n          })());\n        }\n      }\n      this.blockIdsToFetch.clear();\n    }\n  }\n\n  /**\n   *\n   * @param {Set} blockIds\n   * @returns {BlockGroup[]}\n   */\n  groupBlocks(blockIds) {\n    const sortedBlockIds = Array.from(blockIds).sort((a, b) => a - b);\n    if (sortedBlockIds.length === 0) {\n      return [];\n    }\n    let current = [];\n    let lastBlockId = null;\n    const groups = [];\n\n    for (const blockId of sortedBlockIds) {\n      if (lastBlockId === null || lastBlockId + 1 === blockId) {\n        current.push(blockId);\n        lastBlockId = blockId;\n      } else {\n        groups.push(new BlockGroup(\n          current[0] * this.blockSize,\n          current.length * this.blockSize,\n          current,\n        ));\n        current = [blockId];\n        lastBlockId = blockId;\n      }\n    }\n\n    groups.push(new BlockGroup(\n      current[0] * this.blockSize,\n      current.length * this.blockSize,\n      current,\n    ));\n\n    return groups;\n  }\n\n  /**\n   *\n   * @param {Slice[]} slices\n   * @param {Map} blocks\n   */\n  readSliceData(slices, blocks) {\n    return slices.map((slice) => {\n      let top = slice.offset + slice.length;\n      if (this.fileSize !== null) {\n        top = Math.min(this.fileSize, top);\n      }\n      const blockIdLow = Math.floor(slice.offset / this.blockSize);\n      const blockIdHigh = Math.floor(top / this.blockSize);\n      const sliceData = new ArrayBuffer(slice.length);\n      const sliceView = new Uint8Array(sliceData);\n\n      for (let blockId = blockIdLow; blockId <= blockIdHigh; ++blockId) {\n        const block = blocks.get(blockId);\n        const delta = block.offset - slice.offset;\n        const topDelta = block.top - top;\n        let blockInnerOffset = 0;\n        let rangeInnerOffset = 0;\n        let usedBlockLength;\n\n        if (delta < 0) {\n          blockInnerOffset = -delta;\n        } else if (delta > 0) {\n          rangeInnerOffset = delta;\n        }\n\n        if (topDelta < 0) {\n          usedBlockLength = block.length - blockInnerOffset;\n        } else {\n          usedBlockLength = top - block.offset - blockInnerOffset;\n        }\n\n        const blockView = new Uint8Array(block.data, blockInnerOffset, usedBlockLength);\n        sliceView.set(blockView, rangeInnerOffset);\n      }\n\n      return sliceData;\n    });\n  }\n}\n","import { BaseClient, BaseResponse } from './base.js';\n\nclass FetchResponse extends BaseResponse {\n  /**\n   * BaseResponse facade for fetch API Response\n   * @param {Response} response\n   */\n  constructor(response) {\n    super();\n    this.response = response;\n  }\n\n  get status() {\n    return this.response.status;\n  }\n\n  getHeader(name) {\n    return this.response.headers.get(name);\n  }\n\n  async getData() {\n    const data = this.response.arrayBuffer\n      ? await this.response.arrayBuffer()\n      : (await this.response.buffer()).buffer;\n    return data;\n  }\n}\n\nexport class FetchClient extends BaseClient {\n  constructor(url, credentials) {\n    super(url);\n    this.credentials = credentials;\n  }\n\n  async request({ headers, credentials, signal } = {}) {\n    const response = await fetch(this.url, {\n      headers, credentials, signal,\n    });\n    return new FetchResponse(response);\n  }\n}\n","import { BaseClient, BaseResponse } from './base.js';\nimport { AbortError } from '../../utils.js';\n\nclass XHRResponse extends BaseResponse {\n  /**\n   * BaseResponse facade for XMLHttpRequest\n   * @param {XMLHttpRequest} xhr\n   * @param {ArrayBuffer} data\n   */\n  constructor(xhr, data) {\n    super();\n    this.xhr = xhr;\n    this.data = data;\n  }\n\n  get status() {\n    return this.xhr.status;\n  }\n\n  getHeader(name) {\n    return this.xhr.getResponseHeader(name);\n  }\n\n  async getData() {\n    return this.data;\n  }\n}\n\nexport class XHRClient extends BaseClient {\n  constructRequest(headers, signal) {\n    return new Promise((resolve, reject) => {\n      const xhr = new XMLHttpRequest();\n      xhr.open('GET', this.url);\n      xhr.responseType = 'arraybuffer';\n      for (const [key, value] of Object.entries(headers)) {\n        xhr.setRequestHeader(key, value);\n      }\n\n      // hook signals\n      xhr.onload = () => {\n        const data = xhr.response;\n        resolve(new XHRResponse(xhr, data));\n      };\n      xhr.onerror = reject;\n      xhr.onabort = () => reject(new AbortError('Request aborted'));\n      xhr.send();\n\n      if (signal) {\n        if (signal.aborted) {\n          xhr.abort();\n        }\n        signal.addEventListener('abort', () => xhr.abort());\n      }\n    });\n  }\n\n  async request({ headers, signal } = {}) {\n    const response = await this.constructRequest(headers, signal);\n    return response;\n  }\n}\n","import { parseByteRanges, parseContentRange, parseContentType } from './httputils.js';\nimport { BaseSource } from './basesource.js';\nimport { BlockedSource } from './blockedsource.js';\n\nimport { FetchClient } from './client/fetch.js';\nimport { XHRClient } from './client/xhr.js';\nimport { HttpClient } from './client/http.js';\n\nclass RemoteSource extends BaseSource {\n  /**\n   *\n   * @param {BaseClient} client\n   * @param {object} headers\n   * @param {numbers} maxRanges\n   * @param {boolean} allowFullFile\n   */\n  constructor(client, headers, maxRanges, allowFullFile) {\n    super();\n    this.client = client;\n    this.headers = headers;\n    this.maxRanges = maxRanges;\n    this.allowFullFile = allowFullFile;\n    this._fileSize = null;\n  }\n\n  /**\n   *\n   * @param {Slice[]} slices\n   */\n  async fetch(slices, signal) {\n    // if we allow multi-ranges, split the incoming request into that many sub-requests\n    // and join them afterwards\n    if (this.maxRanges >= slices.length) {\n      return this.fetchSlices(slices, signal);\n    } else if (this.maxRanges > 0 && slices.length > 1) {\n      // TODO: split into multiple multi-range requests\n\n      // const subSlicesRequests = [];\n      // for (let i = 0; i < slices.length; i += this.maxRanges) {\n      //   subSlicesRequests.push(\n      //     this.fetchSlices(slices.slice(i, i + this.maxRanges), signal),\n      //   );\n      // }\n      // return (await Promise.all(subSlicesRequests)).flat();\n    }\n\n    // otherwise make a single request for each slice\n    return Promise.all(\n      slices.map((slice) => this.fetchSlice(slice, signal)),\n    );\n  }\n\n  async fetchSlices(slices, signal) {\n    const response = await this.client.request({\n      headers: {\n        ...this.headers,\n        Range: `bytes=${slices\n          .map(({ offset, length }) => `${offset}-${offset + length}`)\n          .join(',')\n        }`,\n      },\n      signal,\n    });\n\n    if (!response.ok) {\n      throw new Error('Error fetching data.');\n    } else if (response.status === 206) {\n      const { type, params } = parseContentType(response.getHeader('content-type'));\n      if (type === 'multipart/byteranges') {\n        const byteRanges = parseByteRanges(await response.getData(), params.boundary);\n        this._fileSize = byteRanges[0].fileSize || null;\n        return byteRanges;\n      }\n\n      const data = await response.getData();\n\n      const { start, end, total } = parseContentRange(response.getHeader('content-range'));\n      this._fileSize = total || null;\n      const first = [{\n        data,\n        offset: start,\n        length: end - start,\n      }];\n\n      if (slices.length > 1) {\n        // we requested more than one slice, but got only the first\n        // unfortunately, some HTTP Servers don't support multi-ranges\n        // and return onyl the first\n\n        // get the rest of the slices and fetch them iteratetively\n        const others = await Promise.all(slices.slice(1).map((slice) => this.fetchSlice(slice, signal)));\n        return first.concat(others);\n      }\n      return first;\n    } else {\n      if (!this.allowFullFile) {\n        throw new Error('Server responded with full file');\n      }\n      const data = await response.getData();\n      this._fileSize = data.byteLength;\n      return [{\n        data,\n        offset: 0,\n        length: data.byteLength,\n      }];\n    }\n  }\n\n  async fetchSlice(slice, signal) {\n    const { offset, length } = slice;\n    const response = await this.client.request({\n      headers: {\n        ...this.headers,\n        Range: `bytes=${offset}-${offset + length}`,\n      },\n      signal,\n    });\n\n    // check the response was okay and if the server actually understands range requests\n    if (!response.ok) {\n      throw new Error('Error fetching data.');\n    } else if (response.status === 206) {\n      const data = await response.getData();\n\n      const { total } = parseContentRange(response.getHeader('content-range'));\n      this._fileSize = total || null;\n      return {\n        data,\n        offset,\n        length,\n      };\n    } else {\n      if (!this.allowFullFile) {\n        throw new Error('Server responded with full file');\n      }\n\n      const data = await response.getData();\n\n      this._fileSize = data.byteLength;\n      return {\n        data,\n        offset: 0,\n        length: data.byteLength,\n      };\n    }\n  }\n\n  get fileSize() {\n    return this._fileSize;\n  }\n}\n\nfunction maybeWrapInBlockedSource(source, { blockSize, cacheSize }) {\n  if (blockSize === null) {\n    return source;\n  }\n  return new BlockedSource(source, { blockSize, cacheSize });\n}\n\nexport function makeFetchSource(url, { headers = {}, credentials, maxRanges = 0, allowFullFile = false, ...blockOptions } = {}) {\n  const client = new FetchClient(url, credentials);\n  const source = new RemoteSource(client, headers, maxRanges, allowFullFile);\n  return maybeWrapInBlockedSource(source, blockOptions);\n}\n\nexport function makeXHRSource(url, { headers = {}, maxRanges = 0, allowFullFile = false, ...blockOptions } = {}) {\n  const client = new XHRClient(url);\n  const source = new RemoteSource(client, headers, maxRanges, allowFullFile);\n  return maybeWrapInBlockedSource(source, blockOptions);\n}\n\nexport function makeHttpSource(url, { headers = {}, maxRanges = 0, allowFullFile = false, ...blockOptions } = {}) {\n  const client = new HttpClient(url);\n  const source = new RemoteSource(client, headers, maxRanges, allowFullFile);\n  return maybeWrapInBlockedSource(source, blockOptions);\n}\n\n/**\n *\n * @param {string} url\n * @param {object} options\n */\nexport function makeRemoteSource(url, { forceXHR = false, ...clientOptions } = {}) {\n  if (typeof fetch === 'function' && !forceXHR) {\n    return makeFetchSource(url, clientOptions);\n  }\n  if (typeof XMLHttpRequest !== 'undefined') {\n    return makeXHRSource(url, clientOptions);\n  }\n  return makeHttpSource(url, clientOptions);\n}\n","import { BaseSource } from './basesource.js';\nimport { AbortError } from '../utils.js';\n\nclass ArrayBufferSource extends BaseSource {\n  constructor(arrayBuffer) {\n    super();\n    this.arrayBuffer = arrayBuffer;\n  }\n\n  fetchSlice(slice, signal) {\n    if (signal && signal.aborted) {\n      throw new AbortError('Request aborted');\n    }\n    return this.arrayBuffer.slice(slice.offset, slice.offset + slice.length);\n  }\n}\n\nexport function makeBufferSource(arrayBuffer) {\n  return new ArrayBufferSource(arrayBuffer);\n}\n","import { BaseSource } from './basesource.js';\n\nclass FileReaderSource extends BaseSource {\n  constructor(file) {\n    super();\n    this.file = file;\n  }\n\n  async fetchSlice(slice, signal) {\n    return new Promise((resolve, reject) => {\n      const blob = this.file.slice(slice.offset, slice.offset + slice.length);\n      const reader = new FileReader();\n      reader.onload = (event) => resolve(event.target.result);\n      reader.onerror = reject;\n      reader.onabort = reject;\n      reader.readAsArrayBuffer(blob);\n\n      if (signal) {\n        signal.addEventListener('abort', () => reader.abort());\n      }\n    });\n  }\n}\n\n/**\n * Create a new source from a given file/blob.\n * @param {Blob} file The file or blob to read from.\n * @returns The constructed source\n */\nexport function makeFileReaderSource(file) {\n  return new FileReaderSource(file);\n}\n","/*\n  Some parts of this file are based on UTIF.js,\n  which was released under the MIT License.\n  You can view that here:\n  https://github.com/photopea/UTIF.js/blob/master/LICENSE\n*/\nimport { fieldTagNames, fieldTagTypes, fieldTypeNames, geoKeyNames } from './globals.js';\nimport { assign, endsWith, forEach, invert, times } from './utils.js';\n\nconst tagName2Code = invert(fieldTagNames);\nconst geoKeyName2Code = invert(geoKeyNames);\nconst name2code = {};\nassign(name2code, tagName2Code);\nassign(name2code, geoKeyName2Code);\nconst typeName2byte = invert(fieldTypeNames);\n\n// config variables\nconst numBytesInIfd = 1000;\n\nconst _binBE = {\n  nextZero: (data, o) => {\n    let oincr = o;\n    while (data[oincr] !== 0) {\n      oincr++;\n    }\n    return oincr;\n  },\n  readUshort: (buff, p) => {\n    return (buff[p] << 8) | buff[p + 1];\n  },\n  readShort: (buff, p) => {\n    const a = _binBE.ui8;\n    a[0] = buff[p + 1];\n    a[1] = buff[p + 0];\n    return _binBE.i16[0];\n  },\n  readInt: (buff, p) => {\n    const a = _binBE.ui8;\n    a[0] = buff[p + 3];\n    a[1] = buff[p + 2];\n    a[2] = buff[p + 1];\n    a[3] = buff[p + 0];\n    return _binBE.i32[0];\n  },\n  readUint: (buff, p) => {\n    const a = _binBE.ui8;\n    a[0] = buff[p + 3];\n    a[1] = buff[p + 2];\n    a[2] = buff[p + 1];\n    a[3] = buff[p + 0];\n    return _binBE.ui32[0];\n  },\n  readASCII: (buff, p, l) => {\n    return l.map((i) => String.fromCharCode(buff[p + i])).join('');\n  },\n  readFloat: (buff, p) => {\n    const a = _binBE.ui8;\n    times(4, (i) => {\n      a[i] = buff[p + 3 - i];\n    });\n    return _binBE.fl32[0];\n  },\n  readDouble: (buff, p) => {\n    const a = _binBE.ui8;\n    times(8, (i) => {\n      a[i] = buff[p + 7 - i];\n    });\n    return _binBE.fl64[0];\n  },\n  writeUshort: (buff, p, n) => {\n    buff[p] = (n >> 8) & 255;\n    buff[p + 1] = n & 255;\n  },\n  writeUint: (buff, p, n) => {\n    buff[p] = (n >> 24) & 255;\n    buff[p + 1] = (n >> 16) & 255;\n    buff[p + 2] = (n >> 8) & 255;\n    buff[p + 3] = (n >> 0) & 255;\n  },\n  writeASCII: (buff, p, s) => {\n    times(s.length, (i) => {\n      buff[p + i] = s.charCodeAt(i);\n    });\n  },\n  ui8: new Uint8Array(8),\n};\n\n_binBE.fl64 = new Float64Array(_binBE.ui8.buffer);\n\n_binBE.writeDouble = (buff, p, n) => {\n  _binBE.fl64[0] = n;\n  times(8, (i) => {\n    buff[p + i] = _binBE.ui8[7 - i];\n  });\n};\n\nconst _writeIFD = (bin, data, _offset, ifd) => {\n  let offset = _offset;\n\n  const keys = Object.keys(ifd).filter((key) => {\n    return key !== undefined && key !== null && key !== 'undefined';\n  });\n\n  bin.writeUshort(data, offset, keys.length);\n  offset += 2;\n\n  let eoff = offset + (12 * keys.length) + 4;\n\n  for (const key of keys) {\n    let tag = null;\n    if (typeof key === 'number') {\n      tag = key;\n    } else if (typeof key === 'string') {\n      tag = parseInt(key, 10);\n    }\n\n    const typeName = fieldTagTypes[tag];\n    const typeNum = typeName2byte[typeName];\n\n    if (typeName == null || typeName === undefined || typeof typeName === 'undefined') {\n      throw new Error(`unknown type of tag: ${tag}`);\n    }\n\n    let val = ifd[key];\n\n    if (val === undefined) {\n      throw new Error(`failed to get value for key ${key}`);\n    }\n\n    // ASCIIZ format with trailing 0 character\n    // http://www.fileformat.info/format/tiff/corion.htm\n    // https://stackoverflow.com/questions/7783044/whats-the-difference-between-asciiz-vs-ascii\n    if (typeName === 'ASCII' && typeof val === 'string' && endsWith(val, '\\u0000') === false) {\n      val += '\\u0000';\n    }\n\n    const num = val.length;\n\n    bin.writeUshort(data, offset, tag);\n    offset += 2;\n\n    bin.writeUshort(data, offset, typeNum);\n    offset += 2;\n\n    bin.writeUint(data, offset, num);\n    offset += 4;\n\n    let dlen = [-1, 1, 1, 2, 4, 8, 0, 0, 0, 0, 0, 0, 8][typeNum] * num;\n    let toff = offset;\n\n    if (dlen > 4) {\n      bin.writeUint(data, offset, eoff);\n      toff = eoff;\n    }\n\n    if (typeName === 'ASCII') {\n      bin.writeASCII(data, toff, val);\n    } else if (typeName === 'SHORT') {\n      times(num, (i) => {\n        bin.writeUshort(data, toff + (2 * i), val[i]);\n      });\n    } else if (typeName === 'LONG') {\n      times(num, (i) => {\n        bin.writeUint(data, toff + (4 * i), val[i]);\n      });\n    } else if (typeName === 'RATIONAL') {\n      times(num, (i) => {\n        bin.writeUint(data, toff + (8 * i), Math.round(val[i] * 10000));\n        bin.writeUint(data, toff + (8 * i) + 4, 10000);\n      });\n    } else if (typeName === 'DOUBLE') {\n      times(num, (i) => {\n        bin.writeDouble(data, toff + (8 * i), val[i]);\n      });\n    }\n\n    if (dlen > 4) {\n      dlen += (dlen & 1);\n      eoff += dlen;\n    }\n\n    offset += 4;\n  }\n\n  return [offset, eoff];\n};\n\nconst encodeIfds = (ifds) => {\n  const data = new Uint8Array(numBytesInIfd);\n  let offset = 4;\n  const bin = _binBE;\n\n  // set big-endian byte-order\n  // https://en.wikipedia.org/wiki/TIFF#Byte_order\n  data[0] = 77;\n  data[1] = 77;\n\n  // set format-version number\n  // https://en.wikipedia.org/wiki/TIFF#Byte_order\n  data[3] = 42;\n\n  let ifdo = 8;\n\n  bin.writeUint(data, offset, ifdo);\n\n  offset += 4;\n\n  ifds.forEach((ifd, i) => {\n    const noffs = _writeIFD(bin, data, ifdo, ifd);\n    ifdo = noffs[1];\n    if (i < ifds.length - 1) {\n      bin.writeUint(data, noffs[0], ifdo);\n    }\n  });\n\n  if (data.slice) {\n    return data.slice(0, ifdo).buffer;\n  }\n\n  // node hasn't implemented slice on Uint8Array yet\n  const result = new Uint8Array(ifdo);\n  for (let i = 0; i < ifdo; i++) {\n    result[i] = data[i];\n  }\n  return result.buffer;\n};\n\nconst encodeImage = (values, width, height, metadata) => {\n  if (height === undefined || height === null) {\n    throw new Error(`you passed into encodeImage a width of type ${height}`);\n  }\n\n  if (width === undefined || width === null) {\n    throw new Error(`you passed into encodeImage a width of type ${width}`);\n  }\n\n  const ifd = {\n    256: [width], // ImageWidth\n    257: [height], // ImageLength\n    273: [numBytesInIfd], // strips offset\n    278: [height], // RowsPerStrip\n    305: 'geotiff.js', // no array for ASCII(Z)\n  };\n\n  if (metadata) {\n    for (const i in metadata) {\n      if (metadata.hasOwnProperty(i)) {\n        ifd[i] = metadata[i];\n      }\n    }\n  }\n\n  const prfx = new Uint8Array(encodeIfds([ifd]));\n\n  const img = new Uint8Array(values);\n\n  const samplesPerPixel = ifd[277];\n\n  const data = new Uint8Array(numBytesInIfd + (width * height * samplesPerPixel));\n  times(prfx.length, (i) => {\n    data[i] = prfx[i];\n  });\n  forEach(img, (value, i) => {\n    data[numBytesInIfd + i] = value;\n  });\n\n  return data.buffer;\n};\n\nconst convertToTids = (input) => {\n  const result = {};\n  for (const key in input) {\n    if (key !== 'StripOffsets') {\n      if (!name2code[key]) {\n        console.error(key, 'not in name2code:', Object.keys(name2code));\n      }\n      result[name2code[key]] = input[key];\n    }\n  }\n  return result;\n};\n\nconst toArray = (input) => {\n  if (Array.isArray(input)) {\n    return input;\n  }\n  return [input];\n};\n\nconst metadataDefaults = [\n  ['Compression', 1], // no compression\n  ['PlanarConfiguration', 1],\n  ['ExtraSamples', 0],\n];\n\nexport function writeGeotiff(data, metadata) {\n  const isFlattened = typeof data[0] === 'number';\n\n  let height;\n  let numBands;\n  let width;\n  let flattenedValues;\n\n  if (isFlattened) {\n    height = metadata.height || metadata.ImageLength;\n    width = metadata.width || metadata.ImageWidth;\n    numBands = data.length / (height * width);\n    flattenedValues = data;\n  } else {\n    numBands = data.length;\n    height = data[0].length;\n    width = data[0][0].length;\n    flattenedValues = [];\n    times(height, (rowIndex) => {\n      times(width, (columnIndex) => {\n        times(numBands, (bandIndex) => {\n          flattenedValues.push(data[bandIndex][rowIndex][columnIndex]);\n        });\n      });\n    });\n  }\n\n  metadata.ImageLength = height;\n  delete metadata.height;\n  metadata.ImageWidth = width;\n  delete metadata.width;\n\n  // consult https://www.loc.gov/preservation/digital/formats/content/tiff_tags.shtml\n\n  if (!metadata.BitsPerSample) {\n    metadata.BitsPerSample = times(numBands, () => 8);\n  }\n\n  metadataDefaults.forEach((tag) => {\n    const key = tag[0];\n    if (!metadata[key]) {\n      const value = tag[1];\n      metadata[key] = value;\n    }\n  });\n\n  // The color space of the image data.\n  // 1=black is zero and 2=RGB.\n  if (!metadata.PhotometricInterpretation) {\n    metadata.PhotometricInterpretation = metadata.BitsPerSample.length === 3 ? 2 : 1;\n  }\n\n  // The number of components per pixel.\n  if (!metadata.SamplesPerPixel) {\n    metadata.SamplesPerPixel = [numBands];\n  }\n\n  if (!metadata.StripByteCounts) {\n    // we are only writing one strip\n    metadata.StripByteCounts = [numBands * height * width];\n  }\n\n  if (!metadata.ModelPixelScale) {\n    // assumes raster takes up exactly the whole globe\n    metadata.ModelPixelScale = [360 / width, 180 / height, 0];\n  }\n\n  if (!metadata.SampleFormat) {\n    metadata.SampleFormat = times(numBands, () => 1);\n  }\n\n  // if didn't pass in projection information, assume the popular 4326 \"geographic projection\"\n  if (!metadata.hasOwnProperty('GeographicTypeGeoKey') && !metadata.hasOwnProperty('ProjectedCSTypeGeoKey')) {\n    metadata.GeographicTypeGeoKey = 4326;\n    metadata.ModelTiepoint = [0, 0, 0, -180, 90, 0]; // raster fits whole globe\n    metadata.GeogCitationGeoKey = 'WGS 84';\n    metadata.GTModelTypeGeoKey = 2;\n  }\n\n  const geoKeys = Object.keys(metadata)\n    .filter((key) => endsWith(key, 'GeoKey'))\n    .sort((a, b) => name2code[a] - name2code[b]);\n\n  if (!metadata.GeoAsciiParams) {\n    let geoAsciiParams = '';\n    geoKeys.forEach((name) => {\n      const code = Number(name2code[name]);\n      const tagType = fieldTagTypes[code];\n      if (tagType === 'ASCII') {\n        geoAsciiParams += `${metadata[name].toString()}\\u0000`;\n      }\n    });\n    if (geoAsciiParams.length > 0) {\n      metadata.GeoAsciiParams = geoAsciiParams;\n    }\n  }\n\n  if (!metadata.GeoKeyDirectory) {\n    const NumberOfKeys = geoKeys.length;\n\n    const GeoKeyDirectory = [1, 1, 0, NumberOfKeys];\n    geoKeys.forEach((geoKey) => {\n      const KeyID = Number(name2code[geoKey]);\n      GeoKeyDirectory.push(KeyID);\n\n      let Count;\n      let TIFFTagLocation;\n      let valueOffset;\n      if (fieldTagTypes[KeyID] === 'SHORT') {\n        Count = 1;\n        TIFFTagLocation = 0;\n        valueOffset = metadata[geoKey];\n      } else if (geoKey === 'GeogCitationGeoKey') {\n        Count = metadata.GeoAsciiParams.length;\n        TIFFTagLocation = Number(name2code.GeoAsciiParams);\n        valueOffset = 0;\n      } else {\n        console.log(`[geotiff.js] couldn't get TIFFTagLocation for ${geoKey}`);\n      }\n      GeoKeyDirectory.push(TIFFTagLocation);\n      GeoKeyDirectory.push(Count);\n      GeoKeyDirectory.push(valueOffset);\n    });\n    metadata.GeoKeyDirectory = GeoKeyDirectory;\n  }\n\n  // delete GeoKeys from metadata, because stored in GeoKeyDirectory tag\n  for (const geoKey in geoKeys) {\n    if (geoKeys.hasOwnProperty(geoKey)) {\n      delete metadata[geoKey];\n    }\n  }\n\n  [\n    'Compression',\n    'ExtraSamples',\n    'GeographicTypeGeoKey',\n    'GTModelTypeGeoKey',\n    'GTRasterTypeGeoKey',\n    'ImageLength', // synonym of ImageHeight\n    'ImageWidth',\n    'Orientation',\n    'PhotometricInterpretation',\n    'ProjectedCSTypeGeoKey',\n    'PlanarConfiguration',\n    'ResolutionUnit',\n    'SamplesPerPixel',\n    'XPosition',\n    'YPosition',\n  ].forEach((name) => {\n    if (metadata[name]) {\n      metadata[name] = toArray(metadata[name]);\n    }\n  });\n\n  const encodedMetadata = convertToTids(metadata);\n\n  const outputImage = encodeImage(flattenedValues, width, height, encodedMetadata);\n\n  return outputImage;\n}\n","/** @module geotiff */\nimport GeoTIFFImage from './geotiffimage.js';\nimport DataView64 from './dataview64.js';\nimport DataSlice from './dataslice.js';\nimport Pool from './pool.js';\n\nimport { makeRemoteSource } from './source/remote.js';\nimport { makeBufferSource } from './source/arraybuffer.js';\nimport { makeFileReaderSource } from './source/filereader.js';\nimport { makeFileSource } from './source/file.js';\n\nimport { fieldTypes, fieldTagNames, arrayFields, geoKeyNames } from './globals.js';\nimport { writeGeotiff } from './geotiffwriter.js';\nimport * as globals from './globals.js';\nimport * as rgb from './rgb.js';\nimport { getDecoder, addDecoder } from './compression/index.js';\nimport { setLogger } from './logging.js';\n\nexport { globals };\nexport { rgb };\nexport { default as BaseDecoder } from './compression/basedecoder.js';\nexport { getDecoder, addDecoder };\nexport { setLogger };\n\n/**\n * @typedef {Uint8Array | Int8Array | Uint16Array | Int16Array | Uint32Array | Int32Array | Float32Array | Float64Array}\n * TypedArray\n */\n\nfunction getFieldTypeLength(fieldType) {\n  switch (fieldType) {\n    case fieldTypes.BYTE: case fieldTypes.ASCII: case fieldTypes.SBYTE: case fieldTypes.UNDEFINED:\n      return 1;\n    case fieldTypes.SHORT: case fieldTypes.SSHORT:\n      return 2;\n    case fieldTypes.LONG: case fieldTypes.SLONG: case fieldTypes.FLOAT: case fieldTypes.IFD:\n      return 4;\n    case fieldTypes.RATIONAL: case fieldTypes.SRATIONAL: case fieldTypes.DOUBLE:\n    case fieldTypes.LONG8: case fieldTypes.SLONG8: case fieldTypes.IFD8:\n      return 8;\n    default:\n      throw new RangeError(`Invalid field type: ${fieldType}`);\n  }\n}\n\nfunction parseGeoKeyDirectory(fileDirectory) {\n  const rawGeoKeyDirectory = fileDirectory.GeoKeyDirectory;\n  if (!rawGeoKeyDirectory) {\n    return null;\n  }\n\n  const geoKeyDirectory = {};\n  for (let i = 4; i <= rawGeoKeyDirectory[3] * 4; i += 4) {\n    const key = geoKeyNames[rawGeoKeyDirectory[i]];\n    const location = (rawGeoKeyDirectory[i + 1])\n      ? (fieldTagNames[rawGeoKeyDirectory[i + 1]]) : null;\n    const count = rawGeoKeyDirectory[i + 2];\n    const offset = rawGeoKeyDirectory[i + 3];\n\n    let value = null;\n    if (!location) {\n      value = offset;\n    } else {\n      value = fileDirectory[location];\n      if (typeof value === 'undefined' || value === null) {\n        throw new Error(`Could not get value of geoKey '${key}'.`);\n      } else if (typeof value === 'string') {\n        value = value.substring(offset, offset + count - 1);\n      } else if (value.subarray) {\n        value = value.subarray(offset, offset + count);\n        if (count === 1) {\n          value = value[0];\n        }\n      }\n    }\n    geoKeyDirectory[key] = value;\n  }\n  return geoKeyDirectory;\n}\n\nfunction getValues(dataSlice, fieldType, count, offset) {\n  let values = null;\n  let readMethod = null;\n  const fieldTypeLength = getFieldTypeLength(fieldType);\n\n  switch (fieldType) {\n    case fieldTypes.BYTE: case fieldTypes.ASCII: case fieldTypes.UNDEFINED:\n      values = new Uint8Array(count); readMethod = dataSlice.readUint8;\n      break;\n    case fieldTypes.SBYTE:\n      values = new Int8Array(count); readMethod = dataSlice.readInt8;\n      break;\n    case fieldTypes.SHORT:\n      values = new Uint16Array(count); readMethod = dataSlice.readUint16;\n      break;\n    case fieldTypes.SSHORT:\n      values = new Int16Array(count); readMethod = dataSlice.readInt16;\n      break;\n    case fieldTypes.LONG: case fieldTypes.IFD:\n      values = new Uint32Array(count); readMethod = dataSlice.readUint32;\n      break;\n    case fieldTypes.SLONG:\n      values = new Int32Array(count); readMethod = dataSlice.readInt32;\n      break;\n    case fieldTypes.LONG8: case fieldTypes.IFD8:\n      values = new Array(count); readMethod = dataSlice.readUint64;\n      break;\n    case fieldTypes.SLONG8:\n      values = new Array(count); readMethod = dataSlice.readInt64;\n      break;\n    case fieldTypes.RATIONAL:\n      values = new Uint32Array(count * 2); readMethod = dataSlice.readUint32;\n      break;\n    case fieldTypes.SRATIONAL:\n      values = new Int32Array(count * 2); readMethod = dataSlice.readInt32;\n      break;\n    case fieldTypes.FLOAT:\n      values = new Float32Array(count); readMethod = dataSlice.readFloat32;\n      break;\n    case fieldTypes.DOUBLE:\n      values = new Float64Array(count); readMethod = dataSlice.readFloat64;\n      break;\n    default:\n      throw new RangeError(`Invalid field type: ${fieldType}`);\n  }\n\n  // normal fields\n  if (!(fieldType === fieldTypes.RATIONAL || fieldType === fieldTypes.SRATIONAL)) {\n    for (let i = 0; i < count; ++i) {\n      values[i] = readMethod.call(\n        dataSlice, offset + (i * fieldTypeLength),\n      );\n    }\n  } else { // RATIONAL or SRATIONAL\n    for (let i = 0; i < count; i += 2) {\n      values[i] = readMethod.call(\n        dataSlice, offset + (i * fieldTypeLength),\n      );\n      values[i + 1] = readMethod.call(\n        dataSlice, offset + ((i * fieldTypeLength) + 4),\n      );\n    }\n  }\n\n  if (fieldType === fieldTypes.ASCII) {\n    return new TextDecoder('utf-8').decode(values);\n  }\n  return values;\n}\n\n/**\n * Data class to store the parsed file directory, geo key directory and\n * offset to the next IFD\n */\nclass ImageFileDirectory {\n  constructor(fileDirectory, geoKeyDirectory, nextIFDByteOffset) {\n    this.fileDirectory = fileDirectory;\n    this.geoKeyDirectory = geoKeyDirectory;\n    this.nextIFDByteOffset = nextIFDByteOffset;\n  }\n}\n\n/**\n * Error class for cases when an IFD index was requested, that does not exist\n * in the file.\n */\nclass GeoTIFFImageIndexError extends Error {\n  constructor(index) {\n    super(`No image at index ${index}`);\n    this.index = index;\n  }\n}\n\nclass GeoTIFFBase {\n  /**\n   * (experimental) Reads raster data from the best fitting image. This function uses\n   * the image with the lowest resolution that is still a higher resolution than the\n   * requested resolution.\n   * When specified, the `bbox` option is translated to the `window` option and the\n   * `resX` and `resY` to `width` and `height` respectively.\n   * Then, the [readRasters]{@link GeoTIFFImage#readRasters} method of the selected\n   * image is called and the result returned.\n   * @see GeoTIFFImage.readRasters\n   * @param {import('./geotiffimage').ReadRasterOptions} [options={}] optional parameters\n   * @returns {Promise<(TypedArray|TypedArray[])>} the decoded arrays as a promise\n   */\n  async readRasters(options = {}) {\n    const { window: imageWindow, width, height } = options;\n    let { resX, resY, bbox } = options;\n\n    const firstImage = await this.getImage();\n    let usedImage = firstImage;\n    const imageCount = await this.getImageCount();\n    const imgBBox = firstImage.getBoundingBox();\n\n    if (imageWindow && bbox) {\n      throw new Error('Both \"bbox\" and \"window\" passed.');\n    }\n\n    // if width/height is passed, transform it to resolution\n    if (width || height) {\n      // if we have an image window (pixel coordinates), transform it to a BBox\n      // using the origin/resolution of the first image.\n      if (imageWindow) {\n        const [oX, oY] = firstImage.getOrigin();\n        const [rX, rY] = firstImage.getResolution();\n\n        bbox = [\n          oX + (imageWindow[0] * rX),\n          oY + (imageWindow[1] * rY),\n          oX + (imageWindow[2] * rX),\n          oY + (imageWindow[3] * rY),\n        ];\n      }\n\n      // if we have a bbox (or calculated one)\n\n      const usedBBox = bbox || imgBBox;\n\n      if (width) {\n        if (resX) {\n          throw new Error('Both width and resX passed');\n        }\n        resX = (usedBBox[2] - usedBBox[0]) / width;\n      }\n      if (height) {\n        if (resY) {\n          throw new Error('Both width and resY passed');\n        }\n        resY = (usedBBox[3] - usedBBox[1]) / height;\n      }\n    }\n\n    // if resolution is set or calculated, try to get the image with the worst acceptable resolution\n    if (resX || resY) {\n      const allImages = [];\n      for (let i = 0; i < imageCount; ++i) {\n        const image = await this.getImage(i);\n        const { SubfileType: subfileType, NewSubfileType: newSubfileType } = image.fileDirectory;\n        if (i === 0 || subfileType === 2 || newSubfileType & 1) {\n          allImages.push(image);\n        }\n      }\n\n      allImages.sort((a, b) => a.getWidth() - b.getWidth());\n      for (let i = 0; i < allImages.length; ++i) {\n        const image = allImages[i];\n        const imgResX = (imgBBox[2] - imgBBox[0]) / image.getWidth();\n        const imgResY = (imgBBox[3] - imgBBox[1]) / image.getHeight();\n\n        usedImage = image;\n        if ((resX && resX > imgResX) || (resY && resY > imgResY)) {\n          break;\n        }\n      }\n    }\n\n    let wnd = imageWindow;\n    if (bbox) {\n      const [oX, oY] = firstImage.getOrigin();\n      const [imageResX, imageResY] = usedImage.getResolution(firstImage);\n\n      wnd = [\n        Math.round((bbox[0] - oX) / imageResX),\n        Math.round((bbox[1] - oY) / imageResY),\n        Math.round((bbox[2] - oX) / imageResX),\n        Math.round((bbox[3] - oY) / imageResY),\n      ];\n      wnd = [\n        Math.min(wnd[0], wnd[2]),\n        Math.min(wnd[1], wnd[3]),\n        Math.max(wnd[0], wnd[2]),\n        Math.max(wnd[1], wnd[3]),\n      ];\n    }\n\n    return usedImage.readRasters({ ...options, window: wnd });\n  }\n}\n\n/**\n * @typedef {Object} GeoTIFFOptions\n * @property {boolean} [cache=false] whether or not decoded tiles shall be cached.\n */\n\n/**\n * The abstraction for a whole GeoTIFF file.\n * @augments GeoTIFFBase\n */\nclass GeoTIFF extends GeoTIFFBase {\n  /**\n   * @constructor\n   * @param {*} source The datasource to read from.\n   * @param {boolean} littleEndian Whether the image uses little endian.\n   * @param {boolean} bigTiff Whether the image uses bigTIFF conventions.\n   * @param {number} firstIFDOffset The numeric byte-offset from the start of the image\n   *                                to the first IFD.\n   * @param {GeoTIFFOptions} [options] further options.\n   */\n  constructor(source, littleEndian, bigTiff, firstIFDOffset, options = {}) {\n    super();\n    this.source = source;\n    this.littleEndian = littleEndian;\n    this.bigTiff = bigTiff;\n    this.firstIFDOffset = firstIFDOffset;\n    this.cache = options.cache || false;\n    this.ifdRequests = [];\n    this.ghostValues = null;\n  }\n\n  async getSlice(offset, size) {\n    const fallbackSize = this.bigTiff ? 4048 : 1024;\n    return new DataSlice(\n      (await this.source.fetch([{\n        offset,\n        length: typeof size !== 'undefined' ? size : fallbackSize,\n      }]))[0],\n      offset,\n      this.littleEndian,\n      this.bigTiff,\n    );\n  }\n\n  /**\n   * Instructs to parse an image file directory at the given file offset.\n   * As there is no way to ensure that a location is indeed the start of an IFD,\n   * this function must be called with caution (e.g only using the IFD offsets from\n   * the headers or other IFDs).\n   * @param {number} offset the offset to parse the IFD at\n   * @returns {Promise<ImageFileDirectory>} the parsed IFD\n   */\n  async parseFileDirectoryAt(offset) {\n    const entrySize = this.bigTiff ? 20 : 12;\n    const offsetSize = this.bigTiff ? 8 : 2;\n\n    let dataSlice = await this.getSlice(offset);\n    const numDirEntries = this.bigTiff\n      ? dataSlice.readUint64(offset)\n      : dataSlice.readUint16(offset);\n\n    // if the slice does not cover the whole IFD, request a bigger slice, where the\n    // whole IFD fits: num of entries + n x tag length + offset to next IFD\n    const byteSize = (numDirEntries * entrySize) + (this.bigTiff ? 16 : 6);\n    if (!dataSlice.covers(offset, byteSize)) {\n      dataSlice = await this.getSlice(offset, byteSize);\n    }\n\n    const fileDirectory = {};\n\n    // loop over the IFD and create a file directory object\n    let i = offset + (this.bigTiff ? 8 : 2);\n    for (let entryCount = 0; entryCount < numDirEntries; i += entrySize, ++entryCount) {\n      const fieldTag = dataSlice.readUint16(i);\n      const fieldType = dataSlice.readUint16(i + 2);\n      const typeCount = this.bigTiff\n        ? dataSlice.readUint64(i + 4)\n        : dataSlice.readUint32(i + 4);\n\n      let fieldValues;\n      let value;\n      const fieldTypeLength = getFieldTypeLength(fieldType);\n      const valueOffset = i + (this.bigTiff ? 12 : 8);\n\n      // check whether the value is directly encoded in the tag or refers to a\n      // different external byte range\n      if (fieldTypeLength * typeCount <= (this.bigTiff ? 8 : 4)) {\n        fieldValues = getValues(dataSlice, fieldType, typeCount, valueOffset);\n      } else {\n        // resolve the reference to the actual byte range\n        const actualOffset = dataSlice.readOffset(valueOffset);\n        const length = getFieldTypeLength(fieldType) * typeCount;\n\n        // check, whether we actually cover the referenced byte range; if not,\n        // request a new slice of bytes to read from it\n        if (dataSlice.covers(actualOffset, length)) {\n          fieldValues = getValues(dataSlice, fieldType, typeCount, actualOffset);\n        } else {\n          const fieldDataSlice = await this.getSlice(actualOffset, length);\n          fieldValues = getValues(fieldDataSlice, fieldType, typeCount, actualOffset);\n        }\n      }\n\n      // unpack single values from the array\n      if (typeCount === 1 && arrayFields.indexOf(fieldTag) === -1\n        && !(fieldType === fieldTypes.RATIONAL || fieldType === fieldTypes.SRATIONAL)) {\n        value = fieldValues[0];\n      } else {\n        value = fieldValues;\n      }\n\n      // write the tags value to the file directly\n      fileDirectory[fieldTagNames[fieldTag]] = value;\n    }\n    const geoKeyDirectory = parseGeoKeyDirectory(fileDirectory);\n    const nextIFDByteOffset = dataSlice.readOffset(\n      offset + offsetSize + (entrySize * numDirEntries),\n    );\n\n    return new ImageFileDirectory(\n      fileDirectory,\n      geoKeyDirectory,\n      nextIFDByteOffset,\n    );\n  }\n\n  async requestIFD(index) {\n    // see if we already have that IFD index requested.\n    if (this.ifdRequests[index]) {\n      // attach to an already requested IFD\n      return this.ifdRequests[index];\n    } else if (index === 0) {\n      // special case for index 0\n      this.ifdRequests[index] = this.parseFileDirectoryAt(this.firstIFDOffset);\n      return this.ifdRequests[index];\n    } else if (!this.ifdRequests[index - 1]) {\n      // if the previous IFD was not yet loaded, load that one first\n      // this is the recursive call.\n      try {\n        this.ifdRequests[index - 1] = this.requestIFD(index - 1);\n      } catch (e) {\n        // if the previous one already was an index error, rethrow\n        // with the current index\n        if (e instanceof GeoTIFFImageIndexError) {\n          throw new GeoTIFFImageIndexError(index);\n        }\n        // rethrow anything else\n        throw e;\n      }\n    }\n    // if the previous IFD was loaded, we can finally fetch the one we are interested in.\n    // we need to wrap this in an IIFE, otherwise this.ifdRequests[index] would be delayed\n    this.ifdRequests[index] = (async () => {\n      const previousIfd = await this.ifdRequests[index - 1];\n      if (previousIfd.nextIFDByteOffset === 0) {\n        throw new GeoTIFFImageIndexError(index);\n      }\n      return this.parseFileDirectoryAt(previousIfd.nextIFDByteOffset);\n    })();\n    return this.ifdRequests[index];\n  }\n\n  /**\n   * Get the n-th internal subfile of an image. By default, the first is returned.\n   *\n   * @param {number} [index=0] the index of the image to return.\n   * @returns {Promise<GeoTIFFImage>} the image at the given index\n   */\n  async getImage(index = 0) {\n    const ifd = await this.requestIFD(index);\n    return new GeoTIFFImage(\n      ifd.fileDirectory, ifd.geoKeyDirectory,\n      this.dataView, this.littleEndian, this.cache, this.source,\n    );\n  }\n\n  /**\n   * Returns the count of the internal subfiles.\n   *\n   * @returns {Promise<number>} the number of internal subfile images\n   */\n  async getImageCount() {\n    let index = 0;\n    // loop until we run out of IFDs\n    let hasNext = true;\n    while (hasNext) {\n      try {\n        await this.requestIFD(index);\n        ++index;\n      } catch (e) {\n        if (e instanceof GeoTIFFImageIndexError) {\n          hasNext = false;\n        } else {\n          throw e;\n        }\n      }\n    }\n    return index;\n  }\n\n  /**\n   * Get the values of the COG ghost area as a parsed map.\n   * See https://gdal.org/drivers/raster/cog.html#header-ghost-area for reference\n   * @returns {Promise<Object>} the parsed ghost area or null, if no such area was found\n   */\n  async getGhostValues() {\n    const offset = this.bigTiff ? 16 : 8;\n    if (this.ghostValues) {\n      return this.ghostValues;\n    }\n    const detectionString = 'GDAL_STRUCTURAL_METADATA_SIZE=';\n    const heuristicAreaSize = detectionString.length + 100;\n    let slice = await this.getSlice(offset, heuristicAreaSize);\n    if (detectionString === getValues(slice, fieldTypes.ASCII, detectionString.length, offset)) {\n      const valuesString = getValues(slice, fieldTypes.ASCII, heuristicAreaSize, offset);\n      const firstLine = valuesString.split('\\n')[0];\n      const metadataSize = Number(firstLine.split('=')[1].split(' ')[0]) + firstLine.length;\n      if (metadataSize > heuristicAreaSize) {\n        slice = await this.getSlice(offset, metadataSize);\n      }\n      const fullString = getValues(slice, fieldTypes.ASCII, metadataSize, offset);\n      this.ghostValues = {};\n      fullString\n        .split('\\n')\n        .filter((line) => line.length > 0)\n        .map((line) => line.split('='))\n        .forEach(([key, value]) => {\n          this.ghostValues[key] = value;\n        });\n    }\n    return this.ghostValues;\n  }\n\n  /**\n   * Parse a (Geo)TIFF file from the given source.\n   *\n   * @param {*} source The source of data to parse from.\n   * @param {GeoTIFFOptions} [options] Additional options.\n   * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n   *                               to be aborted\n   */\n  static async fromSource(source, options, signal) {\n    const headerData = (await source.fetch([{ offset: 0, length: 1024 }], signal))[0];\n    const dataView = new DataView64(headerData);\n\n    const BOM = dataView.getUint16(0, 0);\n    let littleEndian;\n    if (BOM === 0x4949) {\n      littleEndian = true;\n    } else if (BOM === 0x4D4D) {\n      littleEndian = false;\n    } else {\n      throw new TypeError('Invalid byte order value.');\n    }\n\n    const magicNumber = dataView.getUint16(2, littleEndian);\n    let bigTiff;\n    if (magicNumber === 42) {\n      bigTiff = false;\n    } else if (magicNumber === 43) {\n      bigTiff = true;\n      const offsetByteSize = dataView.getUint16(4, littleEndian);\n      if (offsetByteSize !== 8) {\n        throw new Error('Unsupported offset byte-size.');\n      }\n    } else {\n      throw new TypeError('Invalid magic number.');\n    }\n\n    const firstIFDOffset = bigTiff\n      ? dataView.getUint64(8, littleEndian)\n      : dataView.getUint32(4, littleEndian);\n    return new GeoTIFF(source, littleEndian, bigTiff, firstIFDOffset, options);\n  }\n\n  /**\n   * Closes the underlying file buffer\n   * N.B. After the GeoTIFF has been completely processed it needs\n   * to be closed but only if it has been constructed from a file.\n   */\n  close() {\n    if (typeof this.source.close === 'function') {\n      return this.source.close();\n    }\n    return false;\n  }\n}\n\nexport { GeoTIFF };\nexport default GeoTIFF;\n\n/**\n * Wrapper for GeoTIFF files that have external overviews.\n * @augments GeoTIFFBase\n */\nclass MultiGeoTIFF extends GeoTIFFBase {\n  /**\n   * Construct a new MultiGeoTIFF from a main and several overview files.\n   * @param {GeoTIFF} mainFile The main GeoTIFF file.\n   * @param {GeoTIFF[]} overviewFiles An array of overview files.\n   */\n  constructor(mainFile, overviewFiles) {\n    super();\n    this.mainFile = mainFile;\n    this.overviewFiles = overviewFiles;\n    this.imageFiles = [mainFile].concat(overviewFiles);\n\n    this.fileDirectoriesPerFile = null;\n    this.fileDirectoriesPerFileParsing = null;\n    this.imageCount = null;\n  }\n\n  async parseFileDirectoriesPerFile() {\n    const requests = [this.mainFile.parseFileDirectoryAt(this.mainFile.firstIFDOffset)]\n      .concat(this.overviewFiles.map((file) => file.parseFileDirectoryAt(file.firstIFDOffset)));\n\n    this.fileDirectoriesPerFile = await Promise.all(requests);\n    return this.fileDirectoriesPerFile;\n  }\n\n  /**\n   * Get the n-th internal subfile of an image. By default, the first is returned.\n   *\n   * @param {number} [index=0] the index of the image to return.\n   * @returns {Promise<GeoTIFFImage>} the image at the given index\n   */\n  async getImage(index = 0) {\n    await this.getImageCount();\n    await this.parseFileDirectoriesPerFile();\n    let visited = 0;\n    let relativeIndex = 0;\n    for (let i = 0; i < this.imageFiles.length; i++) {\n      const imageFile = this.imageFiles[i];\n      for (let ii = 0; ii < this.imageCounts[i]; ii++) {\n        if (index === visited) {\n          const ifd = await imageFile.requestIFD(relativeIndex);\n          return new GeoTIFFImage(\n            ifd.fileDirectory, ifd.geoKeyDirectory,\n            imageFile.dataView, imageFile.littleEndian, imageFile.cache, imageFile.source,\n          );\n        }\n        visited++;\n        relativeIndex++;\n      }\n      relativeIndex = 0;\n    }\n\n    throw new RangeError('Invalid image index');\n  }\n\n  /**\n   * Returns the count of the internal subfiles.\n   *\n   * @returns {Promise<number>} the number of internal subfile images\n   */\n  async getImageCount() {\n    if (this.imageCount !== null) {\n      return this.imageCount;\n    }\n    const requests = [this.mainFile.getImageCount()]\n      .concat(this.overviewFiles.map((file) => file.getImageCount()));\n    this.imageCounts = await Promise.all(requests);\n    this.imageCount = this.imageCounts.reduce((count, ifds) => count + ifds, 0);\n    return this.imageCount;\n  }\n}\n\nexport { MultiGeoTIFF };\n\n/**\n * Creates a new GeoTIFF from a remote URL.\n * @param {string} url The URL to access the image from\n * @param {object} [options] Additional options to pass to the source.\n *                           See {@link makeRemoteSource} for details.\n * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n *                               to be aborted\n * @returns {Promise<GeoTIFF>} The resulting GeoTIFF file.\n */\nexport async function fromUrl(url, options = {}, signal) {\n  return GeoTIFF.fromSource(makeRemoteSource(url, options), signal);\n}\n\n/**\n * Construct a new GeoTIFF from an\n * [ArrayBuffer]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer}.\n * @param {ArrayBuffer} arrayBuffer The data to read the file from.\n * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n *                               to be aborted\n * @returns {Promise<GeoTIFF>} The resulting GeoTIFF file.\n */\nexport async function fromArrayBuffer(arrayBuffer, signal) {\n  return GeoTIFF.fromSource(makeBufferSource(arrayBuffer), signal);\n}\n\n/**\n * Construct a GeoTIFF from a local file path. This uses the node\n * [filesystem API]{@link https://nodejs.org/api/fs.html} and is\n * not available on browsers.\n *\n * N.B. After the GeoTIFF has been completely processed it needs\n * to be closed but only if it has been constructed from a file.\n * @param {string} path The file path to read from.\n * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n *                               to be aborted\n * @returns {Promise<GeoTIFF>} The resulting GeoTIFF file.\n */\nexport async function fromFile(path, signal) {\n  return GeoTIFF.fromSource(makeFileSource(path), signal);\n}\n\n/**\n * Construct a GeoTIFF from an HTML\n * [Blob]{@link https://developer.mozilla.org/en-US/docs/Web/API/Blob} or\n * [File]{@link https://developer.mozilla.org/en-US/docs/Web/API/File}\n * object.\n * @param {Blob|File} blob The Blob or File object to read from.\n * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n *                               to be aborted\n * @returns {Promise<GeoTIFF>} The resulting GeoTIFF file.\n */\nexport async function fromBlob(blob, signal) {\n  return GeoTIFF.fromSource(makeFileReaderSource(blob), signal);\n}\n\n/**\n * Construct a MultiGeoTIFF from the given URLs.\n * @param {string} mainUrl The URL for the main file.\n * @param {string[]} overviewUrls An array of URLs for the overview images.\n * @param {Object} [options] Additional options to pass to the source.\n *                           See [makeRemoteSource]{@link module:source.makeRemoteSource}\n *                           for details.\n * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n *                               to be aborted\n * @returns {Promise<MultiGeoTIFF>} The resulting MultiGeoTIFF file.\n */\nexport async function fromUrls(mainUrl, overviewUrls = [], options = {}, signal) {\n  const mainFile = await GeoTIFF.fromSource(makeRemoteSource(mainUrl, options), signal);\n  const overviewFiles = await Promise.all(\n    overviewUrls.map((url) => GeoTIFF.fromSource(makeRemoteSource(url, options))),\n  );\n\n  return new MultiGeoTIFF(mainFile, overviewFiles);\n}\n\n/**\n * Main creating function for GeoTIFF files.\n * @param {(Array)} array of pixel values\n * @returns {metadata} metadata\n */\nexport function writeArrayBuffer(values, metadata) {\n  return writeGeotiff(values, metadata);\n}\n\nexport { Pool };\nexport { GeoTIFFImage };\n","import fs from 'fs';\nimport { BaseSource } from './basesource.js';\n\nfunction closeAsync(fd) {\n  return new Promise((resolve, reject) => {\n    fs.close(fd, (err) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve();\n      }\n    });\n  });\n}\n\nfunction openAsync(path, flags, mode = undefined) {\n  return new Promise((resolve, reject) => {\n    fs.open(path, flags, mode, (err, fd) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(fd);\n      }\n    });\n  });\n}\n\nfunction readAsync(...args) {\n  return new Promise((resolve, reject) => {\n    fs.read(...args, (err, bytesRead, buffer) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve({ bytesRead, buffer });\n      }\n    });\n  });\n}\n\nclass FileSource extends BaseSource {\n  constructor(path) {\n    super();\n    this.path = path;\n    this.openRequest = openAsync(path, 'r');\n  }\n\n  async fetchSlice(slice) {\n    // TODO: use `signal`\n    const fd = await this.openRequest;\n    const { buffer } = await readAsync(\n      fd,\n      Buffer.alloc(slice.length),\n      0,\n      slice.length,\n      slice.offset,\n    );\n    return buffer.buffer;\n  }\n\n  async close() {\n    const fd = await this.openRequest;\n    await closeAsync(fd);\n  }\n}\n\nexport function makeFileSource(path) {\n  return new FileSource(path);\n}\n","export class BaseResponse {\n  /**\n   * Returns whether the response has an ok'ish status code\n   */\n  get ok() {\n    return this.status >= 200 && this.status <= 299;\n  }\n\n  /**\n   * Returns the status code of the response\n   */\n  get status() {\n    throw new Error('not implemented');\n  }\n\n  /**\n   * Returns the value of the specified header\n   * @param {string} headerName the header name\n   * @returns {string} the header value\n   */\n  getHeader(headerName) { // eslint-disable-line no-unused-vars\n    throw new Error('not implemented');\n  }\n\n  /**\n   * @returns {ArrayBuffer} the response data of the request\n   */\n  async getData() {\n    throw new Error('not implemented');\n  }\n}\n\nexport class BaseClient {\n  constructor(url) {\n    this.url = url;\n  }\n\n  /**\n   * Send a request with the options\n   * @param {object} [options]\n   */\n  async request({ headers, credentials, signal } = {}) { // eslint-disable-line no-unused-vars\n    throw new Error('request is not implemented');\n  }\n}\n","/**\n * @module resample\n */\n\nfunction copyNewSize(array, width, height, samplesPerPixel = 1) {\n  return new (Object.getPrototypeOf(array).constructor)(width * height * samplesPerPixel);\n}\n\n/**\n * Resample the input arrays using nearest neighbor value selection.\n * @param {TypedArray[]} valueArrays The input arrays to resample\n * @param {number} inWidth The width of the input rasters\n * @param {number} inHeight The height of the input rasters\n * @param {number} outWidth The desired width of the output rasters\n * @param {number} outHeight The desired height of the output rasters\n * @returns {TypedArray[]} The resampled rasters\n */\nexport function resampleNearest(valueArrays, inWidth, inHeight, outWidth, outHeight) {\n  const relX = inWidth / outWidth;\n  const relY = inHeight / outHeight;\n  return valueArrays.map((array) => {\n    const newArray = copyNewSize(array, outWidth, outHeight);\n    for (let y = 0; y < outHeight; ++y) {\n      const cy = Math.min(Math.round(relY * y), inHeight - 1);\n      for (let x = 0; x < outWidth; ++x) {\n        const cx = Math.min(Math.round(relX * x), inWidth - 1);\n        const value = array[(cy * inWidth) + cx];\n        newArray[(y * outWidth) + x] = value;\n      }\n    }\n    return newArray;\n  });\n}\n\n// simple linear interpolation, code from:\n// https://en.wikipedia.org/wiki/Linear_interpolation#Programming_language_support\nfunction lerp(v0, v1, t) {\n  return ((1 - t) * v0) + (t * v1);\n}\n\n/**\n * Resample the input arrays using bilinear interpolation.\n * @param {TypedArray[]} valueArrays The input arrays to resample\n * @param {number} inWidth The width of the input rasters\n * @param {number} inHeight The height of the input rasters\n * @param {number} outWidth The desired width of the output rasters\n * @param {number} outHeight The desired height of the output rasters\n * @returns {TypedArray[]} The resampled rasters\n */\nexport function resampleBilinear(valueArrays, inWidth, inHeight, outWidth, outHeight) {\n  const relX = inWidth / outWidth;\n  const relY = inHeight / outHeight;\n\n  return valueArrays.map((array) => {\n    const newArray = copyNewSize(array, outWidth, outHeight);\n    for (let y = 0; y < outHeight; ++y) {\n      const rawY = relY * y;\n\n      const yl = Math.floor(rawY);\n      const yh = Math.min(Math.ceil(rawY), (inHeight - 1));\n\n      for (let x = 0; x < outWidth; ++x) {\n        const rawX = relX * x;\n        const tx = rawX % 1;\n\n        const xl = Math.floor(rawX);\n        const xh = Math.min(Math.ceil(rawX), (inWidth - 1));\n\n        const ll = array[(yl * inWidth) + xl];\n        const hl = array[(yl * inWidth) + xh];\n        const lh = array[(yh * inWidth) + xl];\n        const hh = array[(yh * inWidth) + xh];\n\n        const value = lerp(\n          lerp(ll, hl, tx),\n          lerp(lh, hh, tx),\n          rawY % 1,\n        );\n        newArray[(y * outWidth) + x] = value;\n      }\n    }\n    return newArray;\n  });\n}\n\n/**\n * Resample the input arrays using the selected resampling method.\n * @param {TypedArray[]} valueArrays The input arrays to resample\n * @param {number} inWidth The width of the input rasters\n * @param {number} inHeight The height of the input rasters\n * @param {number} outWidth The desired width of the output rasters\n * @param {number} outHeight The desired height of the output rasters\n * @param {string} [method = 'nearest'] The desired resampling method\n * @returns {TypedArray[]} The resampled rasters\n */\nexport function resample(valueArrays, inWidth, inHeight, outWidth, outHeight, method = 'nearest') {\n  switch (method.toLowerCase()) {\n    case 'nearest':\n      return resampleNearest(valueArrays, inWidth, inHeight, outWidth, outHeight);\n    case 'bilinear':\n    case 'linear':\n      return resampleBilinear(valueArrays, inWidth, inHeight, outWidth, outHeight);\n    default:\n      throw new Error(`Unsupported resampling method: '${method}'`);\n  }\n}\n\n/**\n * Resample the pixel interleaved input array using nearest neighbor value selection.\n * @param {TypedArray} valueArrays The input arrays to resample\n * @param {number} inWidth The width of the input rasters\n * @param {number} inHeight The height of the input rasters\n * @param {number} outWidth The desired width of the output rasters\n * @param {number} outHeight The desired height of the output rasters\n * @param {number} samples The number of samples per pixel for pixel\n *                         interleaved data\n * @returns {TypedArray} The resampled raster\n */\nexport function resampleNearestInterleaved(\n  valueArray, inWidth, inHeight, outWidth, outHeight, samples) {\n  const relX = inWidth / outWidth;\n  const relY = inHeight / outHeight;\n\n  const newArray = copyNewSize(valueArray, outWidth, outHeight, samples);\n  for (let y = 0; y < outHeight; ++y) {\n    const cy = Math.min(Math.round(relY * y), inHeight - 1);\n    for (let x = 0; x < outWidth; ++x) {\n      const cx = Math.min(Math.round(relX * x), inWidth - 1);\n      for (let i = 0; i < samples; ++i) {\n        const value = valueArray[(cy * inWidth * samples) + (cx * samples) + i];\n        newArray[(y * outWidth * samples) + (x * samples) + i] = value;\n      }\n    }\n  }\n  return newArray;\n}\n\n/**\n * Resample the pixel interleaved input array using bilinear interpolation.\n * @param {TypedArray} valueArrays The input arrays to resample\n * @param {number} inWidth The width of the input rasters\n * @param {number} inHeight The height of the input rasters\n * @param {number} outWidth The desired width of the output rasters\n * @param {number} outHeight The desired height of the output rasters\n * @param {number} samples The number of samples per pixel for pixel\n *                         interleaved data\n * @returns {TypedArray} The resampled raster\n */\nexport function resampleBilinearInterleaved(\n  valueArray, inWidth, inHeight, outWidth, outHeight, samples) {\n  const relX = inWidth / outWidth;\n  const relY = inHeight / outHeight;\n  const newArray = copyNewSize(valueArray, outWidth, outHeight, samples);\n  for (let y = 0; y < outHeight; ++y) {\n    const rawY = relY * y;\n\n    const yl = Math.floor(rawY);\n    const yh = Math.min(Math.ceil(rawY), (inHeight - 1));\n\n    for (let x = 0; x < outWidth; ++x) {\n      const rawX = relX * x;\n      const tx = rawX % 1;\n\n      const xl = Math.floor(rawX);\n      const xh = Math.min(Math.ceil(rawX), (inWidth - 1));\n\n      for (let i = 0; i < samples; ++i) {\n        const ll = valueArray[(yl * inWidth * samples) + (xl * samples) + i];\n        const hl = valueArray[(yl * inWidth * samples) + (xh * samples) + i];\n        const lh = valueArray[(yh * inWidth * samples) + (xl * samples) + i];\n        const hh = valueArray[(yh * inWidth * samples) + (xh * samples) + i];\n\n        const value = lerp(\n          lerp(ll, hl, tx),\n          lerp(lh, hh, tx),\n          rawY % 1,\n        );\n        newArray[(y * outWidth * samples) + (x * samples) + i] = value;\n      }\n    }\n  }\n  return newArray;\n}\n\n/**\n * Resample the pixel interleaved input array using the selected resampling method.\n * @param {TypedArray} valueArray The input array to resample\n * @param {number} inWidth The width of the input rasters\n * @param {number} inHeight The height of the input rasters\n * @param {number} outWidth The desired width of the output rasters\n * @param {number} outHeight The desired height of the output rasters\n * @param {number} samples The number of samples per pixel for pixel\n *                                 interleaved data\n * @param {string} [method = 'nearest'] The desired resampling method\n * @returns {TypedArray} The resampled rasters\n */\nexport function resampleInterleaved(valueArray, inWidth, inHeight, outWidth, outHeight, samples, method = 'nearest') {\n  switch (method.toLowerCase()) {\n    case 'nearest':\n      return resampleNearestInterleaved(\n        valueArray, inWidth, inHeight, outWidth, outHeight, samples,\n      );\n    case 'bilinear':\n    case 'linear':\n      return resampleBilinearInterleaved(\n        valueArray, inWidth, inHeight, outWidth, outHeight, samples,\n      );\n    default:\n      throw new Error(`Unsupported resampling method: '${method}'`);\n  }\n}\n","/** @module geotiffimage */\nimport { getFloat16 } from '@petamoriken/float16';\nimport getAttribute from 'xml-utils/get-attribute.js';\nimport findTagsByName from 'xml-utils/find-tags-by-name.js';\n\nimport { photometricInterpretations, ExtraSamplesValues } from './globals.js';\nimport { fromWhiteIsZero, fromBlackIsZero, fromPalette, fromCMYK, fromYCbCr, fromCIELab } from './rgb.js';\nimport { getDecoder } from './compression/index.js';\nimport { resample, resampleInterleaved } from './resample.js';\n\n/**\n * @typedef {Object} ReadRasterOptions\n * @property {Array<number>} [window=whole window] the subset to read data from in pixels.\n * @property {Array<number>} [bbox=whole image] the subset to read data from in\n *                                           geographical coordinates.\n * @property {Array<number>} [samples=all samples] the selection of samples to read from. Default is all samples.\n * @property {boolean} [interleave=false] whether the data shall be read\n *                                             in one single array or separate\n *                                             arrays.\n * @property {Pool} [pool=null] The optional decoder pool to use.\n * @property {number} [width] The desired width of the output. When the width is not the\n *                                 same as the images, resampling will be performed.\n * @property {number} [height] The desired height of the output. When the width is not the\n *                                  same as the images, resampling will be performed.\n * @property {string} [resampleMethod='nearest'] The desired resampling method.\n * @property {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n *                                       to be aborted\n * @property {number|number[]} [fillValue] The value to use for parts of the image\n *                                              outside of the images extent. When multiple\n *                                              samples are requested, an array of fill values\n *                                              can be passed.\n */\n\n/** @typedef {import(\"./geotiff.js\").TypedArray} TypedArray */\n\nfunction sum(array, start, end) {\n  let s = 0;\n  for (let i = start; i < end; ++i) {\n    s += array[i];\n  }\n  return s;\n}\n\nfunction arrayForType(format, bitsPerSample, size) {\n  switch (format) {\n    case 1: // unsigned integer data\n      if (bitsPerSample <= 8) {\n        return new Uint8Array(size);\n      } else if (bitsPerSample <= 16) {\n        return new Uint16Array(size);\n      } else if (bitsPerSample <= 32) {\n        return new Uint32Array(size);\n      }\n      break;\n    case 2: // twos complement signed integer data\n      if (bitsPerSample === 8) {\n        return new Int8Array(size);\n      } else if (bitsPerSample === 16) {\n        return new Int16Array(size);\n      } else if (bitsPerSample === 32) {\n        return new Int32Array(size);\n      }\n      break;\n    case 3: // floating point data\n      switch (bitsPerSample) {\n        case 16:\n        case 32:\n          return new Float32Array(size);\n        case 64:\n          return new Float64Array(size);\n        default:\n          break;\n      }\n      break;\n    default:\n      break;\n  }\n  throw Error('Unsupported data format/bitsPerSample');\n}\n\nfunction needsNormalization(format, bitsPerSample) {\n  if ((format === 1 || format === 2) && bitsPerSample <= 32 && bitsPerSample % 8 === 0) {\n    return false;\n  } else if (format === 3 && (bitsPerSample === 16 || bitsPerSample === 32 || bitsPerSample === 64)) {\n    return false;\n  }\n  return true;\n}\n\nfunction normalizeArray(inBuffer, format, planarConfiguration, samplesPerPixel, bitsPerSample, tileWidth, tileHeight) {\n  // const inByteArray = new Uint8Array(inBuffer);\n  const view = new DataView(inBuffer);\n  const outSize = planarConfiguration === 2\n    ? tileHeight * tileWidth\n    : tileHeight * tileWidth * samplesPerPixel;\n  const samplesToTransfer = planarConfiguration === 2\n    ? 1 : samplesPerPixel;\n  const outArray = arrayForType(format, bitsPerSample, outSize);\n  // let pixel = 0;\n\n  const bitMask = parseInt('1'.repeat(bitsPerSample), 2);\n\n  if (format === 1) { // unsigned integer\n    // translation of https://github.com/OSGeo/gdal/blob/master/gdal/frmts/gtiff/geotiff.cpp#L7337\n    let pixelBitSkip;\n    // let sampleBitOffset = 0;\n    if (planarConfiguration === 1) {\n      pixelBitSkip = samplesPerPixel * bitsPerSample;\n      // sampleBitOffset = (samplesPerPixel - 1) * bitsPerSample;\n    } else {\n      pixelBitSkip = bitsPerSample;\n    }\n\n    // Bits per line rounds up to next byte boundary.\n    let bitsPerLine = tileWidth * pixelBitSkip;\n    if ((bitsPerLine & 7) !== 0) {\n      bitsPerLine = (bitsPerLine + 7) & (~7);\n    }\n\n    for (let y = 0; y < tileHeight; ++y) {\n      const lineBitOffset = y * bitsPerLine;\n      for (let x = 0; x < tileWidth; ++x) {\n        const pixelBitOffset = lineBitOffset + (x * samplesToTransfer * bitsPerSample);\n        for (let i = 0; i < samplesToTransfer; ++i) {\n          const bitOffset = pixelBitOffset + (i * bitsPerSample);\n          const outIndex = (((y * tileWidth) + x) * samplesToTransfer) + i;\n\n          const byteOffset = Math.floor(bitOffset / 8);\n          const innerBitOffset = bitOffset % 8;\n          if (innerBitOffset + bitsPerSample <= 8) {\n            outArray[outIndex] = (view.getUint8(byteOffset) >> (8 - bitsPerSample) - innerBitOffset) & bitMask;\n          } else if (innerBitOffset + bitsPerSample <= 16) {\n            outArray[outIndex] = (view.getUint16(byteOffset) >> (16 - bitsPerSample) - innerBitOffset) & bitMask;\n          } else if (innerBitOffset + bitsPerSample <= 24) {\n            const raw = (view.getUint16(byteOffset) << 8) | (view.getUint8(byteOffset + 2));\n            outArray[outIndex] = (raw >> (24 - bitsPerSample) - innerBitOffset) & bitMask;\n          } else {\n            outArray[outIndex] = (view.getUint32(byteOffset) >> (32 - bitsPerSample) - innerBitOffset) & bitMask;\n          }\n\n          // let outWord = 0;\n          // for (let bit = 0; bit < bitsPerSample; ++bit) {\n          //   if (inByteArray[bitOffset >> 3]\n          //     & (0x80 >> (bitOffset & 7))) {\n          //     outWord |= (1 << (bitsPerSample - 1 - bit));\n          //   }\n          //   ++bitOffset;\n          // }\n\n          // outArray[outIndex] = outWord;\n          // outArray[pixel] = outWord;\n          // pixel += 1;\n        }\n        // bitOffset = bitOffset + pixelBitSkip - bitsPerSample;\n      }\n    }\n  } else if (format === 3) { // floating point\n    // Float16 is handled elsewhere\n    // normalize 16/24 bit floats to 32 bit floats in the array\n    // console.time();\n    // if (bitsPerSample === 16) {\n    //   for (let byte = 0, outIndex = 0; byte < inBuffer.byteLength; byte += 2, ++outIndex) {\n    //     outArray[outIndex] = getFloat16(view, byte);\n    //   }\n    // }\n    // console.timeEnd()\n  }\n\n  return outArray.buffer;\n}\n\n/**\n * GeoTIFF sub-file image.\n */\nclass GeoTIFFImage {\n  /**\n   * @constructor\n   * @param {Object} fileDirectory The parsed file directory\n   * @param {Object} geoKeys The parsed geo-keys\n   * @param {DataView} dataView The DataView for the underlying file.\n   * @param {Boolean} littleEndian Whether the file is encoded in little or big endian\n   * @param {Boolean} cache Whether or not decoded tiles shall be cached\n   * @param {Source} source The datasource to read from\n   */\n  constructor(fileDirectory, geoKeys, dataView, littleEndian, cache, source) {\n    this.fileDirectory = fileDirectory;\n    this.geoKeys = geoKeys;\n    this.dataView = dataView;\n    this.littleEndian = littleEndian;\n    this.tiles = cache ? {} : null;\n    this.isTiled = !fileDirectory.StripOffsets;\n    const planarConfiguration = fileDirectory.PlanarConfiguration;\n    this.planarConfiguration = (typeof planarConfiguration === 'undefined') ? 1 : planarConfiguration;\n    if (this.planarConfiguration !== 1 && this.planarConfiguration !== 2) {\n      throw new Error('Invalid planar configuration.');\n    }\n\n    this.source = source;\n  }\n\n  /**\n   * Returns the associated parsed file directory.\n   * @returns {Object} the parsed file directory\n   */\n  getFileDirectory() {\n    return this.fileDirectory;\n  }\n\n  /**\n   * Returns the associated parsed geo keys.\n   * @returns {Object} the parsed geo keys\n   */\n  getGeoKeys() {\n    return this.geoKeys;\n  }\n\n  /**\n   * Returns the width of the image.\n   * @returns {Number} the width of the image\n   */\n  getWidth() {\n    return this.fileDirectory.ImageWidth;\n  }\n\n  /**\n   * Returns the height of the image.\n   * @returns {Number} the height of the image\n   */\n  getHeight() {\n    return this.fileDirectory.ImageLength;\n  }\n\n  /**\n   * Returns the number of samples per pixel.\n   * @returns {Number} the number of samples per pixel\n   */\n  getSamplesPerPixel() {\n    return typeof this.fileDirectory.SamplesPerPixel !== 'undefined'\n      ? this.fileDirectory.SamplesPerPixel : 1;\n  }\n\n  /**\n   * Returns the width of each tile.\n   * @returns {Number} the width of each tile\n   */\n  getTileWidth() {\n    return this.isTiled ? this.fileDirectory.TileWidth : this.getWidth();\n  }\n\n  /**\n   * Returns the height of each tile.\n   * @returns {Number} the height of each tile\n   */\n  getTileHeight() {\n    if (this.isTiled) {\n      return this.fileDirectory.TileLength;\n    }\n    if (typeof this.fileDirectory.RowsPerStrip !== 'undefined') {\n      return Math.min(this.fileDirectory.RowsPerStrip, this.getHeight());\n    }\n    return this.getHeight();\n  }\n\n  getBlockWidth() {\n    return this.getTileWidth();\n  }\n\n  getBlockHeight(y) {\n    if (this.isTiled || (y + 1) * this.getTileHeight() <= this.getHeight()) {\n      return this.getTileHeight();\n    } else {\n      return this.getHeight() - (y * this.getTileHeight());\n    }\n  }\n\n  /**\n   * Calculates the number of bytes for each pixel across all samples. Only full\n   * bytes are supported, an exception is thrown when this is not the case.\n   * @returns {Number} the bytes per pixel\n   */\n  getBytesPerPixel() {\n    let bytes = 0;\n    for (let i = 0; i < this.fileDirectory.BitsPerSample.length; ++i) {\n      bytes += this.getSampleByteSize(i);\n    }\n    return bytes;\n  }\n\n  getSampleByteSize(i) {\n    if (i >= this.fileDirectory.BitsPerSample.length) {\n      throw new RangeError(`Sample index ${i} is out of range.`);\n    }\n    return Math.ceil(this.fileDirectory.BitsPerSample[i] / 8);\n  }\n\n  getReaderForSample(sampleIndex) {\n    const format = this.fileDirectory.SampleFormat\n      ? this.fileDirectory.SampleFormat[sampleIndex] : 1;\n    const bitsPerSample = this.fileDirectory.BitsPerSample[sampleIndex];\n    switch (format) {\n      case 1: // unsigned integer data\n        if (bitsPerSample <= 8) {\n          return DataView.prototype.getUint8;\n        } else if (bitsPerSample <= 16) {\n          return DataView.prototype.getUint16;\n        } else if (bitsPerSample <= 32) {\n          return DataView.prototype.getUint32;\n        }\n        break;\n      case 2: // twos complement signed integer data\n        if (bitsPerSample <= 8) {\n          return DataView.prototype.getInt8;\n        } else if (bitsPerSample <= 16) {\n          return DataView.prototype.getInt16;\n        } else if (bitsPerSample <= 32) {\n          return DataView.prototype.getInt32;\n        }\n        break;\n      case 3:\n        switch (bitsPerSample) {\n          case 16:\n            return function (offset, littleEndian) {\n              return getFloat16(this, offset, littleEndian);\n            };\n          case 32:\n            return DataView.prototype.getFloat32;\n          case 64:\n            return DataView.prototype.getFloat64;\n          default:\n            break;\n        }\n        break;\n      default:\n        break;\n    }\n    throw Error('Unsupported data format/bitsPerSample');\n  }\n\n  getSampleFormat(sampleIndex = 0) {\n    return this.fileDirectory.SampleFormat\n      ? this.fileDirectory.SampleFormat[sampleIndex] : 1;\n  }\n\n  getBitsPerSample(sampleIndex = 0) {\n    return this.fileDirectory.BitsPerSample[sampleIndex];\n  }\n\n  getArrayForSample(sampleIndex, size) {\n    const format = this.getSampleFormat(sampleIndex);\n    const bitsPerSample = this.getBitsPerSample(sampleIndex);\n    return arrayForType(format, bitsPerSample, size);\n  }\n\n  /**\n   * Returns the decoded strip or tile.\n   * @param {Number} x the strip or tile x-offset\n   * @param {Number} y the tile y-offset (0 for stripped images)\n   * @param {Number} sample the sample to get for separated samples\n   * @param {import(\"./geotiff\").Pool|AbstractDecoder} poolOrDecoder the decoder or decoder pool\n   * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n   *                               to be aborted\n   * @returns {Promise.<ArrayBuffer>}\n   */\n  async getTileOrStrip(x, y, sample, poolOrDecoder, signal) {\n    const numTilesPerRow = Math.ceil(this.getWidth() / this.getTileWidth());\n    const numTilesPerCol = Math.ceil(this.getHeight() / this.getTileHeight());\n    let index;\n    const { tiles } = this;\n    if (this.planarConfiguration === 1) {\n      index = (y * numTilesPerRow) + x;\n    } else if (this.planarConfiguration === 2) {\n      index = (sample * numTilesPerRow * numTilesPerCol) + (y * numTilesPerRow) + x;\n    }\n\n    let offset;\n    let byteCount;\n    if (this.isTiled) {\n      offset = this.fileDirectory.TileOffsets[index];\n      byteCount = this.fileDirectory.TileByteCounts[index];\n    } else {\n      offset = this.fileDirectory.StripOffsets[index];\n      byteCount = this.fileDirectory.StripByteCounts[index];\n    }\n    const slice = (await this.source.fetch([{ offset, length: byteCount }], signal))[0];\n\n    let request;\n    if (tiles === null || !tiles[index]) {\n    // resolve each request by potentially applying array normalization\n      request = (async () => {\n        let data = await poolOrDecoder.decode(this.fileDirectory, slice);\n        const sampleFormat = this.getSampleFormat();\n        const bitsPerSample = this.getBitsPerSample();\n        if (needsNormalization(sampleFormat, bitsPerSample)) {\n          data = normalizeArray(\n            data,\n            sampleFormat,\n            this.planarConfiguration,\n            this.getSamplesPerPixel(),\n            bitsPerSample,\n            this.getTileWidth(),\n            this.getBlockHeight(y),\n          );\n        }\n        return data;\n      })();\n\n      // set the cache\n      if (tiles !== null) {\n        tiles[index] = request;\n      }\n    } else {\n      // get from the cache\n      request = tiles[index];\n    }\n\n    // cache the tile request\n    return { x, y, sample, data: await request };\n  }\n\n  /**\n   * Internal read function.\n   * @private\n   * @param {Array} imageWindow The image window in pixel coordinates\n   * @param {Array} samples The selected samples (0-based indices)\n   * @param {TypedArray[]|TypedArray} valueArrays The array(s) to write into\n   * @param {Boolean} interleave Whether or not to write in an interleaved manner\n   * @param {import(\"./geotiff\").Pool|AbstractDecoder} poolOrDecoder the decoder or decoder pool\n   * @param {number} width the width of window to be read into\n   * @param {number} height the height of window to be read into\n   * @param {number} resampleMethod the resampling method to be used when interpolating\n   * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n   *                               to be aborted\n   * @returns {Promise<TypedArray[]>|Promise<TypedArray>}\n   */\n  async _readRaster(imageWindow, samples, valueArrays, interleave, poolOrDecoder, width,\n    height, resampleMethod, signal) {\n    const tileWidth = this.getTileWidth();\n    const tileHeight = this.getTileHeight();\n    const imageWidth = this.getWidth();\n    const imageHeight = this.getHeight();\n\n    const minXTile = Math.max(Math.floor(imageWindow[0] / tileWidth), 0);\n    const maxXTile = Math.min(\n      Math.ceil(imageWindow[2] / tileWidth),\n      Math.ceil(imageWidth / tileWidth),\n    );\n    const minYTile = Math.max(Math.floor(imageWindow[1] / tileHeight), 0);\n    const maxYTile = Math.min(\n      Math.ceil(imageWindow[3] / tileHeight),\n      Math.ceil(imageHeight / tileHeight),\n    );\n    const windowWidth = imageWindow[2] - imageWindow[0];\n\n    let bytesPerPixel = this.getBytesPerPixel();\n\n    const srcSampleOffsets = [];\n    const sampleReaders = [];\n    for (let i = 0; i < samples.length; ++i) {\n      if (this.planarConfiguration === 1) {\n        srcSampleOffsets.push(sum(this.fileDirectory.BitsPerSample, 0, samples[i]) / 8);\n      } else {\n        srcSampleOffsets.push(0);\n      }\n      sampleReaders.push(this.getReaderForSample(samples[i]));\n    }\n\n    const promises = [];\n    const { littleEndian } = this;\n\n    for (let yTile = minYTile; yTile < maxYTile; ++yTile) {\n      for (let xTile = minXTile; xTile < maxXTile; ++xTile) {\n        for (let sampleIndex = 0; sampleIndex < samples.length; ++sampleIndex) {\n          const si = sampleIndex;\n          const sample = samples[sampleIndex];\n          if (this.planarConfiguration === 2) {\n            bytesPerPixel = this.getSampleByteSize(sampleIndex);\n          }\n          const promise = this.getTileOrStrip(xTile, yTile, sample, poolOrDecoder, signal).then((tile) => {\n            const buffer = tile.data;\n            const dataView = new DataView(buffer);\n            const blockHeight = this.getBlockHeight(tile.y);\n            const firstLine = tile.y * tileHeight;\n            const firstCol = tile.x * tileWidth;\n            const lastLine = firstLine + blockHeight;\n            const lastCol = (tile.x + 1) * tileWidth;\n            const reader = sampleReaders[si];\n\n            const ymax = Math.min(blockHeight, blockHeight - (lastLine - imageWindow[3]), imageHeight - firstLine);\n            const xmax = Math.min(tileWidth, tileWidth - (lastCol - imageWindow[2]), imageWidth - firstCol);\n\n            for (let y = Math.max(0, imageWindow[1] - firstLine); y < ymax; ++y) {\n              for (let x = Math.max(0, imageWindow[0] - firstCol); x < xmax; ++x) {\n                const pixelOffset = ((y * tileWidth) + x) * bytesPerPixel;\n                const value = reader.call(\n                  dataView, pixelOffset + srcSampleOffsets[si], littleEndian,\n                );\n                let windowCoordinate;\n                if (interleave) {\n                  windowCoordinate = ((y + firstLine - imageWindow[1]) * windowWidth * samples.length)\n                    + ((x + firstCol - imageWindow[0]) * samples.length)\n                    + si;\n                  valueArrays[windowCoordinate] = value;\n                } else {\n                  windowCoordinate = (\n                    (y + firstLine - imageWindow[1]) * windowWidth\n                  ) + x + firstCol - imageWindow[0];\n                  valueArrays[si][windowCoordinate] = value;\n                }\n              }\n            }\n          });\n          promises.push(promise);\n        }\n      }\n    }\n    await Promise.all(promises);\n\n    if ((width && (imageWindow[2] - imageWindow[0]) !== width)\n        || (height && (imageWindow[3] - imageWindow[1]) !== height)) {\n      let resampled;\n      if (interleave) {\n        resampled = resampleInterleaved(\n          valueArrays,\n          imageWindow[2] - imageWindow[0],\n          imageWindow[3] - imageWindow[1],\n          width, height,\n          samples.length,\n          resampleMethod,\n        );\n      } else {\n        resampled = resample(\n          valueArrays,\n          imageWindow[2] - imageWindow[0],\n          imageWindow[3] - imageWindow[1],\n          width, height,\n          resampleMethod,\n        );\n      }\n      resampled.width = width;\n      resampled.height = height;\n      return resampled;\n    }\n\n    valueArrays.width = width || imageWindow[2] - imageWindow[0];\n    valueArrays.height = height || imageWindow[3] - imageWindow[1];\n\n    return valueArrays;\n  }\n\n  /**\n   * Reads raster data from the image. This function reads all selected samples\n   * into separate arrays of the correct type for that sample or into a single\n   * combined array when `interleave` is set. When provided, only a subset\n   * of the raster is read for each sample.\n   *\n   * @param {ReadRasterOptions} [options={}] optional parameters\n   * @returns {Promise.<(TypedArray|TypedArray[])>} the decoded arrays as a promise\n   */\n  async readRasters({\n    window: wnd, samples = [], interleave, pool = null,\n    width, height, resampleMethod, fillValue, signal,\n  } = {}) {\n    const imageWindow = wnd || [0, 0, this.getWidth(), this.getHeight()];\n\n    // check parameters\n    if (imageWindow[0] > imageWindow[2] || imageWindow[1] > imageWindow[3]) {\n      throw new Error('Invalid subsets');\n    }\n\n    const imageWindowWidth = imageWindow[2] - imageWindow[0];\n    const imageWindowHeight = imageWindow[3] - imageWindow[1];\n    const numPixels = imageWindowWidth * imageWindowHeight;\n    const samplesPerPixel = this.getSamplesPerPixel();\n\n    if (!samples || !samples.length) {\n      for (let i = 0; i < samplesPerPixel; ++i) {\n        samples.push(i);\n      }\n    } else {\n      for (let i = 0; i < samples.length; ++i) {\n        if (samples[i] >= samplesPerPixel) {\n          return Promise.reject(new RangeError(`Invalid sample index '${samples[i]}'.`));\n        }\n      }\n    }\n    let valueArrays;\n    if (interleave) {\n      const format = this.fileDirectory.SampleFormat\n        ? Math.max.apply(null, this.fileDirectory.SampleFormat) : 1;\n      const bitsPerSample = Math.max.apply(null, this.fileDirectory.BitsPerSample);\n      valueArrays = arrayForType(format, bitsPerSample, numPixels * samples.length);\n      if (fillValue) {\n        valueArrays.fill(fillValue);\n      }\n    } else {\n      valueArrays = [];\n      for (let i = 0; i < samples.length; ++i) {\n        const valueArray = this.getArrayForSample(samples[i], numPixels);\n        if (Array.isArray(fillValue) && i < fillValue.length) {\n          valueArray.fill(fillValue[i]);\n        } else if (fillValue && !Array.isArray(fillValue)) {\n          valueArray.fill(fillValue);\n        }\n        valueArrays.push(valueArray);\n      }\n    }\n\n    const poolOrDecoder = pool || await getDecoder(this.fileDirectory);\n\n    const result = await this._readRaster(\n      imageWindow, samples, valueArrays, interleave, poolOrDecoder, width, height, resampleMethod, signal,\n    );\n    return result;\n  }\n\n  /**\n   * Reads raster data from the image as RGB. The result is always an\n   * interleaved typed array.\n   * Colorspaces other than RGB will be transformed to RGB, color maps expanded.\n   * When no other method is applicable, the first sample is used to produce a\n   * greayscale image.\n   * When provided, only a subset of the raster is read for each sample.\n   *\n   * @param {Object} [options] optional parameters\n   * @param {Array<number>} [options.window] the subset to read data from in pixels.\n   * @param {boolean} [options.interleave=true] whether the data shall be read\n   *                                             in one single array or separate\n   *                                             arrays.\n   * @param {import(\"./geotiff\").Pool} [options.pool=null] The optional decoder pool to use.\n   * @param {number} [options.width] The desired width of the output. When the width is no the\n   *                                 same as the images, resampling will be performed.\n   * @param {number} [options.height] The desired height of the output. When the width is no the\n   *                                  same as the images, resampling will be performed.\n   * @param {string} [options.resampleMethod='nearest'] The desired resampling method.\n   * @param {boolean} [options.enableAlpha=false] Enable reading alpha channel if present.\n   * @param {AbortSignal} [options.signal] An AbortSignal that may be signalled if the request is\n   *                                       to be aborted\n   * @returns {Promise<TypedArray|TypedArray[]>} the RGB array as a Promise\n   */\n  async readRGB({ window, interleave = true, pool = null, width, height,\n    resampleMethod, enableAlpha = false, signal } = {}) {\n    const imageWindow = window || [0, 0, this.getWidth(), this.getHeight()];\n\n    // check parameters\n    if (imageWindow[0] > imageWindow[2] || imageWindow[1] > imageWindow[3]) {\n      throw new Error('Invalid subsets');\n    }\n\n    const pi = this.fileDirectory.PhotometricInterpretation;\n\n    if (pi === photometricInterpretations.RGB) {\n      let s = [0, 1, 2];\n      if ((!(this.fileDirectory.ExtraSamples === ExtraSamplesValues.Unspecified)) && enableAlpha) {\n        s = [];\n        for (let i = 0; i < this.fileDirectory.BitsPerSample.length; i += 1) {\n          s.push(i);\n        }\n      }\n      return this.readRasters({\n        window,\n        interleave,\n        samples: s,\n        pool,\n        width,\n        height,\n        resampleMethod,\n        signal,\n      });\n    }\n\n    let samples;\n    switch (pi) {\n      case photometricInterpretations.WhiteIsZero:\n      case photometricInterpretations.BlackIsZero:\n      case photometricInterpretations.Palette:\n        samples = [0];\n        break;\n      case photometricInterpretations.CMYK:\n        samples = [0, 1, 2, 3];\n        break;\n      case photometricInterpretations.YCbCr:\n      case photometricInterpretations.CIELab:\n        samples = [0, 1, 2];\n        break;\n      default:\n        throw new Error('Invalid or unsupported photometric interpretation.');\n    }\n\n    const subOptions = {\n      window: imageWindow,\n      interleave: true,\n      samples,\n      pool,\n      width,\n      height,\n      resampleMethod,\n      signal,\n    };\n    const { fileDirectory } = this;\n    const raster = await this.readRasters(subOptions);\n\n    const max = 2 ** this.fileDirectory.BitsPerSample[0];\n    let data;\n    switch (pi) {\n      case photometricInterpretations.WhiteIsZero:\n        data = fromWhiteIsZero(raster, max);\n        break;\n      case photometricInterpretations.BlackIsZero:\n        data = fromBlackIsZero(raster, max);\n        break;\n      case photometricInterpretations.Palette:\n        data = fromPalette(raster, fileDirectory.ColorMap);\n        break;\n      case photometricInterpretations.CMYK:\n        data = fromCMYK(raster);\n        break;\n      case photometricInterpretations.YCbCr:\n        data = fromYCbCr(raster);\n        break;\n      case photometricInterpretations.CIELab:\n        data = fromCIELab(raster);\n        break;\n      default:\n        throw new Error('Unsupported photometric interpretation.');\n    }\n\n    // if non-interleaved data is requested, we must split the channels\n    // into their respective arrays\n    if (!interleave) {\n      const red = new Uint8Array(data.length / 3);\n      const green = new Uint8Array(data.length / 3);\n      const blue = new Uint8Array(data.length / 3);\n      for (let i = 0, j = 0; i < data.length; i += 3, ++j) {\n        red[j] = data[i];\n        green[j] = data[i + 1];\n        blue[j] = data[i + 2];\n      }\n      data = [red, green, blue];\n    }\n\n    data.width = raster.width;\n    data.height = raster.height;\n    return data;\n  }\n\n  /**\n   * Returns an array of tiepoints.\n   * @returns {Object[]}\n   */\n  getTiePoints() {\n    if (!this.fileDirectory.ModelTiepoint) {\n      return [];\n    }\n\n    const tiePoints = [];\n    for (let i = 0; i < this.fileDirectory.ModelTiepoint.length; i += 6) {\n      tiePoints.push({\n        i: this.fileDirectory.ModelTiepoint[i],\n        j: this.fileDirectory.ModelTiepoint[i + 1],\n        k: this.fileDirectory.ModelTiepoint[i + 2],\n        x: this.fileDirectory.ModelTiepoint[i + 3],\n        y: this.fileDirectory.ModelTiepoint[i + 4],\n        z: this.fileDirectory.ModelTiepoint[i + 5],\n      });\n    }\n    return tiePoints;\n  }\n\n  /**\n   * Returns the parsed GDAL metadata items.\n   *\n   * If sample is passed to null, dataset-level metadata will be returned.\n   * Otherwise only metadata specific to the provided sample will be returned.\n   *\n   * @param {number} [sample=null] The sample index.\n   * @returns {Object}\n   */\n  getGDALMetadata(sample = null) {\n    const metadata = {};\n    if (!this.fileDirectory.GDAL_METADATA) {\n      return null;\n    }\n    const string = this.fileDirectory.GDAL_METADATA;\n\n    let items = findTagsByName(string, 'Item');\n\n    if (sample === null) {\n      items = items.filter((item) => getAttribute(item, 'sample') === undefined);\n    } else {\n      items = items.filter((item) => Number(getAttribute(item, 'sample')) === sample);\n    }\n\n    for (let i = 0; i < items.length; ++i) {\n      const item = items[i];\n      metadata[getAttribute(item, 'name')] = item.inner;\n    }\n    return metadata;\n  }\n\n  /**\n   * Returns the GDAL nodata value\n   * @returns {number|null}\n   */\n  getGDALNoData() {\n    if (!this.fileDirectory.GDAL_NODATA) {\n      return null;\n    }\n    const string = this.fileDirectory.GDAL_NODATA;\n    return Number(string.substring(0, string.length - 1));\n  }\n\n  /**\n   * Returns the image origin as a XYZ-vector. When the image has no affine\n   * transformation, then an exception is thrown.\n   * @returns {Array<number>} The origin as a vector\n   */\n  getOrigin() {\n    const tiePoints = this.fileDirectory.ModelTiepoint;\n    const modelTransformation = this.fileDirectory.ModelTransformation;\n    if (tiePoints && tiePoints.length === 6) {\n      return [\n        tiePoints[3],\n        tiePoints[4],\n        tiePoints[5],\n      ];\n    }\n    if (modelTransformation) {\n      return [\n        modelTransformation[3],\n        modelTransformation[7],\n        modelTransformation[11],\n      ];\n    }\n    throw new Error('The image does not have an affine transformation.');\n  }\n\n  /**\n   * Returns the image resolution as a XYZ-vector. When the image has no affine\n   * transformation, then an exception is thrown.\n   * @param {GeoTIFFImage} [referenceImage=null] A reference image to calculate the resolution from\n   *                                             in cases when the current image does not have the\n   *                                             required tags on its own.\n   * @returns {Array<number>} The resolution as a vector\n   */\n  getResolution(referenceImage = null) {\n    const modelPixelScale = this.fileDirectory.ModelPixelScale;\n    const modelTransformation = this.fileDirectory.ModelTransformation;\n\n    if (modelPixelScale) {\n      return [\n        modelPixelScale[0],\n        -modelPixelScale[1],\n        modelPixelScale[2],\n      ];\n    }\n    if (modelTransformation) {\n      return [\n        modelTransformation[0],\n        modelTransformation[5],\n        modelTransformation[10],\n      ];\n    }\n\n    if (referenceImage) {\n      const [refResX, refResY, refResZ] = referenceImage.getResolution();\n      return [\n        refResX * referenceImage.getWidth() / this.getWidth(),\n        refResY * referenceImage.getHeight() / this.getHeight(),\n        refResZ * referenceImage.getWidth() / this.getWidth(),\n      ];\n    }\n\n    throw new Error('The image does not have an affine transformation.');\n  }\n\n  /**\n   * Returns whether or not the pixels of the image depict an area (or point).\n   * @returns {Boolean} Whether the pixels are a point\n   */\n  pixelIsArea() {\n    return this.geoKeys.GTRasterTypeGeoKey === 1;\n  }\n\n  /**\n   * Returns the image bounding box as an array of 4 values: min-x, min-y,\n   * max-x and max-y. When the image has no affine transformation, then an\n   * exception is thrown.\n   * @returns {Array<number>} The bounding box\n   */\n  getBoundingBox() {\n    const origin = this.getOrigin();\n    const resolution = this.getResolution();\n\n    const x1 = origin[0];\n    const y1 = origin[1];\n\n    const x2 = x1 + (resolution[0] * this.getWidth());\n    const y2 = y1 + (resolution[1] * this.getHeight());\n\n    return [\n      Math.min(x1, x2),\n      Math.min(y1, y2),\n      Math.max(x1, x2),\n      Math.max(y1, y2),\n    ];\n  }\n}\n\nexport default GeoTIFFImage;\n","const registry = new Map();\n\nexport function addDecoder(cases, importFn) {\n  if (!Array.isArray(cases)) {\n    cases = [cases]; // eslint-disable-line no-param-reassign\n  }\n  cases.forEach((c) => registry.set(c, importFn));\n}\n\nexport async function getDecoder(fileDirectory) {\n  const importFn = registry.get(fileDirectory.Compression);\n  if (!importFn) {\n    throw new Error(`Unknown compression method identifier: ${fileDirectory.Compression}`);\n  }\n  const Decoder = await importFn();\n  return new Decoder(fileDirectory);\n}\n\n// Add default decoders to registry (end-user may override with other implementations)\naddDecoder([undefined, 1], () => import('./raw.js').then((m) => m.default));\naddDecoder(5, () => import('./lzw.js').then((m) => m.default));\naddDecoder(6, () => {\n  throw new Error('old style JPEG compression is not supported.');\n});\naddDecoder(7, () => import('./jpeg.js').then((m) => m.default));\naddDecoder([8, 32946], () => import('./deflate.js').then((m) => m.default));\naddDecoder(32773, () => import('./packbits.js').then((m) => m.default));\naddDecoder(34887, () => import('./lerc.js').then((m) => m.default));\naddDecoder(50001, () => import('./webimage.js').then((m) => m.default));\n","import http from 'http';\nimport https from 'https';\nimport urlMod from 'url';\n\nimport { BaseClient, BaseResponse } from './base.js';\nimport { AbortError } from '../../utils.js';\n\nclass HttpResponse extends BaseResponse {\n  /**\n   * BaseResponse facade for node HTTP/HTTPS API Response\n   * @param {http.ServerResponse} response\n   */\n  constructor(response, dataPromise) {\n    super();\n    this.response = response;\n    this.dataPromise = dataPromise;\n  }\n\n  get status() {\n    return this.response.statusCode;\n  }\n\n  getHeader(name) {\n    return this.response.headers[name];\n  }\n\n  async getData() {\n    const data = await this.dataPromise;\n    return data;\n  }\n}\n\nexport class HttpClient extends BaseClient {\n  constructor(url) {\n    super(url);\n    this.parsedUrl = urlMod.parse(this.url);\n    this.httpApi = (this.parsedUrl.protocol === 'http:' ? http : https);\n  }\n\n  constructRequest(headers, signal) {\n    return new Promise((resolve, reject) => {\n      const request = this.httpApi.get(\n        {\n          ...this.parsedUrl,\n          headers,\n        },\n        (response) => {\n          const dataPromise = new Promise((resolveData) => {\n            const chunks = [];\n\n            // collect chunks\n            response.on('data', (chunk) => {\n              chunks.push(chunk);\n            });\n\n            // concatenate all chunks and resolve the promise with the resulting buffer\n            response.on('end', () => {\n              const data = Buffer.concat(chunks).buffer;\n              resolveData(data);\n            });\n            response.on('error', reject);\n          });\n          resolve(new HttpResponse(response, dataPromise));\n        },\n      );\n      request.on('error', reject);\n\n      if (signal) {\n        if (signal.aborted) {\n          request.destroy(new AbortError('Request aborted'));\n        }\n        signal.addEventListener('abort', () => request.destroy(new AbortError('Request aborted')));\n      }\n    });\n  }\n\n  async request({ headers, signal } = {}) {\n    const response = await this.constructRequest(headers, signal);\n    return response;\n  }\n}\n","export const fieldTagNames = {\n  // TIFF Baseline\n  0x013B: 'Artist',\n  0x0102: 'BitsPerSample',\n  0x0109: 'CellLength',\n  0x0108: 'CellWidth',\n  0x0140: 'ColorMap',\n  0x0103: 'Compression',\n  0x8298: 'Copyright',\n  0x0132: 'DateTime',\n  0x0152: 'ExtraSamples',\n  0x010A: 'FillOrder',\n  0x0121: 'FreeByteCounts',\n  0x0120: 'FreeOffsets',\n  0x0123: 'GrayResponseCurve',\n  0x0122: 'GrayResponseUnit',\n  0x013C: 'HostComputer',\n  0x010E: 'ImageDescription',\n  0x0101: 'ImageLength',\n  0x0100: 'ImageWidth',\n  0x010F: 'Make',\n  0x0119: 'MaxSampleValue',\n  0x0118: 'MinSampleValue',\n  0x0110: 'Model',\n  0x00FE: 'NewSubfileType',\n  0x0112: 'Orientation',\n  0x0106: 'PhotometricInterpretation',\n  0x011C: 'PlanarConfiguration',\n  0x0128: 'ResolutionUnit',\n  0x0116: 'RowsPerStrip',\n  0x0115: 'SamplesPerPixel',\n  0x0131: 'Software',\n  0x0117: 'StripByteCounts',\n  0x0111: 'StripOffsets',\n  0x00FF: 'SubfileType',\n  0x0107: 'Threshholding',\n  0x011A: 'XResolution',\n  0x011B: 'YResolution',\n\n  // TIFF Extended\n  0x0146: 'BadFaxLines',\n  0x0147: 'CleanFaxData',\n  0x0157: 'ClipPath',\n  0x0148: 'ConsecutiveBadFaxLines',\n  0x01B1: 'Decode',\n  0x01B2: 'DefaultImageColor',\n  0x010D: 'DocumentName',\n  0x0150: 'DotRange',\n  0x0141: 'HalftoneHints',\n  0x015A: 'Indexed',\n  0x015B: 'JPEGTables',\n  0x011D: 'PageName',\n  0x0129: 'PageNumber',\n  0x013D: 'Predictor',\n  0x013F: 'PrimaryChromaticities',\n  0x0214: 'ReferenceBlackWhite',\n  0x0153: 'SampleFormat',\n  0x0154: 'SMinSampleValue',\n  0x0155: 'SMaxSampleValue',\n  0x022F: 'StripRowCounts',\n  0x014A: 'SubIFDs',\n  0x0124: 'T4Options',\n  0x0125: 'T6Options',\n  0x0145: 'TileByteCounts',\n  0x0143: 'TileLength',\n  0x0144: 'TileOffsets',\n  0x0142: 'TileWidth',\n  0x012D: 'TransferFunction',\n  0x013E: 'WhitePoint',\n  0x0158: 'XClipPathUnits',\n  0x011E: 'XPosition',\n  0x0211: 'YCbCrCoefficients',\n  0x0213: 'YCbCrPositioning',\n  0x0212: 'YCbCrSubSampling',\n  0x0159: 'YClipPathUnits',\n  0x011F: 'YPosition',\n\n  // EXIF\n  0x9202: 'ApertureValue',\n  0xA001: 'ColorSpace',\n  0x9004: 'DateTimeDigitized',\n  0x9003: 'DateTimeOriginal',\n  0x8769: 'Exif IFD',\n  0x9000: 'ExifVersion',\n  0x829A: 'ExposureTime',\n  0xA300: 'FileSource',\n  0x9209: 'Flash',\n  0xA000: 'FlashpixVersion',\n  0x829D: 'FNumber',\n  0xA420: 'ImageUniqueID',\n  0x9208: 'LightSource',\n  0x927C: 'MakerNote',\n  0x9201: 'ShutterSpeedValue',\n  0x9286: 'UserComment',\n\n  // IPTC\n  0x83BB: 'IPTC',\n\n  // ICC\n  0x8773: 'ICC Profile',\n\n  // XMP\n  0x02BC: 'XMP',\n\n  // GDAL\n  0xA480: 'GDAL_METADATA',\n  0xA481: 'GDAL_NODATA',\n\n  // Photoshop\n  0x8649: 'Photoshop',\n\n  // GeoTiff\n  0x830E: 'ModelPixelScale',\n  0x8482: 'ModelTiepoint',\n  0x85D8: 'ModelTransformation',\n  0x87AF: 'GeoKeyDirectory',\n  0x87B0: 'GeoDoubleParams',\n  0x87B1: 'GeoAsciiParams',\n\n  // LERC\n  0xC5F2: 'LercParameters',\n};\n\nexport const fieldTags = {};\nfor (const key in fieldTagNames) {\n  if (fieldTagNames.hasOwnProperty(key)) {\n    fieldTags[fieldTagNames[key]] = parseInt(key, 10);\n  }\n}\n\nexport const fieldTagTypes = {\n  256: 'SHORT',\n  257: 'SHORT',\n  258: 'SHORT',\n  259: 'SHORT',\n  262: 'SHORT',\n  273: 'LONG',\n  274: 'SHORT',\n  277: 'SHORT',\n  278: 'LONG',\n  279: 'LONG',\n  282: 'RATIONAL',\n  283: 'RATIONAL',\n  284: 'SHORT',\n  286: 'SHORT',\n  287: 'RATIONAL',\n  296: 'SHORT',\n  297: 'SHORT',\n  305: 'ASCII',\n  306: 'ASCII',\n  338: 'SHORT',\n  339: 'SHORT',\n  513: 'LONG',\n  514: 'LONG',\n  1024: 'SHORT',\n  1025: 'SHORT',\n  2048: 'SHORT',\n  2049: 'ASCII',\n  3072: 'SHORT',\n  3073: 'ASCII',\n  33550: 'DOUBLE',\n  33922: 'DOUBLE',\n  34665: 'LONG',\n  34735: 'SHORT',\n  34737: 'ASCII',\n  42113: 'ASCII',\n};\n\nexport const arrayFields = [\n  fieldTags.BitsPerSample,\n  fieldTags.ExtraSamples,\n  fieldTags.SampleFormat,\n  fieldTags.StripByteCounts,\n  fieldTags.StripOffsets,\n  fieldTags.StripRowCounts,\n  fieldTags.TileByteCounts,\n  fieldTags.TileOffsets,\n  fieldTags.SubIFDs,\n];\n\nexport const fieldTypeNames = {\n  0x0001: 'BYTE',\n  0x0002: 'ASCII',\n  0x0003: 'SHORT',\n  0x0004: 'LONG',\n  0x0005: 'RATIONAL',\n  0x0006: 'SBYTE',\n  0x0007: 'UNDEFINED',\n  0x0008: 'SSHORT',\n  0x0009: 'SLONG',\n  0x000A: 'SRATIONAL',\n  0x000B: 'FLOAT',\n  0x000C: 'DOUBLE',\n  // IFD offset, suggested by https://owl.phy.queensu.ca/~phil/exiftool/standards.html\n  0x000D: 'IFD',\n  // introduced by BigTIFF\n  0x0010: 'LONG8',\n  0x0011: 'SLONG8',\n  0x0012: 'IFD8',\n};\n\nexport const fieldTypes = {};\nfor (const key in fieldTypeNames) {\n  if (fieldTypeNames.hasOwnProperty(key)) {\n    fieldTypes[fieldTypeNames[key]] = parseInt(key, 10);\n  }\n}\n\nexport const photometricInterpretations = {\n  WhiteIsZero: 0,\n  BlackIsZero: 1,\n  RGB: 2,\n  Palette: 3,\n  TransparencyMask: 4,\n  CMYK: 5,\n  YCbCr: 6,\n\n  CIELab: 8,\n  ICCLab: 9,\n};\n\nexport const ExtraSamplesValues = {\n  Unspecified: 0,\n  Assocalpha: 1,\n  Unassalpha: 2,\n};\n\nexport const LercParameters = {\n  Version: 0,\n  AddCompression: 1,\n};\n\nexport const LercAddCompression = {\n  None: 0,\n  Deflate: 1,\n};\n\nexport const geoKeyNames = {\n  1024: 'GTModelTypeGeoKey',\n  1025: 'GTRasterTypeGeoKey',\n  1026: 'GTCitationGeoKey',\n  2048: 'GeographicTypeGeoKey',\n  2049: 'GeogCitationGeoKey',\n  2050: 'GeogGeodeticDatumGeoKey',\n  2051: 'GeogPrimeMeridianGeoKey',\n  2052: 'GeogLinearUnitsGeoKey',\n  2053: 'GeogLinearUnitSizeGeoKey',\n  2054: 'GeogAngularUnitsGeoKey',\n  2055: 'GeogAngularUnitSizeGeoKey',\n  2056: 'GeogEllipsoidGeoKey',\n  2057: 'GeogSemiMajorAxisGeoKey',\n  2058: 'GeogSemiMinorAxisGeoKey',\n  2059: 'GeogInvFlatteningGeoKey',\n  2060: 'GeogAzimuthUnitsGeoKey',\n  2061: 'GeogPrimeMeridianLongGeoKey',\n  2062: 'GeogTOWGS84GeoKey',\n  3072: 'ProjectedCSTypeGeoKey',\n  3073: 'PCSCitationGeoKey',\n  3074: 'ProjectionGeoKey',\n  3075: 'ProjCoordTransGeoKey',\n  3076: 'ProjLinearUnitsGeoKey',\n  3077: 'ProjLinearUnitSizeGeoKey',\n  3078: 'ProjStdParallel1GeoKey',\n  3079: 'ProjStdParallel2GeoKey',\n  3080: 'ProjNatOriginLongGeoKey',\n  3081: 'ProjNatOriginLatGeoKey',\n  3082: 'ProjFalseEastingGeoKey',\n  3083: 'ProjFalseNorthingGeoKey',\n  3084: 'ProjFalseOriginLongGeoKey',\n  3085: 'ProjFalseOriginLatGeoKey',\n  3086: 'ProjFalseOriginEastingGeoKey',\n  3087: 'ProjFalseOriginNorthingGeoKey',\n  3088: 'ProjCenterLongGeoKey',\n  3089: 'ProjCenterLatGeoKey',\n  3090: 'ProjCenterEastingGeoKey',\n  3091: 'ProjCenterNorthingGeoKey',\n  3092: 'ProjScaleAtNatOriginGeoKey',\n  3093: 'ProjScaleAtCenterGeoKey',\n  3094: 'ProjAzimuthAngleGeoKey',\n  3095: 'ProjStraightVertPoleLongGeoKey',\n  3096: 'ProjRectifiedGridAngleGeoKey',\n  4096: 'VerticalCSTypeGeoKey',\n  4097: 'VerticalCitationGeoKey',\n  4098: 'VerticalDatumGeoKey',\n  4099: 'VerticalUnitsGeoKey',\n};\n\nexport const geoKeys = {};\nfor (const key in geoKeyNames) {\n  if (geoKeyNames.hasOwnProperty(key)) {\n    geoKeys[geoKeyNames[key]] = parseInt(key, 10);\n  }\n}\n","export function fromWhiteIsZero(raster, max) {\n  const { width, height } = raster;\n  const rgbRaster = new Uint8Array(width * height * 3);\n  let value;\n  for (let i = 0, j = 0; i < raster.length; ++i, j += 3) {\n    value = 256 - (raster[i] / max * 256);\n    rgbRaster[j] = value;\n    rgbRaster[j + 1] = value;\n    rgbRaster[j + 2] = value;\n  }\n  return rgbRaster;\n}\n\nexport function fromBlackIsZero(raster, max) {\n  const { width, height } = raster;\n  const rgbRaster = new Uint8Array(width * height * 3);\n  let value;\n  for (let i = 0, j = 0; i < raster.length; ++i, j += 3) {\n    value = raster[i] / max * 256;\n    rgbRaster[j] = value;\n    rgbRaster[j + 1] = value;\n    rgbRaster[j + 2] = value;\n  }\n  return rgbRaster;\n}\n\nexport function fromPalette(raster, colorMap) {\n  const { width, height } = raster;\n  const rgbRaster = new Uint8Array(width * height * 3);\n  const greenOffset = colorMap.length / 3;\n  const blueOffset = colorMap.length / 3 * 2;\n  for (let i = 0, j = 0; i < raster.length; ++i, j += 3) {\n    const mapIndex = raster[i];\n    rgbRaster[j] = colorMap[mapIndex] / 65536 * 256;\n    rgbRaster[j + 1] = colorMap[mapIndex + greenOffset] / 65536 * 256;\n    rgbRaster[j + 2] = colorMap[mapIndex + blueOffset] / 65536 * 256;\n  }\n  return rgbRaster;\n}\n\nexport function fromCMYK(cmykRaster) {\n  const { width, height } = cmykRaster;\n  const rgbRaster = new Uint8Array(width * height * 3);\n  for (let i = 0, j = 0; i < cmykRaster.length; i += 4, j += 3) {\n    const c = cmykRaster[i];\n    const m = cmykRaster[i + 1];\n    const y = cmykRaster[i + 2];\n    const k = cmykRaster[i + 3];\n\n    rgbRaster[j] = 255 * ((255 - c) / 256) * ((255 - k) / 256);\n    rgbRaster[j + 1] = 255 * ((255 - m) / 256) * ((255 - k) / 256);\n    rgbRaster[j + 2] = 255 * ((255 - y) / 256) * ((255 - k) / 256);\n  }\n  return rgbRaster;\n}\n\nexport function fromYCbCr(yCbCrRaster) {\n  const { width, height } = yCbCrRaster;\n  const rgbRaster = new Uint8ClampedArray(width * height * 3);\n  for (let i = 0, j = 0; i < yCbCrRaster.length; i += 3, j += 3) {\n    const y = yCbCrRaster[i];\n    const cb = yCbCrRaster[i + 1];\n    const cr = yCbCrRaster[i + 2];\n\n    rgbRaster[j] = (y + (1.40200 * (cr - 0x80)));\n    rgbRaster[j + 1] = (y - (0.34414 * (cb - 0x80)) - (0.71414 * (cr - 0x80)));\n    rgbRaster[j + 2] = (y + (1.77200 * (cb - 0x80)));\n  }\n  return rgbRaster;\n}\n\nconst Xn = 0.95047;\nconst Yn = 1.00000;\nconst Zn = 1.08883;\n\n// from https://github.com/antimatter15/rgb-lab/blob/master/color.js\n\nexport function fromCIELab(cieLabRaster) {\n  const { width, height } = cieLabRaster;\n  const rgbRaster = new Uint8Array(width * height * 3);\n\n  for (let i = 0, j = 0; i < cieLabRaster.length; i += 3, j += 3) {\n    const L = cieLabRaster[i + 0];\n    const a_ = cieLabRaster[i + 1] << 24 >> 24; // conversion from uint8 to int8\n    const b_ = cieLabRaster[i + 2] << 24 >> 24; // same\n\n    let y = (L + 16) / 116;\n    let x = (a_ / 500) + y;\n    let z = y - (b_ / 200);\n    let r;\n    let g;\n    let b;\n\n    x = Xn * ((x * x * x > 0.008856) ? x * x * x : (x - (16 / 116)) / 7.787);\n    y = Yn * ((y * y * y > 0.008856) ? y * y * y : (y - (16 / 116)) / 7.787);\n    z = Zn * ((z * z * z > 0.008856) ? z * z * z : (z - (16 / 116)) / 7.787);\n\n    r = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);\n    g = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);\n    b = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);\n\n    r = (r > 0.0031308) ? ((1.055 * (r ** (1 / 2.4))) - 0.055) : 12.92 * r;\n    g = (g > 0.0031308) ? ((1.055 * (g ** (1 / 2.4))) - 0.055) : 12.92 * g;\n    b = (b > 0.0031308) ? ((1.055 * (b ** (1 / 2.4))) - 0.055) : 12.92 * b;\n\n    rgbRaster[j] = Math.max(0, Math.min(1, r)) * 255;\n    rgbRaster[j + 1] = Math.max(0, Math.min(1, g)) * 255;\n    rgbRaster[j + 2] = Math.max(0, Math.min(1, b)) * 255;\n  }\n  return rgbRaster;\n}\n","export function assign(target, source) {\n  for (const key in source) {\n    if (source.hasOwnProperty(key)) {\n      target[key] = source[key];\n    }\n  }\n}\n\nexport function chunk(iterable, length) {\n  const results = [];\n  const lengthOfIterable = iterable.length;\n  for (let i = 0; i < lengthOfIterable; i += length) {\n    const chunked = [];\n    for (let ci = i; ci < i + length; ci++) {\n      chunked.push(iterable[ci]);\n    }\n    results.push(chunked);\n  }\n  return results;\n}\n\nexport function endsWith(string, expectedEnding) {\n  if (string.length < expectedEnding.length) {\n    return false;\n  }\n  const actualEnding = string.substr(string.length - expectedEnding.length);\n  return actualEnding === expectedEnding;\n}\n\nexport function forEach(iterable, func) {\n  const { length } = iterable;\n  for (let i = 0; i < length; i++) {\n    func(iterable[i], i);\n  }\n}\n\nexport function invert(oldObj) {\n  const newObj = {};\n  for (const key in oldObj) {\n    if (oldObj.hasOwnProperty(key)) {\n      const value = oldObj[key];\n      newObj[value] = key;\n    }\n  }\n  return newObj;\n}\n\nexport function range(n) {\n  const results = [];\n  for (let i = 0; i < n; i++) {\n    results.push(i);\n  }\n  return results;\n}\n\nexport function times(numTimes, func) {\n  const results = [];\n  for (let i = 0; i < numTimes; i++) {\n    results.push(func(i));\n  }\n  return results;\n}\n\nexport function toArray(iterable) {\n  const results = [];\n  const { length } = iterable;\n  for (let i = 0; i < length; i++) {\n    results.push(iterable[i]);\n  }\n  return results;\n}\n\nexport function toArrayRecursively(input) {\n  if (input.length) {\n    return toArray(input).map(toArrayRecursively);\n  }\n  return input;\n}\n\n// copied from https://github.com/academia-de-codigo/parse-content-range-header/blob/master/index.js\nexport function parseContentRange(headerValue) {\n  if (!headerValue) {\n    return null;\n  }\n\n  if (typeof headerValue !== 'string') {\n    throw new Error('invalid argument');\n  }\n\n  const parseInt = (number) => Number.parseInt(number, 10);\n\n  // Check for presence of unit\n  let matches = headerValue.match(/^(\\w*) /);\n  const unit = matches && matches[1];\n\n  // check for start-end/size header format\n  matches = headerValue.match(/(\\d+)-(\\d+)\\/(\\d+|\\*)/);\n  if (matches) {\n    return {\n      unit,\n      first: parseInt(matches[1]),\n      last: parseInt(matches[2]),\n      length: matches[3] === '*' ? null : parseInt(matches[3]),\n    };\n  }\n\n  // check for size header format\n  matches = headerValue.match(/(\\d+|\\*)/);\n  if (matches) {\n    return {\n      unit,\n      first: null,\n      last: null,\n      length: matches[1] === '*' ? null : parseInt(matches[1]),\n    };\n  }\n\n  return null;\n}\n\n/*\n * Promisified wrapper around 'setTimeout' to allow 'await'\n */\nexport async function wait(milliseconds) {\n  return new Promise((resolve) => setTimeout(resolve, milliseconds));\n}\n\nexport function zip(a, b) {\n  const A = Array.isArray(a) ? a : Array.from(a);\n  const B = Array.isArray(b) ? b : Array.from(b);\n  return A.map((k, i) => [k, B[i]]);\n}\n\n// Based on https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\nexport class AbortError extends Error {\n  constructor(params) {\n    // Pass remaining arguments (including vendor specific ones) to parent constructor\n    super(params);\n\n    // Maintains proper stack trace for where our error was thrown (only available on V8)\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, AbortError);\n    }\n\n    this.name = 'AbortError';\n  }\n}\n\nexport class CustomAggregateError extends Error {\n  constructor(errors, message) {\n    super(message);\n    this.errors = errors;\n    this.message = message;\n    this.name = 'AggregateError';\n  }\n}\n\nexport const AggregateError = CustomAggregateError;\n","/**\n * @typedef Slice\n * @property {number} offset\n * @property {number} length\n */\n\nexport class BaseSource {\n  /**\n   *\n   * @param {Slice[]} slices\n   * @returns {ArrayBuffer[]}\n   */\n  async fetch(slices, signal = undefined) {\n    return Promise.all(\n      slices.map((slice) => this.fetchSlice(slice, signal)),\n    );\n  }\n\n  /**\n   *\n   * @param {Slice} slice\n   * @returns {ArrayBuffer}\n   */\n  async fetchSlice(slice) {\n    throw new Error(`fetching of slice ${slice} not possible, not implemented`);\n  }\n\n  /**\n   * Returns the filesize if already determined and null otherwise\n   */\n  get fileSize() {\n    return null;\n  }\n\n  async close() {\n    // no-op by default\n  }\n}\n"],"sourceRoot":""}