{"version":3,"sources":["webpack:///./node_modules/@openeo/js-processgraphs/src/keywords.js","webpack:///./node_modules/@openeo/js-processgraphs/src/utils.js","webpack:///./node_modules/@openeo/js-processgraphs/src/processgraph.js","webpack:///./node_modules/@openeo/js-processgraphs/src/error.js","webpack:///./node_modules/@openeo/js-processgraphs/src/errorlist.js","webpack:///./node_modules/@openeo/js-processgraphs/src/node.js","webpack:///./node_modules/@openeo/js-processgraphs/src/main.js","webpack:///./node_modules/@openeo/js-processgraphs/src/process.js","webpack:///./node_modules/@openeo/js-processgraphs/src/registry.js","webpack:///./node_modules/@openeo/js-processgraphs/src/jsonschema.js"],"names":["module","exports","subtype","metaSchema","type","parameters","dependencies","items","required","properties","name","pattern","description","optional","default","deprecated","experimental","schema","oneOf","returns","CommonUtils","Utils","value","checkProcess","checkCallbacks","getType","containsRef","process_graph","key","getFromProcess","getFromCallbacks","store","push","concat","getRefs","unique","ProcessGraph","Array","isArray","hasOwnProperty","ErrorList","JsonSchemaValidator","ProcessGraphError","ProcessGraphNode","ProcessUtils","process","processRegistry","jsonSchemaValidator","this","nodes","startNodes","resultNode","children","parentNode","parsed","validated","errors","callbackParameters","arguments","allowEmptyGraph","fillProcessParameters","allowUndefinedParameterRefs","createJsonSchemaValidatorInstance","setProcessGraphParser","nodeObj","id","parent","pg","getJsonSchemaValidator","copyProcessGraphInstanceProperties","node","parameterPath","createProcessGraphInstance","setArguments","setParentNode","length","parameterName","shift","setCallbackParameters","getCallbackParametersForProcess","getParentProcess","parse","getProcessGraph","count","error","add","allow","fill","makeError","errorId","getParentProcessId","process_id","node_id","isObject","size","mapObjectValues","createNodeInstance","isResultNode","parseNodeArguments","Object","values","filter","isStartNode","sort","a","b","localeCompare","throwOnErrors","first","addError","validateNodes","getStartNodes","args","allowUndefinedParameters","validate","reset","executeNodes","getResultNode","previousNode","promises","map","async","solveDependency","validateNode","e","merge","getNextNodes","Promise","all","getProcess","result","executeNode","setResult","execute","nodeId","argumentName","arg","path","prevNode","from_node","addPreviousNode","addNextNode","createChildProcessGraph","hasParameter","from_parameter","addProcessParameter","getCallbackParameters","find","p","undefined","getParameterDefault","param","getParameter","includeUndefined","slice","refs","ref","other","getProcessParameters","callbackParam","getCallbackParameter","processParam","getProcessParameter","assign","forEach","child","get","getParentNode","MESSAGES","Error","codeOrMsg","variables","super","code","message","replacePlaceholders","replace","errorList","getAll","toJSON","msg","i","parseInt","trim","processGraph","source","deepClone","expectsFrom","receivedFrom","passesTo","computedResult","keys","getRawArgument","defaultValue","evaluateArgument","hasArgument","getArgument","hasParameterDefault","getParent","argument","getNode","getResult","getProcessGraphParameterValue","copy","dependencyNode","includes","BaseProcess","ProcessRegistry","spec","unsupportedArgs","getArgumentNames","findIndex","getParsedArgument","rawArg","validateArgument","argType","isSchemaCompatible","reason","parameter","schemas","normalizeJsonSchema","isProcessGraphSchema","elementSchema","getElementJsonSchema","lastError","validator","validateValue","Process","processes","addAll","isImpl","json","toLowerCase","pid","impl","Ajv","keywords","geoJsonSchema","subtypeSchemas","ajv","schemaId","format","addUsedSchema","addSchema","addKeyword","valid","data","validateSubtype","collections","epsgCodes","fileFormats","input","output","udfRuntimes","char","toUpperCase","$async","anyOf","$schema","definitions","makeSchema","funcName","getFunctionName","c","io","v","ValidationError","codeWords","some","word","indexOf","date1","Date","date2","getTime","interval","validateTemporalInterval","parser","paramSchema","valueSchema","strict","allowValueAsElements","paramSchemas","valueSchemas","compatible","ps","vs"],"mappings":"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","file":"js/chunk-vendors~d16e01da.a2160446.js","sourcesContent":["module.exports = {\r\n\tsubtype: {\r\n\t\tmetaSchema: {\r\n\t\t\ttype: \"string\"\r\n\t\t}\r\n\t},\r\n\tparameters: {\r\n\t\tdependencies: [\r\n\t\t\t\"subtype\"\r\n\t\t],\r\n\t\tmetaSchema: {\r\n\t\t\ttype: \"array\",\r\n\t\t\titems: {\r\n\t\t\t\ttype: \"object\",\r\n\t\t\t\trequired: [\r\n\t\t\t\t\t\"name\",\r\n\t\t\t\t\t\"description\",\r\n\t\t\t\t\t\"schema\"\r\n\t\t\t\t],\r\n\t\t\t\tproperties: {\r\n\t\t\t\t\tname: {\r\n\t\t\t\t\t\ttype: \"string\",\r\n\t\t\t\t\t\tpattern: \"^\\\\w+$\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\tdescription: {\r\n\t\t\t\t\t\ttype: \"string\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\toptional: {\r\n\t\t\t\t\t\ttype: \"boolean\",\r\n\t\t\t\t\t\tdefault: false\r\n\t\t\t\t\t},\r\n\t\t\t\t\tdeprecated: {\r\n\t\t\t\t\t\ttype: \"boolean\",\r\n\t\t\t\t\t\tdefault: false\r\n\t\t\t\t\t},\r\n\t\t\t\t\texperimental: {\r\n\t\t\t\t\t\ttype: \"boolean\",\r\n\t\t\t\t\t\tdefault: false\r\n\t\t\t\t\t},\r\n\t\t\t\t\tdefault: {\r\n\t\t\t\t\t\t// Any type\r\n\t\t\t\t\t},\r\n\t\t\t\t\tschema: {\r\n\t\t\t\t\t\toneOf: [\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\"$ref\": \"http://json-schema.org/draft-07/schema\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\ttype: \"array\",\r\n\t\t\t\t\t\t\t\titems: {\r\n\t\t\t\t\t\t\t\t\t\"$ref\": \"http://json-schema.org/draft-07/schema\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\treturns: {\r\n\t\tdependencies: [\r\n\t\t\t\"subtype\"\r\n\t\t],\r\n\t\tmetaSchema: {\r\n\t\t\ttype: \"object\",\r\n\t\t\trequired: [\r\n\t\t\t\t\"schema\"\r\n\t\t\t],\r\n\t\t\tproperties: {\r\n\t\t\t\tdescription: {\r\n\t\t\t\t\ttype: \"string\"\r\n\t\t\t\t},\r\n\t\t\t\tschema: {\r\n\t\t\t\t\toneOf: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"$ref\": \"http://json-schema.org/draft-07/schema\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\ttype: \"array\",\r\n\t\t\t\t\t\t\titems: {\r\n\t\t\t\t\t\t\t\t\"$ref\": \"http://json-schema.org/draft-07/schema\"\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n};","const CommonUtils = require('@openeo/js-commons/src/utils.js');\r\n\r\n/**\r\n * Utilities\r\n * \r\n * @class\r\n */\r\nclass Utils extends CommonUtils {\r\n\r\n\t/**\r\n\t * Checks whether a value contains references (from_parameter, from_node).\r\n\t * \r\n\t * Doesn't return references from ProcessGraph objects if checkCallbacks is set to true.\r\n\t * \r\n\t * @param {*} value \r\n\t * @param {boolean} checkProcess - Set to `false` to not check for refs in a process if provided as value.\r\n\t * @param {boolean} checkCallbacks - Set to `true` to also check for refs in callbacks. Only applies if `checkProcess` is true.\r\n\t * @returns {boolean}\r\n\t */\r\n\tstatic containsRef(value, checkProcess = true, checkCallbacks = false) {\r\n\t\tlet type = Utils.getType(value);\r\n\t\tswitch(type) {\r\n\t\t\tcase 'result':\r\n\t\t\tcase 'parameter':\r\n\t\t\t\treturn true;\r\n\t\t\tcase 'callback':\r\n\t\t\t\tif (checkProcess && Utils.containsRef(value.process_graph, checkCallbacks, checkCallbacks)) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'array':\r\n\t\t\tcase 'object':\r\n\t\t\t\tfor(let key in value) {\r\n\t\t\t\t\tif (Utils.containsRef(value[key], checkProcess, checkCallbacks)) {\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns all distinct references (from_parameter, from_node) contained in a value.\r\n\t * \r\n\t * Doesn't return references from ProcessGraph objects if checkCallbacks is set to true.\r\n\t * \r\n\t * @param {*} value \r\n\t * @param {boolean} getFromProcess - Set to `false` to not get refs from a process if provided as value.\r\n\t * @param {boolean} getFromCallbacks - Set to `true` to also include refs in callbacks. Only applies if `getFromProcess` is true.\r\n\t * @returns {boolean}\r\n\t */\r\n\tstatic getRefs(value, getFromProcess = true, getFromCallbacks = false) {\r\n\t\tvar store = [];\r\n\t\tvar type = Utils.getType(value);\r\n\t\tswitch(type) {\r\n\t\t\tcase 'result':\r\n\t\t\tcase 'parameter':\r\n\t\t\t\tstore.push(value);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'callback':\r\n\t\t\t\tif (getFromProcess) {\r\n\t\t\t\t\tstore = store.concat(Utils.getRefs(value.process_graph, getFromCallbacks, getFromCallbacks));\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'array':\r\n\t\t\tcase 'object':\r\n\t\t\t\tfor(var key in value) {\r\n\t\t\t\t\tstore = store.concat(Utils.getRefs(value[key], getFromProcess, getFromCallbacks));\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\treturn Utils.unique(store, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the type of the value.\r\n\t * \r\n\t * Similar to typeof, but gives more details for objects (array, parameter, callback, result, null, object).\r\n\t * \r\n\t * @param {*} value \r\n\t * @returns {string}\r\n\t */\r\n\tstatic getType(value) {\r\n\t\tconst ProcessGraph = require('./processgraph');\r\n\t\tif (typeof value === 'object') {\r\n\t\t\tif (value === null) {\r\n\t\t\t\treturn 'null';\r\n\t\t\t}\r\n\t\t\telse if (Array.isArray(value)) {\r\n\t\t\t\treturn 'array';\r\n\t\t\t}\r\n\t\t\telse if(value.hasOwnProperty(\"process_graph\") || value instanceof ProcessGraph) {\r\n\t\t\t\treturn 'callback';\r\n\t\t\t}\r\n\t\t\telse if(value.hasOwnProperty(\"from_node\")) {\r\n\t\t\t\treturn 'result';\r\n\t\t\t}\r\n\t\t\telse if(value.hasOwnProperty(\"from_parameter\")) {\r\n\t\t\t\treturn 'parameter';\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn 'object';\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn (typeof value);\r\n\t}\r\n\r\n}\r\n\r\nmodule.exports = Utils;","const ErrorList = require('./errorlist');\r\nconst JsonSchemaValidator = require('./jsonschema');\r\nconst ProcessGraphError = require('./error');\r\nconst ProcessGraphNode = require('./node');\r\nconst Utils = require('./utils');\r\nconst ProcessUtils = require('@openeo/js-commons/src/processUtils.js');\r\n\r\n/**\r\n * Process parser, validator and executor.\r\n * \r\n * @class\r\n */\r\nclass ProcessGraph {\r\n\r\n\t// ToDo: Also parse and validate other parts of the process, e.g. id, parameters, etc.\r\n\r\n\tconstructor(process, processRegistry = null, jsonSchemaValidator = null) {\r\n\t\tthis.process = process;\r\n\t\tthis.nodes = {};\r\n\t\tthis.startNodes = [];\r\n\t\tthis.resultNode = null;\r\n\t\tthis.children = [];\r\n\t\tthis.parentNode = null;\r\n\t\tthis.parsed = false;\r\n\t\tthis.validated = false;\r\n\t\tthis.errors = new ErrorList();\r\n\t\tthis.callbackParameters = [];\r\n\t\t// Sub process graphs need to copy these:\r\n\t\tthis.processRegistry = processRegistry;\r\n\t\tthis.jsonSchemaValidator = jsonSchemaValidator;\r\n\t\tthis.arguments = {};\r\n\t\tthis.allowEmptyGraph = false;\r\n\t\tthis.fillProcessParameters = false;\r\n\t\tthis.allowUndefinedParameterRefs = true;\r\n\t}\r\n\r\n\ttoJSON() {\r\n\t\treturn this.process;\r\n\t}\r\n\r\n\tgetJsonSchemaValidator() {\r\n\t\tif (this.jsonSchemaValidator === null) {\r\n\t\t\tthis.jsonSchemaValidator = this.createJsonSchemaValidatorInstance();\r\n\t\t}\r\n\t\tthis.jsonSchemaValidator.setProcessGraphParser(this);\r\n\t\treturn this.jsonSchemaValidator;\r\n\t}\r\n\r\n\tcreateJsonSchemaValidatorInstance() {\r\n\t\treturn new JsonSchemaValidator();\r\n\t}\r\n\r\n\tcreateNodeInstance(nodeObj, id, parent) {\r\n\t\treturn new ProcessGraphNode(nodeObj, id, parent);\r\n\t}\r\n\r\n\tcreateProcessGraphInstance(process) {\r\n\t\tlet pg = new ProcessGraph(process, this.processRegistry, this.getJsonSchemaValidator());\r\n\t\treturn this.copyProcessGraphInstanceProperties(pg);\r\n\t}\r\n\r\n\tcopyProcessGraphInstanceProperties(pg) {\r\n\t\tpg.allowEmptyGraph = this.allowEmptyGraph;\r\n\t\tpg.fillProcessParameters = this.fillProcessParameters;\r\n\t\tpg.allowUndefinedParameterRefs = this.allowUndefinedParameterRefs;\r\n\t\treturn pg;\r\n\t}\r\n\r\n\tcreateChildProcessGraph(process, node, parameterPath = []) {\r\n\t\tvar pg = this.createProcessGraphInstance(process);\r\n\t\tpg.setArguments(this.arguments);\r\n\t\tpg.setParentNode(node);\r\n\t\tif (parameterPath.length > 0) {\r\n\t\t\tlet parameterName = parameterPath.shift();\r\n\t\t\tpg.setCallbackParameters(ProcessUtils.getCallbackParametersForProcess(pg.getParentProcess(), parameterName, parameterPath));\r\n\t\t}\r\n\t\tpg.parse();\r\n\t\tthis.children.push(pg);\r\n\t\treturn pg;\r\n\t}\r\n\r\n\tgetParentNode() {\r\n\t\treturn this.parentNode;\r\n\t}\r\n\r\n\tgetParent() {\r\n\t\tif (this.parentNode) {\r\n\t\t\treturn this.parentNode.getProcessGraph();\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tsetParentNode(parent) {\r\n\t\tif (parent instanceof ProcessGraphNode) {\r\n\t\t\tthis.parentNode = parent;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.parentNode = null;\r\n\t\t}\r\n\t}\r\n\r\n\tisValid() {\r\n\t\treturn this.validated && this.errors.count() === 0;\r\n\t}\r\n\r\n\taddError(error) {\r\n\t\tthis.errors.add(error);\r\n\t}\r\n\r\n\tallowUndefinedParameters(allow = true) {\r\n\t\tif (!allow) {\r\n\t\t\tthis.fillProcessParameters = false;\r\n\t\t}\r\n\t\tthis.allowUndefinedParameterRefs = allow;\r\n\t}\r\n\r\n\tfillUndefinedParameters(fill = true) {\r\n\t\tif (fill) {\r\n\t\t\tthis.allowUndefinedParameterRefs = true;\r\n\t\t}\r\n\t\tthis.fillProcessParameters = fill;\r\n\t}\r\n\r\n\tallowEmpty(allow = true) {\r\n\t\tthis.allowEmptyGraph = allow;\r\n\t}\r\n\r\n\tparse() {\r\n\t\tif (this.parsed) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst makeError = (errorId) => {\r\n\t\t\tif (this.getParentProcessId()) {\r\n\t\t\t\treturn new ProcessGraphError(\r\n\t\t\t\t\terrorId + 'Callback',\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tprocess_id: this.getParentProcessId(),\r\n\t\t\t\t\t\tnode_id: this.parentNode ? this.parentNode.id : 'N/A'\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn new ProcessGraphError(errorId);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif (!Utils.isObject(this.process)) {\r\n\t\t\tthrow makeError('ProcessMissing');\r\n\t\t}\r\n\r\n\t\tif (Utils.size(this.process.process_graph) === 0) {\r\n\t\t\tif (this.allowEmptyGraph && Utils.size(this.process) === 0) {\r\n\t\t\t\tthis.parsed = true;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthrow makeError('ProcessGraphMissing');\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.nodes = Utils.mapObjectValues(this.process.process_graph, (pg, id) => this.createNodeInstance(pg, id, this));\r\n\r\n\t\tfor(let id in this.nodes) {\r\n\t\t\tvar node = this.nodes[id];\r\n\t\t\tif (node.isResultNode) {\r\n\t\t\t\tif (this.resultNode !== null) {\r\n\t\t\t\t\tthrow makeError('MultipleResultNodes');\r\n\t\t\t\t}\r\n\t\t\t\tthis.resultNode = node;\r\n\t\t\t}\r\n\r\n\t\t\tthis.parseNodeArguments(id, node);\r\n\t\t}\r\n\t\tif (this.resultNode === null) {\r\n\t\t\tthrow makeError('ResultNodeMissing');\r\n\t\t}\r\n\r\n\t\t// Find/Cache start nodes, only possible after parseNodeArguments have been called for all nodes\r\n\t\t// Sort nodes to ensure a consistent execution order\r\n\t\tthis.startNodes = Object.values(this.nodes).filter(node => node.isStartNode()).sort((a,b) => a.id.localeCompare(b.id));\r\n\t\tif (this.startNodes.length === 0) {\r\n\t\t\tthrow makeError('StartNodeMissing');\r\n\t\t}\r\n\r\n\t\tthis.parsed = true;\r\n\t}\r\n\r\n\tasync validate(throwOnErrors = true) {\r\n\t\tif (this.validated) {\r\n\t\t\tif (throwOnErrors && this.errors.count() > 0) {\r\n\t\t\t\tthrow this.errors.first();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn this.errors;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.validated = true;\r\n\r\n\t\t// Parse\r\n\t\ttry {\r\n\t\t\tthis.parse();\r\n\t\t} catch (error) {\r\n\t\t\tthis.addError(error);\r\n\t\t\tif (throwOnErrors) {\r\n\t\t\t\tthrow error;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Validate\r\n\t\tawait this.validateNodes(this.getStartNodes(), throwOnErrors);\r\n\t\treturn this.errors;\r\n\t}\r\n\r\n\tasync execute(args = null) {\r\n\t\tthis.allowUndefinedParameters(false);\r\n\t\tthis.setArguments(args);\r\n\t\tawait this.validate();\r\n\t\tthis.reset();\r\n\t\tawait this.executeNodes(this.getStartNodes());\r\n\t\treturn this.getResultNode();\r\n\t}\r\n\r\n\tasync validateNodes(nodes, throwOnErrors, previousNode = null) {\r\n\t\tif (nodes.length === 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tvar promises = nodes.map(async (node) => {\r\n\t\t\t// Validate this node after all dependencies are available\r\n\t\t\tif (!node.solveDependency(previousNode)) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// Get process and validate\r\n\t\t\ttry {\r\n\t\t\t\tawait this.validateNode(node);\r\n\t\t\t} catch (e) {\r\n\t\t\t\tif (e instanceof ErrorList) {\r\n\t\t\t\t\tthis.errors.merge(e);\r\n\t\t\t\t\tif (throwOnErrors) {\r\n\t\t\t\t\t\tthrow e.first();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.addError(e);\r\n\t\t\t\t\tif (throwOnErrors) {\r\n\t\t\t\t\t\tthrow e;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tawait this.validateNodes(node.getNextNodes(), throwOnErrors, node);\r\n\t\t});\r\n\r\n\t\tawait Promise.all(promises);\r\n\t}\r\n\r\n\tasync validateNode(node) {\r\n\t\tvar process = this.getProcess(node);\r\n\t\tif (process) {\r\n\t\t\treturn await process.validate(node);\r\n\t\t}\r\n\t}\r\n\r\n\tasync executeNodes(nodes, previousNode = null) {\r\n\t\tif (nodes.length === 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tvar promises = nodes.map(async (node) => {\r\n\t\t\t// Execute this node after all dependencies are available\r\n\t\t\tif (!node.solveDependency(previousNode)) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tvar result = await this.executeNode(node);\r\n\t\t\tnode.setResult(result);\r\n\r\n\t\t\t// Execute next nodes in chain\r\n\t\t\tawait this.executeNodes(node.getNextNodes(), node);\r\n\r\n\t\t});\r\n\r\n\t\treturn await Promise.all(promises);\r\n\t}\r\n\r\n\tasync executeNode(node) {\r\n\t\tvar process = this.getProcess(node);\r\n\t\treturn await process.execute(node);\r\n\t}\r\n\r\n\tparseNodeArguments(nodeId, node, parameterPath = [], args = undefined) {\r\n\t\tif (typeof args === 'undefined') {\r\n\t\t\targs = node.arguments;\r\n\t\t}\r\n\t\tfor(let argumentName in args) {\r\n\t\t\tlet arg = args[argumentName];\r\n\t\t\t// Make a \"path\" that consists of the parameter name and the keys of arrays/objects, if applicable.\r\n\t\t\tlet path = parameterPath.concat([argumentName]);\r\n\t\t\tlet type = Utils.getType(arg);\r\n\t\t\tswitch(type) {\r\n\t\t\t\tcase 'result':\r\n\t\t\t\t\t// Connect the nodes with each other\r\n\t\t\t\t\tvar prevNode = this.nodes[arg.from_node];\r\n\t\t\t\t\tif (typeof prevNode === 'undefined') {\r\n\t\t\t\t\t\tthrow new ProcessGraphError('ReferencedNodeMissing', {node_id: arg.from_node});\r\n\t\t\t\t\t}\r\n\t\t\t\t\tnode.addPreviousNode(prevNode);\r\n\t\t\t\t\tprevNode.addNextNode(node);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'callback':\r\n\t\t\t\t\t// Create a new process graph for the callback\r\n\t\t\t\t\targs[argumentName] = this.createChildProcessGraph(arg, node, path);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'parameter':\r\n\t\t\t\t\t// If we found a parameter and it's not defined yet (includes that it's not a callback parameter) and fillProcessParameters is set to true: Add it to the process spec.\r\n\t\t\t\t\tif (this.fillProcessParameters && !this.hasParameter(arg.from_parameter)) {\r\n\t\t\t\t\t\tthis.addProcessParameter(arg.from_parameter);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'array':\r\n\t\t\t\tcase 'object':\r\n\t\t\t\t\t// Parse everything hidden in arrays and objects\r\n\t\t\t\t\tthis.parseNodeArguments(nodeId, node, path, arg);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tsetCallbackParameters(parameters) {\r\n\t\tthis.callbackParameters = parameters;\r\n\t}\r\n\r\n\tgetCallbackParameter(name) {\r\n\t\treturn this.getCallbackParameters().find(p => p.name === name) || null;\r\n\t}\r\n\r\n\tgetCallbackParameters() {\t\t\r\n\t\treturn this.callbackParameters;\r\n\t}\r\n\r\n\taddProcessParameter(name, description = '', schema = {}) {\r\n\t\tif (!Array.isArray(this.process.parameters)) {\r\n\t\t\tthis.process.parameters = [];\r\n\t\t}\r\n\t\tthis.process.parameters.push({\r\n\t\t\tname, description, schema\r\n\t\t});\r\n\t}\r\n\r\n\thasParameterDefault(name) {\r\n\t\treturn this.getParameterDefault(name) !== undefined;\r\n\t}\r\n\r\n\tgetParameterDefault(name) {\r\n\t\tlet param = this.getParameter(name);\r\n\t\tif (param !== null) {\r\n\t\t\treturn param.default;\r\n\t\t}\r\n\t\treturn undefined;\r\n\t}\r\n\r\n\thasParameter(name) {\r\n\t\treturn this.getParameter(name) !== null;\r\n\t}\r\n\r\n\tgetProcessParameters(includeUndefined = false) {\r\n\t\tlet parameters = Array.isArray(this.process.parameters) ? this.process.parameters.slice(0) : [];\r\n\t\tif (includeUndefined && !this.fillProcessParameters) {\r\n\t\t\tfor (let key in this.nodes) {\r\n\t\t\t\tlet refs = this.nodes[key].getRefs();\r\n\t\t\t\tfor(let ref of refs) {\r\n\t\t\t\t\tif (ref.from_parameter && !parameters.find(other => other.name === ref.from_parameter)) { // jshint ignore:line\r\n\t\t\t\t\t\tparameters.push({\r\n\t\t\t\t\t\t\tname: ref.from_parameter,\r\n\t\t\t\t\t\t\tdescription: '',\r\n\t\t\t\t\t\t\tschema: {}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn parameters;\r\n\t}\r\n\r\n\tgetProcessParameter(name, includeUndefined = false) {\r\n\t\treturn this.getProcessParameters(includeUndefined).find(p => p.name === name) || null;\r\n\t}\r\n\r\n\tgetParameter(name) {\r\n\t\tlet callbackParam = this.getCallbackParameter(name);\r\n\t\tlet processParam = this.getProcessParameter(name);\r\n\t\tif (callbackParam && processParam) {\r\n\t\t\t// ToDo: Take https://github.com/Open-EO/openeo-api/issues/332 into account\r\n\t\t\treturn Object.assign({}, callbackParam, processParam);\r\n\t\t}\r\n\t\telse if (callbackParam) {\r\n\t\t\treturn callbackParam;\r\n\t\t}\r\n\t\telse if (processParam) {\r\n\t\t\treturn processParam;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tsetArguments(args) {\r\n\t\tif (Utils.isObject(args)) {\r\n\t\t\tObject.assign(this.arguments, args);\r\n\t\t}\r\n\t}\r\n\r\n\thasArgument(name) {\r\n\t\treturn typeof this.arguments[name] !== 'undefined';\r\n\t}\r\n\r\n\tgetArgument(name) {\r\n\t\treturn this.arguments[name];\r\n\t}\r\n\r\n\treset() {\r\n\t\tfor(var id in this.nodes) {\r\n\t\t\tthis.nodes[id].reset();\r\n\t\t}\r\n\t\tthis.children.forEach(child => child.reset());\r\n\t}\r\n\r\n\tgetResultNode() {\r\n\t\treturn this.resultNode;\r\n\t}\r\n\r\n\tgetStartNodes() {\r\n\t\treturn this.startNodes;\r\n\t}\r\n\r\n\tgetStartNodeIds() {\r\n\t\treturn this.startNodes.map(node => node.id);\r\n\t}\r\n\r\n\tgetNode(nodeId) {\r\n\t\treturn nodeId in this.nodes ? this.nodes[nodeId] : null;\r\n\t}\r\n\r\n\tgetNodeCount() {\r\n\t\treturn Utils.size(this.nodes);\r\n\t}\r\n\r\n\tgetNodes() {\r\n\t\treturn this.nodes;\r\n\t}\r\n\r\n\tgetErrors() {\r\n\t\treturn this.errors;\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the process for the given process ID or node.\r\n\t * \r\n\t * @param {ProcessGraphNode|string} id \r\n\t * @returns {object|null}\r\n\t * @throws {ProcessGraphError} - ProcessUnsupported\r\n\t */\r\n\tgetProcess(id) {\r\n\t\tif (this.processRegistry === null) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tif (id instanceof ProcessGraphNode) {\r\n\t\t\tid = id.process_id;\r\n\t\t}\r\n\t\tvar process = this.processRegistry.get(id);\r\n\t\tif (process === null) {\r\n\t\t\tthrow new ProcessGraphError('ProcessUnsupported', {process: id});\r\n\t\t}\r\n\t\treturn process;\r\n\t}\r\n\r\n\tgetParentProcessId() {\r\n\t\tif(this.getParentNode()) {\r\n\t\t\treturn this.getParentNode().process_id;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tgetParentProcess() {\r\n\t\tif (this.processRegistry === null) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\treturn this.processRegistry.get(this.getParentProcessId());\r\n\t}\r\n\r\n}\r\n\r\nmodule.exports = ProcessGraph;","const Utils = require('./utils');\r\n\r\nconst MESSAGES = {\r\n\t\"MultipleResultNodes\": \"Multiple result nodes specified for process graph.\",\r\n\t\"StartNodeMissing\": \"No start nodes found for process graph.\",\r\n\t\"ResultNodeMissing\": \"No result node found for process graph.\",\r\n\t\"MultipleResultNodesCallback\": \"Multiple result nodes specified for the callback in the process '{process_id}' (node: '{node_id}').\",\r\n\t\"StartNodeMissingCallback\": \"No start nodes found for the callback in the process '{process_id}' (node: '{node_id}')'.\",\r\n\t\"ResultNodeMissingCallback\": \"No result node found for the callback in the process '{process_id}' (node: '{node_id}').\",\r\n\t\"ReferencedNodeMissing\": \"Referenced node '{node_id}' doesn't exist.\",\r\n\t\"NodeIdInvalid\": \"Invalid node id specified in process graph.\",\r\n\t\"NodeInvalid\": \"Process graph node '{node_id}' is not a valid object.\",\r\n\t\"ProcessIdMissing\": \"Process graph node '{node_id}' doesn't contain a process id.\",\r\n\t\"ProcessGraphParameterMissing\": \"Invalid parameter '{argument}' requested in the process '{process_id}' (node: '{node_id}').\",\r\n\t\"ProcessUnsupported\": \"Process '{process}' is not supported.\",\r\n\t\"ProcessArgumentUnsupported\": \"Process '{process}' does not support the following arguments: {arguments}\",\r\n\t\"ProcessArgumentRequired\": \"Process '{process}' requires argument '{argument}'.\",\r\n\t\"ProcessArgumentInvalid\": \"The argument '{argument}' in process '{process}' is invalid: {reason}\",\r\n\t\"ProcessGraphMissing\": \"No process graph specified\",\r\n\t\"ProcessMissing\": \"No process specified\"\r\n};\r\n\r\n/**\r\n * An error class for this library.\r\n * \r\n * @class\r\n */\r\nclass ProcessGraphError extends Error {\r\n\r\n\tconstructor(codeOrMsg, variables = {}) {\r\n\t\tsuper();\r\n\t\tthis.variables = variables;\r\n\t\tif (typeof MESSAGES[codeOrMsg] === 'string') {\r\n\t\t\tthis.code = codeOrMsg;\r\n\t\t\tthis.message = Utils.replacePlaceholders(MESSAGES[codeOrMsg], variables);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.code = codeOrMsg.replace(/[^\\w\\d]+/g, '');\r\n\t\t\tthis.message = codeOrMsg;\r\n\t\t}\r\n\t}\r\n\r\n\ttoJSON() {\r\n\t\treturn {\r\n\t\t\tcode: this.code,\r\n\t\t\tmessage: this.message\r\n\t\t};\r\n\t}\r\n\r\n}\r\n\r\nmodule.exports = ProcessGraphError;","/**\r\n * A list of errors.\r\n * \r\n * @class\r\n */\r\nclass ErrorList {\r\n\r\n\tconstructor() {\r\n\t\tthis.errors = [];\r\n\t}\r\n\r\n\tfirst() {\r\n\t\treturn this.errors[0] || null;\r\n\t}\r\n\r\n\tlast() {\r\n\t\treturn this.errors[this.errors.length-1] || null;\r\n\t}\r\n\r\n\tmerge(errorList) {\r\n\t\tthis.errors = this.errors.concat(errorList.getAll());\r\n\t}\r\n\t\r\n\tadd(error) {\r\n\t\tthis.errors.push(error);\r\n\t}\r\n\r\n\tcount() {\r\n\t\treturn this.errors.length;\r\n\t}\r\n\r\n\ttoJSON() {\r\n\t\treturn this.errors.map(e => {\r\n\t\t\tif (typeof e.toJSON === 'function') {\r\n\t\t\t\treturn e.toJSON();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tcode: 'InternalError',\r\n\t\t\t\t\tmessage: e.message\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tgetMessage() {\r\n\t\tvar msg = '';\r\n\t\tfor (var i in this.errors) {\r\n\t\t\tmsg += (parseInt(i, 10)+1) + \". \" + this.errors[i].message + \"\\r\\n\";\r\n\t\t}\r\n\t\treturn msg.trim();\r\n\t}\r\n\r\n\tgetAll() {\r\n\t\treturn this.errors;\r\n\t}\r\n\r\n}\r\n\r\nmodule.exports = ErrorList;","const ProcessGraphError = require('./error');\r\nconst Utils = require('./utils');\r\n\r\n/**\r\n * A Process graph node.\r\n * \r\n * @class\r\n */\r\nclass ProcessGraphNode {\r\n\r\n\tconstructor(node, id, parent = null) {\r\n\t\tif (typeof id !== 'string' || id.length === 0) {\r\n\t\t\tthrow new ProcessGraphError('NodeIdInvalid');\r\n\t\t}\r\n\t\tif (!Utils.isObject(node)) {\r\n\t\t\tthrow new ProcessGraphError('NodeInvalid', {node_id: id});\r\n\t\t}\r\n\t\tif (typeof node.process_id !== 'string') {\r\n\t\t\tthrow new ProcessGraphError('ProcessIdMissing', {node_id: id});\r\n\t\t}\r\n\r\n\t\tthis.id = id;\r\n\t\tthis.processGraph = parent;\r\n\t\tthis.source = node;\r\n\t\tthis.process_id = node.process_id;\r\n\t\tthis.arguments = Utils.isObject(node.arguments) ? Utils.deepClone(node.arguments) : {};\r\n\t\tthis.description = node.description || null;\r\n\t\tthis.isResultNode = node.result || false;\r\n\t\tthis.expectsFrom = []; // From which node do we expect results from\r\n\t\tthis.receivedFrom = []; // From which node have received results from so far\r\n\t\tthis.passesTo = [];\r\n\t\tthis.computedResult = undefined;\r\n\t}\r\n\r\n\ttoJSON() {\r\n\t\tlet args = Utils.mapObjectValues(this.arguments, arg => Utils.isObject(arg) && typeof arg.toJSON === 'function' ? arg.toJSON() : arg);\r\n\t\treturn Object.assign({}, this.source, {\r\n\t\t\tprocess_id: this.process_id,\r\n\t\t\tdescription: this.description,\r\n\t\t\targuments: args,\r\n\t\t\tresult: this.isResultNode\r\n\t\t});\r\n\t}\r\n\r\n\tgetProcessGraph() {\r\n\t\treturn this.processGraph;\r\n\t}\r\n\r\n\tgetParent() {\r\n\t\tif (this.processGraph !== null) {\r\n\t\t\treturn this.processGraph.getParentNode();\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tgetArgumentNames() {\r\n\t\treturn Object.keys(this.arguments);\r\n\t}\r\n\r\n\thasArgument(name) {\r\n\t\treturn typeof this.arguments[name] !== 'undefined';\r\n\t}\r\n\r\n\tgetArgumentType(name) {\r\n\t\treturn Utils.getType(this.getRawArgument(name));\r\n\t}\r\n\r\n\tgetRawArgument(name) {\r\n\t\treturn Utils.isObject(this.source.arguments) ? this.source.arguments[name] : undefined;\r\n\t}\r\n\r\n\tgetParsedArgument(name) {\r\n\t\treturn this.arguments[name];\r\n\t}\r\n\r\n\tgetArgument(name, defaultValue = undefined) {\r\n\t\tif (typeof this.arguments[name] === 'undefined') {\r\n\t\t\treturn defaultValue;\r\n\t\t}\r\n\t\treturn this.evaluateArgument(this.arguments[name]);\r\n\t}\r\n\r\n\tgetArgumentRefs(name) {\r\n\t\treturn Utils.getRefs(this.getRawArgument(name), false);\r\n\t}\r\n\r\n\tgetRefs() {\r\n\t\treturn Utils.getRefs(this.source.arguments, false);\r\n\t}\r\n\r\n\tgetProcessGraphParameterValue(name) {\r\n\t\t// 1. Check local parameter, then check parents\r\n\t\t// 2. Check parents\r\n\t\t// 3. Try to get default value\r\n\t\t// 4. Fail if no value is available\r\n\t\tlet defaultValue;\r\n\t\tlet pg = this.processGraph;\r\n\t\tdo {\r\n\t\t\tif (pg.hasArgument(name)) {\r\n\t\t\t\treturn pg.getArgument(name);\r\n\t\t\t}\r\n\t\t\tif (pg.hasParameterDefault(name)) {\r\n\t\t\t\tdefaultValue = pg.getParameterDefault(name);\r\n\t\t\t}\r\n\t\t\tpg = pg.getParent();\r\n\t\t} while (pg !== null);\r\n\r\n\t\tif (typeof defaultValue !== 'undefined') {\r\n\t\t\treturn defaultValue;\r\n\t\t}\r\n\r\n\t\tif (!this.processGraph.allowUndefinedParameterRefs) {\r\n\t\t\tthrow new ProcessGraphError('ProcessGraphParameterMissing', {\r\n\t\t\t\targument: name,\r\n\t\t\t\tnode_id: this.id,\r\n\t\t\t\tprocess_id: this.process_id\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tevaluateArgument(arg) {\r\n\t\tvar type = Utils.getType(arg);\r\n\t\tswitch(type) {\r\n\t\t\tcase 'result':\r\n\t\t\t\treturn this.processGraph.getNode(arg.from_node).getResult();\r\n\t\t\tcase 'callback':\r\n\t\t\t\treturn arg;\r\n\t\t\tcase 'parameter':\r\n\t\t\t\treturn this.getProcessGraphParameterValue(arg.from_parameter);\r\n\t\t\tcase 'array':\r\n\t\t\tcase 'object':\r\n\t\t\t\tlet copy = type === 'array' ? [] : {};\r\n\t\t\t\tfor(var i in arg) {\r\n\t\t\t\t\tcopy[i] = this.evaluateArgument(arg[i]);\r\n\t\t\t\t}\r\n\t\t\t\treturn copy;\r\n\t\t\tdefault:\r\n\t\t\t\treturn arg;\r\n\t\t}\r\n\t}\r\n\r\n\tisStartNode() {\r\n\t\treturn (this.expectsFrom.length === 0);\r\n\t}\r\n\r\n\taddPreviousNode(node) {\r\n\t\tif (!this.expectsFrom.find(other => other.id === node.id)) {\r\n\t\t\tthis.expectsFrom.push(node);\r\n\t\t}\r\n\t}\r\n\r\n\tgetPreviousNodes() {\r\n\t\t// Sort nodes to ensure a consistent execution order\r\n\t\treturn this.expectsFrom.sort((a,b) => a.id.localeCompare(b.id));\r\n\t}\r\n\r\n\taddNextNode(node) {\r\n\t\tif (!this.passesTo.find(other => other.id === node.id)) {\r\n\t\t\tthis.passesTo.push(node);\r\n\t\t}\r\n\t}\r\n\r\n\tgetNextNodes() {\r\n\t\t// Sort nodes to ensure a consistent execution order\r\n\t\treturn this.passesTo.sort((a,b) => a.id.localeCompare(b.id));\r\n\t}\r\n\r\n\treset() {\r\n\t\tthis.computedResult = undefined;\r\n\t\tthis.receivedFrom = [];\r\n\t}\r\n\r\n\tgetDescription() {\r\n\t\treturn this.description;\r\n\t}\r\n\r\n\tsetDescription(description) {\r\n\t\tif (typeof description === 'string') {\r\n\t\t\tthis.description = description;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.description = null;\r\n\t\t}\r\n\t}\r\n\r\n\tsetResult(result) {\r\n\t\tthis.computedResult = result;\r\n\t}\r\n\r\n\tgetResult() {\r\n\t\treturn this.computedResult;\r\n\t}\r\n\r\n\tsolveDependency(dependencyNode) {\r\n\t\tif (dependencyNode !== null && this.expectsFrom.includes(dependencyNode)) {\r\n\t\t\tthis.receivedFrom.push(dependencyNode);\r\n\t\t}\r\n\t\treturn (this.expectsFrom.length === this.receivedFrom.length); // all dependencies solved?\r\n\t}\r\n\r\n}\r\n\r\nmodule.exports = ProcessGraphNode;","const BaseProcess = require('./process');\r\nconst ErrorList = require('./errorlist');\r\nconst JsonSchemaValidator = require('./jsonschema');\r\nconst ProcessGraph = require('./processgraph');\r\nconst ProcessGraphError = require('./error');\r\nconst ProcessGraphNode = require('./node');\r\nconst ProcessRegistry = require('./registry');\r\nconst Utils = require('./utils');\r\n\r\nmodule.exports = {\r\n\tBaseProcess,\r\n\tErrorList,\r\n\tJsonSchemaValidator,\r\n\tProcessGraph,\r\n\tProcessGraphError,\r\n\tProcessGraphNode,\r\n\tProcessRegistry,\r\n\tUtils\r\n};","const JsonSchemaValidator = require('./jsonschema');\r\nconst ProcessGraphError = require('./error');\r\nconst ProcessUtils = require('@openeo/js-commons/src/processUtils');\r\nconst Utils = require('./utils');\r\n\r\n/**\r\n * Base Process class\r\n * \r\n * @class\r\n */\r\nclass BaseProcess {\r\n\r\n\tconstructor(spec) {\r\n\t\tthis.spec = spec; // Keep original specification data\r\n\r\n\t\t// Make properties easily accessible \r\n\t\tObject.assign(this, spec);\r\n\r\n\t\tif (typeof this.id !== 'string') {\r\n\t\t\tthrow new Error(\"Invalid process specified, no id given.\");\r\n\t\t}\r\n\t\tif (!Array.isArray(this.parameters)) {\r\n\t\t\tthis.parameters = [];\r\n\t\t}\r\n\t}\r\n\r\n\ttoJSON() {\r\n\t\treturn this.spec;\r\n\t}\r\n\r\n\tasync validate(node) {\r\n\t\t// Check for arguments we don't support and throw error\r\n\t\tlet unsupportedArgs = node.getArgumentNames().filter(name => this.parameters.findIndex(p => p.name === name) === -1);\r\n\t\tif (unsupportedArgs.length > 0) {\r\n\t\t\tthrow new ProcessGraphError('ProcessArgumentUnsupported', {\r\n\t\t\t\tprocess: this.id,\r\n\t\t\t\targuments: unsupportedArgs\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t// Validate against JSON Schema\r\n\t\tfor(let key in this.parameters) {\r\n\t\t\tlet param = this.parameters[key];\r\n\r\n\t\t\tif (!node.hasArgument(param.name)) {\r\n\t\t\t\tif (!param.optional) {\r\n\t\t\t\t\tthrow new ProcessGraphError('ProcessArgumentRequired', {\r\n\t\t\t\t\t\tprocess: this.id,\r\n\t\t\t\t\t\targument: param.name\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tlet arg = node.getParsedArgument(param.name);\r\n\t\t\tlet rawArg = node.getRawArgument(param.name);\r\n\t\t\tawait this.validateArgument(arg, rawArg, node, param);\r\n\t\t}\r\n\t}\r\n\r\n\tasync validateArgument(arg, rawArg, node, param, path = null) {\r\n\t\tif (!path) {\r\n\t\t\tpath = param.name;\r\n\t\t}\r\n\t\tlet argType = Utils.getType(arg);\r\n\t\tlet pg = node.getProcessGraph();\r\n\t\tswitch(argType) {\r\n\t\t\tcase 'parameter':\r\n\t\t\t\t// Validate callback parameters (no value available yet)\r\n\t\t\t\tlet callbackParam = pg.getCallbackParameter(arg.from_parameter);\r\n\t\t\t\tif (callbackParam) {\r\n\t\t\t\t\tif (!JsonSchemaValidator.isSchemaCompatible(param.schema, callbackParam.schema)) {\r\n\t\t\t\t\t\tthrow new ProcessGraphError('ProcessArgumentInvalid', {\r\n\t\t\t\t\t\t\tprocess: this.id,\r\n\t\t\t\t\t\t\targument: path,\r\n\t\t\t\t\t\t\treason: \"Schema for parameter '\" + arg.from_parameter + \"' not compatible with reference\"\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Validate all other parameters (value must be available if allowUndefinedParameterRefs is false)\r\n\t\t\t\tlet value = node.getProcessGraphParameterValue(arg.from_parameter);\r\n\t\t\t\tif (typeof value === 'undefined' && !pg.allowUndefinedParameterRefs) {\r\n\t\t\t\t\tthrow new ProcessGraphError('ProcessGraphParameterMissing', {\r\n\t\t\t\t\t\targument: arg.from_parameter,\r\n\t\t\t\t\t\tnode_id: node.id,\r\n\t\t\t\t\t\tprocess_id: node.process_id\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet parameter = pg.getProcessParameter(arg.from_parameter);\r\n\t\t\t\tif (Utils.isObject(parameter) && parameter.schema) {\r\n\t\t\t\t\tif (typeof value !== 'undefined') {\r\n\t\t\t\t\t\tawait this.validateArgument(value, rawArg, node, parameter, path);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (!JsonSchemaValidator.isSchemaCompatible(param.schema, parameter.schema)) {\r\n\t\t\t\t\t\tthrow new ProcessGraphError('ProcessArgumentInvalid', {\r\n\t\t\t\t\t\t\tprocess: this.id,\r\n\t\t\t\t\t\t\targument: path,\r\n\t\t\t\t\t\t\treason: \"Schema for parameter '\" + arg.from_parameter + \"' not compatible\"\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// else: Parameter not available, everything is valid\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'result':\r\n\t\t\t\tlet resultNode = pg.getNode(arg.from_node);\r\n\t\t\t\tlet process = pg.getProcess(resultNode);\r\n\t\t\t\tif (!JsonSchemaValidator.isSchemaCompatible(param.schema, process.returns.schema)) {\r\n\t\t\t\t\tthrow new ProcessGraphError('ProcessArgumentInvalid', {\r\n\t\t\t\t\t\tprocess: this.id,\r\n\t\t\t\t\t\targument: path,\r\n\t\t\t\t\t\treason: \"Schema for result '\" + arg.from_node + \"' not compatible\"\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'array':\r\n\t\t\tcase 'object':\r\n\t\t\t\tlet schemas = ProcessUtils.normalizeJsonSchema(param.schema).filter(schema => ['array', 'object'].includes(schema.type));\r\n\t\t\t\t// Check if it is expected to be a process. If yes, do normal validation. Handles the issue discussed in https://github.com/Open-EO/openeo-js-processgraphs/issues/4\r\n\t\t\t\tlet isProcessGraphSchema = (schemas.length === 1 && schemas[0].subtype === 'process-graph');\r\n\t\t\t\tif (Utils.containsRef(rawArg) && !isProcessGraphSchema) {\r\n\t\t\t\t\t// This tries to at least be compliant to one of the element schemas\r\n\t\t\t\t\t// It's better than validating nothing, but it's still not 100% correct\r\n\t\t\t\t\tfor(var key in arg) {\r\n\t\t\t\t\t\tlet elementSchema = schemas.map(schema =>  ProcessUtils.getElementJsonSchema(schema, key)).filter(schema => Object.keys(schema).length); // jshint ignore:line\r\n\t\t\t\t\t\tif (elementSchema.length > 0) {\r\n\t\t\t\t\t\t\tlet validated = 0;\r\n\t\t\t\t\t\t\tlet lastError = null;\r\n\t\t\t\t\t\t\tfor(let schema of elementSchema) {\r\n\t\t\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\t\t\t// ToDo: Check against JSON schema required property\r\n\t\t\t\t\t\t\t\t\tawait this.validateArgument(arg[key], rawArg[key], node, {schema}, path + '/' + key);\r\n\t\t\t\t\t\t\t\t\tvalidated++;\r\n\t\t\t\t\t\t\t\t} catch (error) {\r\n\t\t\t\t\t\t\t\t\tlastError = error;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (validated === 0 && lastError) {\r\n\t\t\t\t\t\t\t\tthrow lastError;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// Use default behavior below, so no break; needed\r\n\t\t\t\t} // jshint ignore:line\r\n\t\t\tdefault:\r\n\t\t\t\tlet validator = node.getProcessGraph().getJsonSchemaValidator();\r\n\t\t\t\t// Validate against JSON schema\r\n\t\t\t\tlet errors = await validator.validateValue(arg, param.schema);\r\n\t\t\t\tif (errors.length > 0) {\r\n\t\t\t\t\tthrow new ProcessGraphError('ProcessArgumentInvalid', {\r\n\t\t\t\t\t\tprocess: this.id,\r\n\t\t\t\t\t\targument: path,\r\n\t\t\t\t\t\treason: errors\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/* istanbul ignore next */\r\n\tasync execute(/*node*/) {\r\n\t\tthrow \"execute not implemented yet\";\r\n\t}\r\n\r\n\t/* istanbul ignore next */\r\n\ttest() {\r\n\t\t// Run the tests from the examples\r\n\t\tthrow \"test not implemented yet\";\r\n\t}\r\n\r\n}\r\n\r\nmodule.exports =  BaseProcess;","const Process = require('./process');\r\nconst Utils = require('./utils');\r\n\r\n/**\r\n * Central registry for processes.\r\n * \r\n * @class\r\n */\r\nclass ProcessRegistry {\r\n\r\n\tconstructor(processes = []) {\r\n\t\t// Keys added to this object must be lowercase!\r\n\t\tthis.processes = {};\r\n\t\tthis.addAll(processes);\r\n\t}\r\n\r\n\taddAll(processes) {\r\n\t\tfor(var i in processes) {\r\n\t\t\tthis.add(processes[i]);\r\n\t\t}\r\n\t}\r\n\r\n\tadd(process) {\r\n\t\tif (!Utils.isObject(process)) {\r\n\t\t\tthrow new Error(\"Invalid process; not an object.\");\r\n\t\t}\r\n\r\n\t\tlet isImpl = process instanceof Process;\r\n\t\tif (!isImpl && typeof process.toJSON === 'function') {\r\n\t\t\tvar json = process.toJSON();\r\n\t\t\tif (Utils.isObject(json)) {\r\n\t\t\t\tprocess = json;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (typeof process.id !== 'string') {\r\n\t\t\tthrow new Error(\"Invalid process; no id specified.\");\r\n\t\t}\r\n\t\tthis.processes[process.id.toLowerCase()] = isImpl ? process : new Process(process);\r\n\t}\r\n\r\n\tcount() {\r\n\t\treturn Utils.size(this.processes);\r\n\t}\r\n\r\n\tall() {\r\n\t\treturn Object.values(this.processes);\r\n\t}\r\n\t\r\n\tget(id) {\r\n\t\tif (typeof id === 'string') {\r\n\t\t\tvar pid = id.toLowerCase();\r\n\t\t\tif (typeof this.processes[pid] !== 'undefined') {\r\n\t\t\t\treturn this.processes[pid];\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\ttoJSON() {\r\n\t\treturn Object.values(this.processes).map(impl => impl.toJSON());\r\n\t}\r\n\r\n}\r\n\r\nmodule.exports = ProcessRegistry;","const Ajv = require('ajv');\r\nconst Utils = require('./utils');\r\nconst ProcessUtils = require('@openeo/js-commons/src/processUtils.js');\r\nconst keywords = require('./keywords');\r\n\r\nvar geoJsonSchema = require(\"../assets/GeoJSON.json\");\r\nvar subtypeSchemas = require(\"../assets/subtype-schemas.json\");\r\n\r\n/**\r\n * JSON Schema Validator.\r\n * \r\n * @class\r\n */\r\nclass JsonSchemaValidator {\r\n\r\n\tconstructor() {\r\n\t\tthis.ajv = new Ajv({\r\n\t\t\tschemaId: 'auto',\r\n\t\t\tformat: 'full',\r\n\t\t\taddUsedSchema: false\r\n\t\t});\r\n\t\t// Add subtype + GeoJSON schemas\r\n\t\tthis.ajv.addSchema(geoJsonSchema);\r\n\t\t// Add openEO specific keywords\r\n\t\tthis.ajv.addKeyword('parameters', Object.assign(keywords.parameters, {\r\n\t\t\tvalid: true,\r\n\t\t\terrors: true\r\n\t\t}));\r\n\t\tthis.ajv.addKeyword('returns', Object.assign(keywords.returns, {\r\n\t\t\tvalid: true,\r\n\t\t\terrors: true\r\n\t\t}));\r\n\t\tthis.ajv.addKeyword('subtype', Object.assign(keywords.subtype, {\r\n\t\t\tvalidate: async (subtype, data, schema) => await this.validateSubtype(subtype, data, schema),\r\n\t\t\tasync: true,\r\n\t\t\terrors: true\r\n\t\t}));\r\n\r\n\t\tthis.collections = null;\r\n\t\tthis.epsgCodes = null;\r\n\t\tthis.fileFormats = {\r\n\t\t\tinput: null,\r\n\t\t\toutput: null\r\n\t\t};\r\n\t\tthis.processRegistry = null;\r\n\t\tthis.udfRuntimes = null;\r\n\t}\r\n\r\n\tgetFunctionName(subtype) {\r\n\t\t// compute the function name (camelCase), e.g. for `band-name` it will be `validateBandName`\r\n\t\treturn \"validate\" + subtype.replace(/(^|\\-)(\\w)/g, (a, b, char) => char.toUpperCase());\r\n\t}\r\n\r\n\tmakeSchema(schema, $async = false) {\r\n\t\tschema = Utils.deepClone(schema);\r\n\r\n\t\t// Make array of schemas to a anyOf schema\r\n\t\tif (Array.isArray(schema)) {\r\n\t\t\tschema = {\r\n\t\t\t\tanyOf: schema\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\t// Set applicable JSON Schema draft version if not already set\r\n\t\tif (typeof schema.$schema === 'undefined') {\r\n\t\t\tschema.$schema = \"http://json-schema.org/draft-07/schema#\";\r\n\t\t}\r\n\r\n\t\t// Set async execution\r\n\t\tif ($async) {\r\n\t\t\tschema.$async = true;\r\n\t\t\tif (Utils.isObject(schema.definitions)) {\r\n\t\t\t\tfor(let key in schema.definitions) {\r\n\t\t\t\t\tschema.definitions[key].$async = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn schema;\r\n\t}\r\n\r\n\tasync validateValue(value, schema) {\r\n\t\tschema = this.makeSchema(schema, true);\r\n\r\n\t\ttry {\r\n\t\t\tawait this.ajv.validate(schema, value);\r\n\t\t\treturn [];\r\n\t\t} catch (e) {\r\n\t\t\tif (Array.isArray(e.errors)) {\r\n\t\t\t\treturn e.errors.map(e => e.message);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthrow e;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tasync validateSubtype(subtype, data, schema) {\r\n\t\tif (typeof subtypeSchemas.definitions[subtype] !== 'undefined') {\r\n\t\t\tschema = this.makeSchema(subtypeSchemas, true);\r\n\t\t\t// Make the schema for this subtype the default schema to be checked\r\n\t\t\tschema = Object.assign({}, subtypeSchemas.definitions[subtype], schema);\r\n\t\t\tif (subtype === 'process-graph') {\r\n\t\t\t\t// Special case: all validation will be done in validateProcessGraph()\r\n\t\t\t\tdelete schema.required;\r\n\t\t\t\tdelete schema.properties;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tschema = this.makeSchema(schema, true);\r\n\t\t}\r\n\r\n\t\t// Remove subtype to avoid recursion\r\n\t\tdelete schema.subtype;\r\n\r\n\t\tlet validated = await this.ajv.validate(schema, data);\r\n\t\tlet funcName = this.getFunctionName(subtype);\r\n\t\tif (validated && typeof this[funcName] === 'function') {\r\n\t\t\treturn await this[funcName](data);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn validated;\r\n\t\t}\r\n\t}\r\n\r\n\tsetUdfRuntimes(udfRuntimes) {\r\n\t\tif (!Utils.isObject(udfRuntimes)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis.udfRuntimes = udfRuntimes;\r\n\t}\r\n\r\n\tsetCollections(collections) {\r\n\t\tif (!Array.isArray(collections)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis.collections = [];\r\n\t\tfor(let c of collections) {\r\n\t\t\tif (Utils.isObject(c) && typeof c.id === 'string') {\r\n\t\t\t\tthis.collections.push(c.id);\r\n\t\t\t}\r\n\t\t\telse if (typeof c === 'string') {\r\n\t\t\t\tthis.collections.push(c);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Expects API compatible file formats (see GET /file_formats).\r\n\tsetFileFormats(fileFormats) {\r\n\t\tif (!Utils.isObject(fileFormats)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tfor(let io of ['input', 'output']) {\r\n\t\t\tthis.fileFormats[io] = {};\r\n\t\t\tif (!Utils.isObject(fileFormats[io])) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tfor (let key in fileFormats[io]) {\r\n\t\t\t\tthis.fileFormats[io][key.toUpperCase()] = fileFormats[io][key];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tsetEpsgCodes(epsgCodes) {\r\n\t\tif (Array.isArray(epsgCodes)) {\r\n\t\t\tthis.epsgCodes = epsgCodes.map(v => parseInt(v, 10));\r\n\t\t}\r\n\t}\r\n\r\n\tasync validateCollectionId(data) {\r\n\t\tif (Array.isArray(this.collections) && !this.collections.find(c => c === data)) {\r\n\t\t\tthrow new Ajv.ValidationError([{\r\n\t\t\t\tmessage: \"Collection with id '\" + data + \"' doesn't exist.\"\r\n\t\t\t}]);\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\tasync validateUdfRuntime(data) {\r\n\t\tif (Utils.isObject(this.udfRuntimes) && !(data in this.udfRuntimes)) {\r\n\t\t\tthrow new Ajv.ValidationError([{\r\n\t\t\t\tmessage: \"UDF runtime '\" + data + \"' is not supported.\"\r\n\t\t\t}]);\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\tasync validateEpsgCode(data) {\r\n\t\tif (Array.isArray(this.epsgCodes)) {\r\n\t\t\tif (this.epsgCodes.includes(data)) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Rough check for valid numbers as we don't want to maintain a full epsg code list in this repo.\r\n\t\telse if (data >= 2000) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tthrow new Ajv.ValidationError([{\r\n\t\t\tmessage: \"Invalid EPSG code '\" + data + \"' specified.\"\r\n\t\t}]);\r\n\t}\r\n\t\r\n\tasync validateInputFormat(data) {\r\n\t\tif (Utils.isObject(this.fileFormats.input) && !(data.toUpperCase() in this.fileFormats.input)) {\r\n\t\t\tthrow new Ajv.ValidationError([{\r\n\t\t\t\tmessage: \"Input format  '\" + data + \"' not supported.\"\r\n\t\t\t}]);\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tasync validateOutputFormat(data) {\r\n\t\tif (Utils.isObject(this.fileFormats.output) && !(data.toUpperCase() in this.fileFormats.output)) {\r\n\t\t\tthrow new Ajv.ValidationError([{\r\n\t\t\t\tmessage: \"Output format  '\" + data + \"' not supported.\"\r\n\t\t\t}]);\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\tasync validateProjDefinition(data) {\r\n\t\t// To be overridden by end-user application, just doing a very basic check here.\r\n\t\tif (!data.toLowerCase().includes(\"+proj\")) {\r\n\t\t\tthrow new Ajv.ValidationError([{\r\n\t\t\t\tmessage: \"Invalid PROJ string specified (doesn't contain '+proj').\"\r\n\t\t\t}]);\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\tasync validateWkt2Definition(data) {\r\n\t\t// To be overridden by end-user application, just doing a very basic check here based on code ported over from proj4js\r\n\t\tvar codeWords = [\r\n\t\t\t'BOUNDCRS',\r\n\t\t\t'COMPOUNDCRS',\r\n\t\t\t'ENGCRS', 'ENGINEERINGCRS',\r\n\t\t\t'GEODCRS', 'GEODETICCRS',\r\n\t\t\t'GEOGCRS', 'GEOGRAPHICCRS',\r\n\t\t\t'PARAMETRICCRS',\r\n\t\t\t'PROJCRS', 'PROJECTEDCRS',\r\n\t\t\t'TIMECRS',\r\n\t\t\t'VERTCRS', 'VERTICALCRS'\r\n\t\t];\r\n\t\tdata = data.toUpperCase();\r\n\t\tif (!codeWords.some(word => data.indexOf(word) !== -1)) {\r\n\t\t\tthrow new Ajv.ValidationError([{\r\n\t\t\t\tmessage: \"Invalid WKT2 string specified.\"\r\n\t\t\t}]);\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\tasync validateTemporalInterval(data) {\r\n\t\tif (data[0] === null && data[1] === null) {\r\n\t\t\tthrow new Ajv.ValidationError([{\r\n\t\t\t\tmessage: \"Temporal interval must not be open on both ends.\"\r\n\t\t\t}]);\r\n\t\t}\r\n\t\telse if (data[0] !== null && data[1] !== null) {\r\n\t\t\tlet date1 = new Date(data[0]);\r\n\t\t\tlet date2 = new Date(data[1]);\r\n\t\t\tif (date2.getTime() < date1.getTime()) {\r\n\t\t\t\tthrow new Ajv.ValidationError([{\r\n\t\t\t\t\tmessage: \"The second timestamp can't be before the first timestamp.\"\r\n\t\t\t\t}]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tasync validateTemporalIntervals(data) {\r\n\t\tfor(let interval of data) {\r\n\t\t\t// throws if invalid\r\n\t\t\tawait this.validateTemporalInterval(interval);\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\tsetProcessGraphParser(processGraph) {\r\n\t\tthis.processGraph = processGraph;\r\n\t}\r\n\r\n\tasync validateProcessGraph(data) {\r\n\t\ttry {\r\n\t\t\tconst ProcessGraph = require('./processgraph');\r\n\t\t\tvar parser;\r\n\t\t\tif (data instanceof ProcessGraph) {\r\n\t\t\t\tparser = data;\r\n\t\t\t}\r\n\t\t\telse if (this.processGraph) {\r\n\t\t\t\tparser = this.processGraph.createProcessGraphInstance(data);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tparser = new ProcessGraph(data, null, this);\r\n\t\t\t}\r\n\t\t\tawait parser.validate();\r\n\t\t\treturn true;\r\n\t\t} catch (error) {\r\n\t\t\tthrow new Ajv.ValidationError([{\r\n\t\t\t\tmessage: error.message\r\n\t\t\t}]);\r\n\t\t}\r\n\t}\r\n\r\n\t// Checks whether the valueSchema is compatible to the paramSchema.\r\n\t// So would a value compatible with valueSchema be accepted by paramSchema?\r\n\t// allowValueAsElements: If true, it checks whether the valueSchema would be allowed as part of an array or object. For example number could be allowed as part of an array of numbers.\r\n\tstatic isSchemaCompatible(paramSchema, valueSchema, strict = false, allowValueAsElements = false) {\r\n\t\tvar paramSchemas = ProcessUtils.normalizeJsonSchema(paramSchema, true);\r\n\t\tvar valueSchemas = ProcessUtils.normalizeJsonSchema(valueSchema, true);\r\n\r\n\t\tvar compatible = paramSchemas.findIndex(ps => {\r\n\t\t\tfor(var i in valueSchemas) {\r\n\t\t\t\tvar vs = valueSchemas[i];\r\n\t\t\t\tif (typeof ps.type !== 'string' || (!strict && typeof vs.type !== 'string')) { // \"any\" type is always compatible\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t\telse if (ps.type === vs.type || (allowValueAsElements && (ps.type === 'array' || ps.type === 'object')) || (ps.type === 'number' && vs.type === 'integer') || (!strict && ps.type === 'integer' && vs.type === 'number')) {\r\n\t\t\t\t\tif (ps.type === 'array' && Utils.isObject(ps.items) && Utils.isObject(vs.items))  {\r\n\t\t\t\t\t\tif (allowValueAsElements && JsonSchemaValidator.isSchemaCompatible(ps.items, vs, strict)) {\r\n\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (JsonSchemaValidator.isSchemaCompatible(ps.items, vs.items, strict)) {\r\n\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (ps.type === 'object' && Utils.isObject(ps.properties) && Utils.isObject(vs.properties)) {\r\n\t\t\t\t\t\t// ToDo: Check properties, required properties etc.\r\n\t\t\t\t\t\t// If allowValueAsElements is true, all types are allowed to be part of the object.\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// Check subtypes\r\n\t\t\t\t\telse if (!strict && (typeof ps.subtype !== 'string' || typeof vs.subtype !== 'string')) {\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (typeof ps.subtype !== 'string') { // types without subtype always accepts the same type with a subtype\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (ps.subtype === vs.subtype) {\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t});\r\n\r\n\t\treturn compatible !== -1;\r\n\t}\r\n\r\n}\r\n\r\nmodule.exports = JsonSchemaValidator;"],"sourceRoot":""}