{"version":3,"sources":["webpack:///./node_modules/ol/webgl/TileTexture.js","webpack:///./node_modules/ol/webgl/ContextEventType.js","webpack:///./node_modules/ol/webgl/PostProcessingPass.js","webpack:///./node_modules/ol/webgl/Helper.js","webpack:///./node_modules/ol/worker/webgl.js","webpack:///./node_modules/ol/webgl.js","webpack:///./node_modules/ol/webgl/PaletteTexture.js","webpack:///./node_modules/ol/webgl/Buffer.js","webpack:///./node_modules/ol/vec/mat4.js","webpack:///./node_modules/ol/webgl/RenderTarget.js","webpack:///./node_modules/ol/xml.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","this","constructor","create","bindAndConfigure","gl","texture","interpolate","resampleFilter","LINEAR","NEAREST","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","TEXTURE_MAG_FILTER","uploadImageTexture","image","texImage2D","RGBA","UNSIGNED_BYTE","uploadDataTexture","helper","data","size","bandCount","textureType","canInterpolate","getGL","Float32Array","FLOAT","getExtension","extension","format","bytesPerRow","byteLength","unpackAlignment","LUMINANCE","LUMINANCE_ALPHA","RGB","Error","concat","oldUnpackAlignment","getParameter","UNPACK_ALIGNMENT","pixelStorei","pixelContext","createPixelContext","canvas","document","createElement","width","height","getContext","TileTexture","_super","options","_this","tile","textures","handleTileChange_","bind","grid","getTileSize","tileCoord","tilePixelRatio_","tilePixelRatio","gutter_","gutter","NaN","helper_","coords","fromArray","flushBufferData","setTile","removeEventListener","CHANGE","length","loaded","getState","LOADED","uploadTile_","getImage","Image","crossOrigin","addEventListener","Math","round","context","drawImage","createTexture","push","pixelSize","getData","isFloat","pixelCount","DataType","Uint8Array","bytesPerElement","BYTES_PER_ELEMENT","floor","textureCount","ceil","textureDataArrays","textureIndex","dataIndex","rowOffset","colCount","rowIndex","colIndex","dataValue","pixelIndex","bandIndex","textureData","textureBandIndex","dispatchEvent","disposeInternal","deleteBuffer","i","deleteTexture","getPixelData","col","row","data_1","pixelsPerRow","DataView","bytesPerPixel","offset_1","buffer","slice","offset","clearRect","getImageData","err","LOST","RESTORED","DEFAULT_VERTEX_SHADER","DEFAULT_FRAGMENT_SHADER","WebGLPostProcessingPass","gl_","webGlContext","scaleRatio_","scaleRatio","renderTargetTexture_","renderTargetTextureSize_","frameBuffer_","createFramebuffer","vertexShader","createShader","VERTEX_SHADER","shaderSource","compileShader","fragmentShader","FRAGMENT_SHADER","renderTargetProgram_","createProgram","attachShader","linkProgram","renderTargetVerticesBuffer_","createBuffer","verticesArray","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","renderTargetAttribLocation_","getAttribLocation","renderTargetUniformLocation_","getUniformLocation","renderTargetOpacityLocation_","renderTargetTextureLocation_","uniforms_","uniforms","keys","forEach","name","value","location","init","frameState","textureSize","drawingBufferWidth","drawingBufferHeight","bindFramebuffer","FRAMEBUFFER","getFrameBuffer","viewport","level","internalFormat","border","type","framebufferTexture2D","COLOR_ATTACHMENT0","apply","nextPass","preCompose","postCompose","activeTexture","TEXTURE0","canvasId","renderTargets","attributes","getContextAttributes","preserveDrawingBuffer","clearColor","clear","COLOR_BUFFER_BIT","enable","BLEND","blendFunc","ONE","ONE_MINUS_SRC_ALPHA","useProgram","enableVertexAttribArray","vertexAttribPointer","uniform2f","uniform1i","opacity","layerStatesArray","layerIndex","uniform1f","applyUniforms","drawArrays","TRIANGLES","textureSlot","uniform","HTMLCanvasElement","ImageData","isArray","uniform3f","uniform4f","DefaultUniform","PROJECTION_MATRIX","OFFSET_SCALE_MATRIX","OFFSET_ROTATION_MATRIX","TIME","ZOOM","RESOLUTION","AttributeType","UNSIGNED_SHORT","UNSIGNED_INT","canvasCache","getSharedCanvasCacheKey","key","uniqueCanvasCacheKeyCount","getUniqueCanvasCacheKey","getCanvas","cacheItem","style","position","left","users","releaseCanvas","loseContext","WebGLHelper","opt_options","boundHandleWebGLContextLost_","handleWebGLContextLost","boundHandleWebGLContextRestored_","handleWebGLContextRestored","canvasCacheKey_","canvasCacheKey","canvas_","bufferCache_","extensionCache_","currentProgram_","ContextEventType","offsetRotateMatrix_","offsetScaleMatrix_","tmpMat4_","uniformLocations_","attribLocations_","setUniforms","postProcessPasses_","postProcesses","map","shaderCompileErrors_","startTime_","Date","now","name_1","canvasCacheKeyMatches","bufferKey","bufferCache","webGlBuffer","getType","getArray","getUsage","buf","bufferCacheEntry","isContextLost","prepareDraw","opt_disableAlphaBlend","pixelRatio","ZERO","applyFrameState","prepareDrawToRenderTarget","renderTarget","getSize","getFramebuffer","getTexture","drawElements","start","end","elementType","elementSize","numItems","offsetInBytes","finalizeDraw","ii","rotation","viewState","offsetScaleMatrix","offsetRotateMatrix","setUniformMatrixValue","setUniformFloatValue","zoom","resolution","HTMLImageElement","prevValue","undefined","imageReady","complete","program","source","shader","getProgram","fragmentShaderSource","vertexShaderSource","getShaderParameter","COMPILE_STATUS","message","getShaderInfoLog","deleteShader","getProgramParameter","LINK_STATUS","getAttributeLocation","makeProjectionTransform","transform","center","setUniformFloatVec4","uniform4fv","uniformMatrix4fv","enableAttributeArray_","attribName","stride","enableAttributes","computeAttributesStride","attr","getByteSizeFromType","opt_data","opt_texture","Disposable","Uint16Array","Uint32Array","Worker","Blob","Buffer","from","toString","URL","createObjectURL","ELEMENT_ARRAY_BUFFER","STREAM_DRAW","DYNAMIC_DRAW","CONTEXT_IDS","opt_attributes","antialias","e","PaletteTexture","texture_","BufferUsage","WebGLArrayBuffer","opt_usage","array","usage","ofSize","getArrayClassForType","arrayClass","fromArrayBuffer","fromTransform","mat4","tmpArray4","WebGLRenderTarget","opt_size","framebuffer_","size_","data_","dataCacheDirty_","updateSize_","setSize","clearCachedData","readAll","readPixels","readPixel","x","y","index","createElementNS","namespaceURI","qualifiedName","getDocument","getAllTextContent","node","normalizeWhitespace","getAllTextContent_","join","accumulator","nodeType","Node","CDATA_SECTION_NODE","TEXT_NODE","nodeValue","replace","n","firstChild","nextSibling","isDocument","object","parse","xml","DOMParser","parseFromString","makeArrayPusher","valueReader","opt_this","objectStack","makeObjectPropertyPusher","opt_property","property","localName","makeObjectPropertySetter","makeSimpleNodeFactory","opt_nodeName","opt_namespaceURI","fixedNodeName","nodeName","makeStructureNS","namespaceURIs","structure","opt_structureNS","structureNS","parseNode","parsersNS","firstElementChild","nextElementSibling","parsers","parser","pushParseAndPop","pop","document_","implementation","createDocument"],"mappings":"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","file":"js/chunk-6251d9eb.ed7675ae.js","sourcesContent":["/**\n * @module ol/webgl/TileTexture\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport DataTile from '../DataTile.js';\nimport EventTarget from '../events/Target.js';\nimport EventType from '../events/EventType.js';\nimport ImageTile from '../ImageTile.js';\nimport ReprojTile from '../reproj/Tile.js';\nimport TileState from '../TileState.js';\nimport WebGLArrayBuffer from './Buffer.js';\nimport { ARRAY_BUFFER, STATIC_DRAW } from '../webgl.js';\nimport { IMAGE_SMOOTHING_DISABLED } from '../renderer/canvas/common.js';\nimport { assign } from '../obj.js';\nimport { createCanvasContext2D } from '../dom.js';\nimport { toSize } from '../size.js';\n/**\n * @param {WebGLRenderingContext} gl The WebGL context.\n * @param {WebGLTexture} texture The texture.\n * @param {boolean} interpolate Interpolate when resampling.\n */\nfunction bindAndConfigure(gl, texture, interpolate) {\n    var resampleFilter = interpolate ? gl.LINEAR : gl.NEAREST;\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, resampleFilter);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, resampleFilter);\n}\n/**\n * @param {WebGLRenderingContext} gl The WebGL context.\n * @param {WebGLTexture} texture The texture.\n * @param {HTMLImageElement|HTMLCanvasElement|HTMLVideoElement} image The image.\n * @param {boolean} interpolate Interpolate when resampling.\n */\nfunction uploadImageTexture(gl, texture, image, interpolate) {\n    bindAndConfigure(gl, texture, interpolate);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\n}\n/**\n * @param {import(\"./Helper.js\").default} helper The WebGL helper.\n * @param {WebGLTexture} texture The texture.\n * @param {import(\"../DataTile.js\").Data} data The pixel data.\n * @param {import(\"../size.js\").Size} size The pixel size.\n * @param {number} bandCount The band count.\n * @param {boolean} interpolate Interpolate when resampling.\n */\nfunction uploadDataTexture(helper, texture, data, size, bandCount, interpolate) {\n    var gl = helper.getGL();\n    var textureType;\n    var canInterpolate;\n    if (data instanceof Float32Array) {\n        textureType = gl.FLOAT;\n        helper.getExtension('OES_texture_float');\n        var extension = helper.getExtension('OES_texture_float_linear');\n        canInterpolate = extension !== null;\n    }\n    else {\n        textureType = gl.UNSIGNED_BYTE;\n        canInterpolate = true;\n    }\n    bindAndConfigure(gl, texture, interpolate && canInterpolate);\n    var bytesPerRow = data.byteLength / size[1];\n    var unpackAlignment = 1;\n    if (bytesPerRow % 8 === 0) {\n        unpackAlignment = 8;\n    }\n    else if (bytesPerRow % 4 === 0) {\n        unpackAlignment = 4;\n    }\n    else if (bytesPerRow % 2 === 0) {\n        unpackAlignment = 2;\n    }\n    var format;\n    switch (bandCount) {\n        case 1: {\n            format = gl.LUMINANCE;\n            break;\n        }\n        case 2: {\n            format = gl.LUMINANCE_ALPHA;\n            break;\n        }\n        case 3: {\n            format = gl.RGB;\n            break;\n        }\n        case 4: {\n            format = gl.RGBA;\n            break;\n        }\n        default: {\n            throw new Error(\"Unsupported number of bands: \".concat(bandCount));\n        }\n    }\n    var oldUnpackAlignment = gl.getParameter(gl.UNPACK_ALIGNMENT);\n    gl.pixelStorei(gl.UNPACK_ALIGNMENT, unpackAlignment);\n    gl.texImage2D(gl.TEXTURE_2D, 0, format, size[0], size[1], 0, format, textureType, data);\n    gl.pixelStorei(gl.UNPACK_ALIGNMENT, oldUnpackAlignment);\n}\n/**\n * @type {CanvasRenderingContext2D}\n */\nvar pixelContext = null;\nfunction createPixelContext() {\n    var canvas = document.createElement('canvas');\n    canvas.width = 1;\n    canvas.height = 1;\n    pixelContext = canvas.getContext('2d');\n}\n/**\n * @typedef {import(\"../DataTile.js\").default|ImageTile|ReprojTile} TileType\n */\n/**\n * @typedef {Object} Options\n * @property {TileType} tile The tile.\n * @property {import(\"../tilegrid/TileGrid.js\").default} grid Tile grid.\n * @property {import(\"../webgl/Helper.js\").default} helper WebGL helper.\n * @property {number} [tilePixelRatio=1] Tile pixel ratio.\n * @property {number} [gutter=0] The size in pixels of the gutter around image tiles to ignore.\n */\nvar TileTexture = /** @class */ (function (_super) {\n    __extends(TileTexture, _super);\n    /**\n     * @param {Options} options The tile texture options.\n     */\n    function TileTexture(options) {\n        var _this = _super.call(this) || this;\n        /**\n         * @type {TileType}\n         */\n        _this.tile;\n        /**\n         * @type {Array<WebGLTexture>}\n         */\n        _this.textures = [];\n        _this.handleTileChange_ = _this.handleTileChange_.bind(_this);\n        /**\n         * @type {import(\"../size.js\").Size}\n         */\n        _this.size = toSize(options.grid.getTileSize(options.tile.tileCoord[0]));\n        /**\n         * @type {number}\n         * @private\n         */\n        _this.tilePixelRatio_ = options.tilePixelRatio || 1;\n        /**\n         * @type {number}\n         * @private\n         */\n        _this.gutter_ = options.gutter || 0;\n        /**\n         * @type {number}\n         */\n        _this.bandCount = NaN;\n        /**\n         * @type {import(\"../webgl/Helper.js\").default}\n         * @private\n         */\n        _this.helper_ = options.helper;\n        var coords = new WebGLArrayBuffer(ARRAY_BUFFER, STATIC_DRAW);\n        coords.fromArray([\n            0,\n            1,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n        ]);\n        _this.helper_.flushBufferData(coords);\n        /**\n         * @type {WebGLArrayBuffer}\n         */\n        _this.coords = coords;\n        _this.setTile(options.tile);\n        return _this;\n    }\n    /**\n     * @param {TileType} tile Tile.\n     */\n    TileTexture.prototype.setTile = function (tile) {\n        if (tile !== this.tile) {\n            if (this.tile) {\n                this.tile.removeEventListener(EventType.CHANGE, this.handleTileChange_);\n            }\n            this.tile = tile;\n            this.textures.length = 0;\n            this.loaded = tile.getState() === TileState.LOADED;\n            if (this.loaded) {\n                this.uploadTile_();\n            }\n            else {\n                if (tile instanceof ImageTile) {\n                    var image = tile.getImage();\n                    if (image instanceof Image && !image.crossOrigin) {\n                        image.crossOrigin = 'anonymous';\n                    }\n                }\n                tile.addEventListener(EventType.CHANGE, this.handleTileChange_);\n            }\n        }\n    };\n    TileTexture.prototype.uploadTile_ = function () {\n        var helper = this.helper_;\n        var gl = helper.getGL();\n        var tile = this.tile;\n        if (tile instanceof ImageTile || tile instanceof ReprojTile) {\n            var image = tile.getImage();\n            if (this.gutter_ !== 0) {\n                var gutter = this.tilePixelRatio_ * this.gutter_;\n                var width = Math.round(image.width - 2 * gutter);\n                var height = Math.round(image.height - 2 * gutter);\n                var context = createCanvasContext2D(width, height);\n                if (!tile.interpolate) {\n                    assign(context, IMAGE_SMOOTHING_DISABLED);\n                }\n                context.drawImage(image, gutter, gutter, width, height, 0, 0, width, height);\n                image = context.canvas;\n            }\n            var texture = gl.createTexture();\n            this.textures.push(texture);\n            this.bandCount = 4;\n            uploadImageTexture(gl, texture, image, tile.interpolate);\n            return;\n        }\n        var pixelSize = [\n            this.size[0] * this.tilePixelRatio_,\n            this.size[1] * this.tilePixelRatio_,\n        ];\n        var data = tile.getData();\n        var isFloat = data instanceof Float32Array;\n        var pixelCount = pixelSize[0] * pixelSize[1];\n        var DataType = isFloat ? Float32Array : Uint8Array;\n        var bytesPerElement = DataType.BYTES_PER_ELEMENT;\n        var bytesPerRow = data.byteLength / pixelSize[1];\n        this.bandCount = Math.floor(bytesPerRow / bytesPerElement / pixelSize[0]);\n        var textureCount = Math.ceil(this.bandCount / 4);\n        if (textureCount === 1) {\n            var texture = gl.createTexture();\n            this.textures.push(texture);\n            uploadDataTexture(helper, texture, data, pixelSize, this.bandCount, tile.interpolate);\n            return;\n        }\n        var textureDataArrays = new Array(textureCount);\n        for (var textureIndex = 0; textureIndex < textureCount; ++textureIndex) {\n            var texture = gl.createTexture();\n            this.textures.push(texture);\n            var bandCount = textureIndex < textureCount - 1 ? 4 : this.bandCount % 4;\n            textureDataArrays[textureIndex] = new DataType(pixelCount * bandCount);\n        }\n        var dataIndex = 0;\n        var rowOffset = 0;\n        var colCount = pixelSize[0] * this.bandCount;\n        for (var rowIndex = 0; rowIndex < pixelSize[1]; ++rowIndex) {\n            for (var colIndex = 0; colIndex < colCount; ++colIndex) {\n                var dataValue = data[rowOffset + colIndex];\n                var pixelIndex = Math.floor(dataIndex / this.bandCount);\n                var bandIndex = colIndex % this.bandCount;\n                var textureIndex = Math.floor(bandIndex / 4);\n                var textureData = textureDataArrays[textureIndex];\n                var bandCount = textureData.length / pixelCount;\n                var textureBandIndex = bandIndex % 4;\n                textureData[pixelIndex * bandCount + textureBandIndex] = dataValue;\n                ++dataIndex;\n            }\n            rowOffset += bytesPerRow / bytesPerElement;\n        }\n        for (var textureIndex = 0; textureIndex < textureCount; ++textureIndex) {\n            var texture = this.textures[textureIndex];\n            var textureData = textureDataArrays[textureIndex];\n            var bandCount = textureData.length / pixelCount;\n            uploadDataTexture(helper, texture, textureData, pixelSize, bandCount, tile.interpolate);\n        }\n    };\n    TileTexture.prototype.handleTileChange_ = function () {\n        if (this.tile.getState() === TileState.LOADED) {\n            this.loaded = true;\n            this.uploadTile_();\n            this.dispatchEvent(EventType.CHANGE);\n        }\n    };\n    TileTexture.prototype.disposeInternal = function () {\n        var gl = this.helper_.getGL();\n        this.helper_.deleteBuffer(this.coords);\n        for (var i = 0; i < this.textures.length; ++i) {\n            gl.deleteTexture(this.textures[i]);\n        }\n        this.tile.removeEventListener(EventType.CHANGE, this.handleTileChange_);\n    };\n    /**\n     * Get data for a pixel.  If the tile is not loaded, null is returned.\n     * @param {number} col The column index.\n     * @param {number} row The row index.\n     * @return {import(\"../DataTile.js\").Data|null} The data.\n     */\n    TileTexture.prototype.getPixelData = function (col, row) {\n        if (!this.loaded) {\n            return null;\n        }\n        col = Math.floor(this.tilePixelRatio_ * col);\n        row = Math.floor(this.tilePixelRatio_ * row);\n        if (this.tile instanceof DataTile) {\n            var data_1 = this.tile.getData();\n            var pixelsPerRow = Math.floor(this.tilePixelRatio_ * this.size[0]);\n            if (data_1 instanceof DataView) {\n                var bytesPerPixel = data_1.byteLength / (this.size[0] * this.size[1]);\n                var offset_1 = row * pixelsPerRow * bytesPerPixel + col * bytesPerPixel;\n                var buffer = data_1.buffer.slice(offset_1, offset_1 + bytesPerPixel);\n                return new DataView(buffer);\n            }\n            var offset = row * pixelsPerRow * this.bandCount + col * this.bandCount;\n            return data_1.slice(offset, offset + this.bandCount);\n        }\n        if (!pixelContext) {\n            createPixelContext();\n        }\n        pixelContext.clearRect(0, 0, 1, 1);\n        var data;\n        var image = this.tile.getImage();\n        try {\n            pixelContext.drawImage(image, col, row, 1, 1, 0, 0, 1, 1);\n            data = pixelContext.getImageData(0, 0, 1, 1).data;\n        }\n        catch (err) {\n            return null;\n        }\n        return data;\n    };\n    return TileTexture;\n}(EventTarget));\nexport default TileTexture;\n//# sourceMappingURL=TileTexture.js.map","/**\n * @module ol/webgl/ContextEventType\n */\n/**\n * @enum {string}\n */\nexport default {\n    LOST: 'webglcontextlost',\n    RESTORED: 'webglcontextrestored',\n};\n//# sourceMappingURL=ContextEventType.js.map","/**\n * @module ol/webgl/PostProcessingPass\n */\nimport { getUid } from '../util.js';\nvar DEFAULT_VERTEX_SHADER = \"\\n  precision mediump float;\\n  \\n  attribute vec2 a_position;\\n  varying vec2 v_texCoord;\\n  varying vec2 v_screenCoord;\\n  \\n  uniform vec2 u_screenSize;\\n   \\n  void main() {\\n    v_texCoord = a_position * 0.5 + 0.5;\\n    v_screenCoord = v_texCoord * u_screenSize;\\n    gl_Position = vec4(a_position, 0.0, 1.0);\\n  }\\n\";\nvar DEFAULT_FRAGMENT_SHADER = \"\\n  precision mediump float;\\n   \\n  uniform sampler2D u_image;\\n  uniform float u_opacity;\\n   \\n  varying vec2 v_texCoord;\\n   \\n  void main() {\\n    gl_FragColor = texture2D(u_image, v_texCoord) * u_opacity;\\n  }\\n\";\n/**\n * @typedef {Object} Options\n * @property {WebGLRenderingContext} webGlContext WebGL context; mandatory.\n * @property {number} [scaleRatio] Scale ratio; if < 1, the post process will render to a texture smaller than\n * the main canvas that will then be sampled up (useful for saving resource on blur steps).\n * @property {string} [vertexShader] Vertex shader source\n * @property {string} [fragmentShader] Fragment shader source\n * @property {Object<string,import(\"./Helper\").UniformValue>} [uniforms] Uniform definitions for the post process step\n */\n/**\n * @typedef {Object} UniformInternalDescription\n * @property {import(\"./Helper\").UniformValue} value Value\n * @property {number} location Location\n * @property {WebGLTexture} [texture] Texture\n * @private\n */\n/**\n * @classdesc\n * This class is used to define Post Processing passes with custom shaders and uniforms.\n * This is used internally by {@link module:ol/webgl/Helper~WebGLHelper}.\n *\n * Please note that the final output on the DOM canvas is expected to have premultiplied alpha, which means that\n * a pixel which is 100% red with an opacity of 50% must have a color of (r=0.5, g=0, b=0, a=0.5).\n * Failing to provide pixel colors with premultiplied alpha will result in render anomalies.\n *\n * The default post-processing pass does *not* multiply color values with alpha value, it expects color values to be\n * premultiplied.\n *\n * Default shaders are shown hereafter:\n *\n * * Vertex shader:\n *\n *   ```\n *   precision mediump float;\n *\n *   attribute vec2 a_position;\n *   varying vec2 v_texCoord;\n *   varying vec2 v_screenCoord;\n *\n *   uniform vec2 u_screenSize;\n *\n *   void main() {\n *     v_texCoord = a_position * 0.5 + 0.5;\n *     v_screenCoord = v_texCoord * u_screenSize;\n *     gl_Position = vec4(a_position, 0.0, 1.0);\n *   }\n *   ```\n *\n * * Fragment shader:\n *\n *   ```\n *   precision mediump float;\n *\n *   uniform sampler2D u_image;\n *   uniform float u_opacity;\n *\n *   varying vec2 v_texCoord;\n *\n *   void main() {\n *     gl_FragColor = texture2D(u_image, v_texCoord) * u_opacity;\n *   }\n *   ```\n *\n * @api\n */\nvar WebGLPostProcessingPass = /** @class */ (function () {\n    /**\n     * @param {Options} options Options.\n     */\n    function WebGLPostProcessingPass(options) {\n        this.gl_ = options.webGlContext;\n        var gl = this.gl_;\n        this.scaleRatio_ = options.scaleRatio || 1;\n        this.renderTargetTexture_ = gl.createTexture();\n        this.renderTargetTextureSize_ = null;\n        this.frameBuffer_ = gl.createFramebuffer();\n        // compile the program for the frame buffer\n        // TODO: make compilation errors show up\n        var vertexShader = gl.createShader(gl.VERTEX_SHADER);\n        gl.shaderSource(vertexShader, options.vertexShader || DEFAULT_VERTEX_SHADER);\n        gl.compileShader(vertexShader);\n        var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n        gl.shaderSource(fragmentShader, options.fragmentShader || DEFAULT_FRAGMENT_SHADER);\n        gl.compileShader(fragmentShader);\n        this.renderTargetProgram_ = gl.createProgram();\n        gl.attachShader(this.renderTargetProgram_, vertexShader);\n        gl.attachShader(this.renderTargetProgram_, fragmentShader);\n        gl.linkProgram(this.renderTargetProgram_);\n        // bind the vertices buffer for the frame buffer\n        this.renderTargetVerticesBuffer_ = gl.createBuffer();\n        var verticesArray = [-1, -1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1];\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.renderTargetVerticesBuffer_);\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(verticesArray), gl.STATIC_DRAW);\n        this.renderTargetAttribLocation_ = gl.getAttribLocation(this.renderTargetProgram_, 'a_position');\n        this.renderTargetUniformLocation_ = gl.getUniformLocation(this.renderTargetProgram_, 'u_screenSize');\n        this.renderTargetOpacityLocation_ = gl.getUniformLocation(this.renderTargetProgram_, 'u_opacity');\n        this.renderTargetTextureLocation_ = gl.getUniformLocation(this.renderTargetProgram_, 'u_image');\n        /**\n         * Holds info about custom uniforms used in the post processing pass\n         * @type {Array<UniformInternalDescription>}\n         * @private\n         */\n        this.uniforms_ = [];\n        options.uniforms &&\n            Object.keys(options.uniforms).forEach(function (name) {\n                this.uniforms_.push({\n                    value: options.uniforms[name],\n                    location: gl.getUniformLocation(this.renderTargetProgram_, name),\n                });\n            }.bind(this));\n    }\n    /**\n     * Get the WebGL rendering context\n     * @return {WebGLRenderingContext} The rendering context.\n     * @api\n     */\n    WebGLPostProcessingPass.prototype.getGL = function () {\n        return this.gl_;\n    };\n    /**\n     * Initialize the render target texture of the post process, make sure it is at the\n     * right size and bind it as a render target for the next draw calls.\n     * The last step to be initialized will be the one where the primitives are rendered.\n     * @param {import(\"../PluggableMap.js\").FrameState} frameState current frame state\n     * @api\n     */\n    WebGLPostProcessingPass.prototype.init = function (frameState) {\n        var gl = this.getGL();\n        var textureSize = [\n            gl.drawingBufferWidth * this.scaleRatio_,\n            gl.drawingBufferHeight * this.scaleRatio_,\n        ];\n        // rendering goes to my buffer\n        gl.bindFramebuffer(gl.FRAMEBUFFER, this.getFrameBuffer());\n        gl.viewport(0, 0, textureSize[0], textureSize[1]);\n        // if size has changed: adjust canvas & render target texture\n        if (!this.renderTargetTextureSize_ ||\n            this.renderTargetTextureSize_[0] !== textureSize[0] ||\n            this.renderTargetTextureSize_[1] !== textureSize[1]) {\n            this.renderTargetTextureSize_ = textureSize;\n            // create a new texture\n            var level = 0;\n            var internalFormat = gl.RGBA;\n            var border = 0;\n            var format = gl.RGBA;\n            var type = gl.UNSIGNED_BYTE;\n            var data = null;\n            gl.bindTexture(gl.TEXTURE_2D, this.renderTargetTexture_);\n            gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, textureSize[0], textureSize[1], border, format, type, data);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n            // bind the texture to the framebuffer\n            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.renderTargetTexture_, 0);\n        }\n    };\n    /**\n     * Render to the next postprocessing pass (or to the canvas if final pass).\n     * @param {import(\"../PluggableMap.js\").FrameState} frameState current frame state\n     * @param {WebGLPostProcessingPass} [nextPass] Next pass, optional\n     * @param {function(WebGLRenderingContext, import(\"../PluggableMap.js\").FrameState):void} [preCompose] Called before composing.\n     * @param {function(WebGLRenderingContext, import(\"../PluggableMap.js\").FrameState):void} [postCompose] Called before composing.\n     * @api\n     */\n    WebGLPostProcessingPass.prototype.apply = function (frameState, nextPass, preCompose, postCompose) {\n        var gl = this.getGL();\n        var size = frameState.size;\n        gl.bindFramebuffer(gl.FRAMEBUFFER, nextPass ? nextPass.getFrameBuffer() : null);\n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, this.renderTargetTexture_);\n        if (!nextPass) {\n            // clear the canvas if we are the first to render to it\n            // and preserveDrawingBuffer is true\n            var canvasId = getUid(gl.canvas);\n            if (!frameState.renderTargets[canvasId]) {\n                var attributes = gl.getContextAttributes();\n                if (attributes && attributes.preserveDrawingBuffer) {\n                    gl.clearColor(0.0, 0.0, 0.0, 0.0);\n                    gl.clear(gl.COLOR_BUFFER_BIT);\n                }\n                frameState.renderTargets[canvasId] = true;\n            }\n        }\n        gl.enable(gl.BLEND);\n        gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n        gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.renderTargetVerticesBuffer_);\n        gl.useProgram(this.renderTargetProgram_);\n        gl.enableVertexAttribArray(this.renderTargetAttribLocation_);\n        gl.vertexAttribPointer(this.renderTargetAttribLocation_, 2, gl.FLOAT, false, 0, 0);\n        gl.uniform2f(this.renderTargetUniformLocation_, size[0], size[1]);\n        gl.uniform1i(this.renderTargetTextureLocation_, 0);\n        var opacity = frameState.layerStatesArray[frameState.layerIndex].opacity;\n        gl.uniform1f(this.renderTargetOpacityLocation_, opacity);\n        this.applyUniforms(frameState);\n        if (preCompose) {\n            preCompose(gl, frameState);\n        }\n        gl.drawArrays(gl.TRIANGLES, 0, 6);\n        if (postCompose) {\n            postCompose(gl, frameState);\n        }\n    };\n    /**\n     * @return {WebGLFramebuffer} Frame buffer\n     * @api\n     */\n    WebGLPostProcessingPass.prototype.getFrameBuffer = function () {\n        return this.frameBuffer_;\n    };\n    /**\n     * Sets the custom uniforms based on what was given in the constructor.\n     * @param {import(\"../PluggableMap.js\").FrameState} frameState Frame state.\n     * @private\n     */\n    WebGLPostProcessingPass.prototype.applyUniforms = function (frameState) {\n        var gl = this.getGL();\n        var value;\n        var textureSlot = 1;\n        this.uniforms_.forEach(function (uniform) {\n            value =\n                typeof uniform.value === 'function'\n                    ? uniform.value(frameState)\n                    : uniform.value;\n            // apply value based on type\n            if (value instanceof HTMLCanvasElement || value instanceof ImageData) {\n                // create a texture & put data\n                if (!uniform.texture) {\n                    uniform.texture = gl.createTexture();\n                }\n                gl.activeTexture(gl[\"TEXTURE\".concat(textureSlot)]);\n                gl.bindTexture(gl.TEXTURE_2D, uniform.texture);\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n                if (value instanceof ImageData) {\n                    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, value.width, value.height, 0, gl.UNSIGNED_BYTE, new Uint8Array(value.data));\n                }\n                else {\n                    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, value);\n                }\n                // fill texture slots\n                gl.uniform1i(uniform.location, textureSlot++);\n            }\n            else if (Array.isArray(value)) {\n                switch (value.length) {\n                    case 2:\n                        gl.uniform2f(uniform.location, value[0], value[1]);\n                        return;\n                    case 3:\n                        gl.uniform3f(uniform.location, value[0], value[1], value[2]);\n                        return;\n                    case 4:\n                        gl.uniform4f(uniform.location, value[0], value[1], value[2], value[3]);\n                        return;\n                    default:\n                        return;\n                }\n            }\n            else if (typeof value === 'number') {\n                gl.uniform1f(uniform.location, value);\n            }\n        });\n    };\n    return WebGLPostProcessingPass;\n}());\nexport default WebGLPostProcessingPass;\n//# sourceMappingURL=PostProcessingPass.js.map","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/webgl/Helper\n */\nimport ContextEventType from '../webgl/ContextEventType.js';\nimport Disposable from '../Disposable.js';\nimport WebGLPostProcessingPass from './PostProcessingPass.js';\nimport { FLOAT, UNSIGNED_BYTE, UNSIGNED_INT, UNSIGNED_SHORT, getContext, } from '../webgl.js';\nimport { clear } from '../obj.js';\nimport { compose as composeTransform, create as createTransform, reset as resetTransform, rotate as rotateTransform, scale as scaleTransform, } from '../transform.js';\nimport { create, fromTransform } from '../vec/mat4.js';\nimport { getUid } from '../util.js';\n/**\n * @typedef {Object} BufferCacheEntry\n * @property {import(\"./Buffer.js\").default} buffer Buffer.\n * @property {WebGLBuffer} webGlBuffer WebGlBuffer.\n */\n/**\n * Shader types, either `FRAGMENT_SHADER` or `VERTEX_SHADER`.\n * @enum {number}\n */\nexport var ShaderType = {\n    FRAGMENT_SHADER: 0x8b30,\n    VERTEX_SHADER: 0x8b31,\n};\n/**\n * Uniform names used in the default shaders: `PROJECTION_MATRIX`, `OFFSET_SCALE_MATRIX`.\n * and `OFFSET_ROTATION_MATRIX`.\n * @enum {string}\n */\nexport var DefaultUniform = {\n    PROJECTION_MATRIX: 'u_projectionMatrix',\n    OFFSET_SCALE_MATRIX: 'u_offsetScaleMatrix',\n    OFFSET_ROTATION_MATRIX: 'u_offsetRotateMatrix',\n    TIME: 'u_time',\n    ZOOM: 'u_zoom',\n    RESOLUTION: 'u_resolution',\n};\n/**\n * Attribute types, either `UNSIGNED_BYTE`, `UNSIGNED_SHORT`, `UNSIGNED_INT` or `FLOAT`\n * Note: an attribute stored in a `Float32Array` should be of type `FLOAT`.\n * @enum {number}\n */\nexport var AttributeType = {\n    UNSIGNED_BYTE: UNSIGNED_BYTE,\n    UNSIGNED_SHORT: UNSIGNED_SHORT,\n    UNSIGNED_INT: UNSIGNED_INT,\n    FLOAT: FLOAT,\n};\n/**\n * Description of an attribute in a buffer\n * @typedef {Object} AttributeDescription\n * @property {string} name Attribute name to use in shaders\n * @property {number} size Number of components per attributes\n * @property {AttributeType} [type] Attribute type, i.e. number of bytes used to store the value. This is\n * determined by the class of typed array which the buffer uses (eg. `Float32Array` for a `FLOAT` attribute).\n * Default is `FLOAT`.\n */\n/**\n * @typedef {number|Array<number>|HTMLCanvasElement|HTMLImageElement|ImageData|import(\"../transform\").Transform} UniformLiteralValue\n */\n/**\n * Uniform value can be a number, array of numbers (2 to 4), canvas element or a callback returning\n * one of the previous types.\n * @typedef {UniformLiteralValue|function(import(\"../PluggableMap.js\").FrameState):UniformLiteralValue} UniformValue\n */\n/**\n * @typedef {Object} PostProcessesOptions\n * @property {number} [scaleRatio] Scale ratio; if < 1, the post process will render to a texture smaller than\n * the main canvas which will then be sampled up (useful for saving resource on blur steps).\n * @property {string} [vertexShader] Vertex shader source\n * @property {string} [fragmentShader] Fragment shader source\n * @property {Object<string,UniformValue>} [uniforms] Uniform definitions for the post process step\n */\n/**\n * @typedef {Object} Options\n * @property {Object<string,UniformValue>} [uniforms] Uniform definitions; property names must match the uniform\n * names in the provided or default shaders.\n * @property {Array<PostProcessesOptions>} [postProcesses] Post-processes definitions\n * @property {string} [canvasCacheKey] The cache key for the canvas.\n */\n/**\n * @typedef {Object} UniformInternalDescription\n * @property {string} name Name\n * @property {UniformValue} [value] Value\n * @property {WebGLTexture} [texture] Texture\n * @private\n */\n/**\n * @typedef {Object} CanvasCacheItem\n * @property {HTMLCanvasElement} canvas Canvas element.\n * @property {number} users The count of users of this canvas.\n */\n/**\n * @type {Object<string,CanvasCacheItem>}\n */\nvar canvasCache = {};\n/**\n * @param {string} key The cache key for the canvas.\n * @return {string} The shared cache key.\n */\nfunction getSharedCanvasCacheKey(key) {\n    return 'shared/' + key;\n}\nvar uniqueCanvasCacheKeyCount = 0;\n/**\n * @return {string} The unique cache key.\n */\nfunction getUniqueCanvasCacheKey() {\n    var key = 'unique/' + uniqueCanvasCacheKeyCount;\n    uniqueCanvasCacheKeyCount += 1;\n    return key;\n}\n/**\n * @param {string} key The cache key for the canvas.\n * @return {HTMLCanvasElement} The canvas.\n */\nfunction getCanvas(key) {\n    var cacheItem = canvasCache[key];\n    if (!cacheItem) {\n        var canvas = document.createElement('canvas');\n        canvas.style.position = 'absolute';\n        canvas.style.left = '0';\n        cacheItem = { users: 0, canvas: canvas };\n        canvasCache[key] = cacheItem;\n    }\n    cacheItem.users += 1;\n    return cacheItem.canvas;\n}\n/**\n * @param {string} key The cache key for the canvas.\n */\nfunction releaseCanvas(key) {\n    var cacheItem = canvasCache[key];\n    if (!cacheItem) {\n        return;\n    }\n    cacheItem.users -= 1;\n    if (cacheItem.users > 0) {\n        return;\n    }\n    var canvas = cacheItem.canvas;\n    var gl = getContext(canvas);\n    var extension = gl.getExtension('WEBGL_lose_context');\n    if (extension) {\n        extension.loseContext();\n    }\n    delete canvasCache[key];\n}\n/**\n * @classdesc\n * This class is intended to provide low-level functions related to WebGL rendering, so that accessing\n * directly the WebGL API should not be required anymore.\n *\n * Several operations are handled by the `WebGLHelper` class:\n *\n * ### Define custom shaders and uniforms\n *\n *   *Shaders* are low-level programs executed on the GPU and written in GLSL. There are two types of shaders:\n *\n *   Vertex shaders are used to manipulate the position and attribute of *vertices* of rendered primitives (ie. corners of a square).\n *   Outputs are:\n *\n *   * `gl_Position`: position of the vertex in screen space\n *\n *   * Varyings usually prefixed with `v_` are passed on to the fragment shader\n *\n *   Fragment shaders are used to control the actual color of the pixels drawn on screen. Their only output is `gl_FragColor`.\n *\n *   Both shaders can take *uniforms* or *attributes* as input. Attributes are explained later. Uniforms are common, read-only values that\n *   can be changed at every frame and can be of type float, arrays of float or images.\n *\n *   Shaders must be compiled and assembled into a program like so:\n *   ```js\n *   // here we simply create two shaders and assemble them in a program which is then used\n *   // for subsequent rendering calls\n *   const vertexShader = new WebGLVertex(VERTEX_SHADER);\n *   const fragmentShader = new WebGLFragment(FRAGMENT_SHADER);\n *   const program = this.context.getProgram(fragmentShader, vertexShader);\n *   helper.useProgram(this.program);\n *   ```\n *\n *   Uniforms are defined using the `uniforms` option and can either be explicit values or callbacks taking the frame state as argument.\n *   You can also change their value along the way like so:\n *   ```js\n *   helper.setUniformFloatValue('u_value', valueAsNumber);\n *   ```\n *\n * ### Defining post processing passes\n *\n *   *Post processing* describes the act of rendering primitives to a texture, and then rendering this texture to the final canvas\n *   while applying special effects in screen space.\n *   Typical uses are: blurring, color manipulation, depth of field, filtering...\n *\n *   The `WebGLHelper` class offers the possibility to define post processes at creation time using the `postProcesses` option.\n *   A post process step accepts the following options:\n *\n *   * `fragmentShader` and `vertexShader`: text literals in GLSL language that will be compiled and used in the post processing step.\n *   * `uniforms`: uniforms can be defined for the post processing steps just like for the main render.\n *   * `scaleRatio`: allows using an intermediate texture smaller or higher than the final canvas in the post processing step.\n *     This is typically used in blur steps to reduce the performance overhead by using an already downsampled texture as input.\n *\n *   The {@link module:ol/webgl/PostProcessingPass~WebGLPostProcessingPass} class is used internally, refer to its documentation for more info.\n *\n * ### Binding WebGL buffers and flushing data into them\n *\n *   Data that must be passed to the GPU has to be transferred using {@link module:ol/webgl/Buffer~WebGLArrayBuffer} objects.\n *   A buffer has to be created only once, but must be bound every time the buffer content will be used for rendering.\n *   This is done using {@link bindBuffer}.\n *   When the buffer's array content has changed, the new data has to be flushed to the GPU memory; this is done using\n *   {@link flushBufferData}. Note: this operation is expensive and should be done as infrequently as possible.\n *\n *   When binding an array buffer, a `target` parameter must be given: it should be either {@link module:ol/webgl.ARRAY_BUFFER}\n *   (if the buffer contains vertices data) or {@link module:ol/webgl.ELEMENT_ARRAY_BUFFER} (if the buffer contains indices data).\n *\n *   Examples below:\n *   ```js\n *   // at initialization phase\n *   const verticesBuffer = new WebGLArrayBuffer([], DYNAMIC_DRAW);\n *   const indicesBuffer = new WebGLArrayBuffer([], DYNAMIC_DRAW);\n *\n *   // when array values have changed\n *   helper.flushBufferData(ARRAY_BUFFER, this.verticesBuffer);\n *   helper.flushBufferData(ELEMENT_ARRAY_BUFFER, this.indicesBuffer);\n *\n *   // at rendering phase\n *   helper.bindBuffer(ARRAY_BUFFER, this.verticesBuffer);\n *   helper.bindBuffer(ELEMENT_ARRAY_BUFFER, this.indicesBuffer);\n *   ```\n *\n * ### Specifying attributes\n *\n *   The GPU only receives the data as arrays of numbers. These numbers must be handled differently depending on what it describes (position, texture coordinate...).\n *   Attributes are used to specify these uses. Specify the attribute names with\n *   {@link module:ol/webgl/Helper~WebGLHelper#enableAttributes enableAttributes()} (see code snippet below).\n *\n *   Please note that you will have to specify the type and offset of the attributes in the data array. You can refer to the documentation of [WebGLRenderingContext.vertexAttribPointer](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttribPointer) for more explanation.\n *   ```js\n *   // here we indicate that the data array has the following structure:\n *   // [posX, posY, offsetX, offsetY, texCoordU, texCoordV, posX, posY, ...]\n *   helper.enableAttributes([\n *     {\n *        name: 'a_position',\n *        size: 2\n *     },\n *     {\n *       name: 'a_offset',\n *       size: 2\n *     },\n *     {\n *       name: 'a_texCoord',\n *       size: 2\n *     }\n *   ])\n *   ```\n *\n * ### Rendering primitives\n *\n *   Once all the steps above have been achieved, rendering primitives to the screen is done using {@link prepareDraw}, {@link drawElements} and {@link finalizeDraw}.\n *   ```js\n *   // frame preparation step\n *   helper.prepareDraw(frameState);\n *\n *   // call this for every data array that has to be rendered on screen\n *   helper.drawElements(0, this.indicesBuffer.getArray().length);\n *\n *   // finalize the rendering by applying post processes\n *   helper.finalizeDraw(frameState);\n *   ```\n *\n * For an example usage of this class, refer to {@link module:ol/renderer/webgl/PointsLayer~WebGLPointsLayerRenderer}.\n *\n * @api\n */\nvar WebGLHelper = /** @class */ (function (_super) {\n    __extends(WebGLHelper, _super);\n    /**\n     * @param {Options} [opt_options] Options.\n     */\n    function WebGLHelper(opt_options) {\n        var _this = _super.call(this) || this;\n        var options = opt_options || {};\n        /** @private */\n        _this.boundHandleWebGLContextLost_ = _this.handleWebGLContextLost.bind(_this);\n        /** @private */\n        _this.boundHandleWebGLContextRestored_ =\n            _this.handleWebGLContextRestored.bind(_this);\n        /**\n         * @private\n         * @type {string}\n         */\n        _this.canvasCacheKey_ = options.canvasCacheKey\n            ? getSharedCanvasCacheKey(options.canvasCacheKey)\n            : getUniqueCanvasCacheKey();\n        /**\n         * @private\n         * @type {HTMLCanvasElement}\n         */\n        _this.canvas_ = getCanvas(_this.canvasCacheKey_);\n        /**\n         * @private\n         * @type {WebGLRenderingContext}\n         */\n        _this.gl_ = getContext(_this.canvas_);\n        /**\n         * @private\n         * @type {!Object<string, BufferCacheEntry>}\n         */\n        _this.bufferCache_ = {};\n        /**\n         * @private\n         * @type {Object<string, Object>}\n         */\n        _this.extensionCache_ = {};\n        /**\n         * @private\n         * @type {WebGLProgram}\n         */\n        _this.currentProgram_ = null;\n        _this.canvas_.addEventListener(ContextEventType.LOST, _this.boundHandleWebGLContextLost_);\n        _this.canvas_.addEventListener(ContextEventType.RESTORED, _this.boundHandleWebGLContextRestored_);\n        /**\n         * @private\n         * @type {import(\"../transform.js\").Transform}\n         */\n        _this.offsetRotateMatrix_ = createTransform();\n        /**\n         * @private\n         * @type {import(\"../transform.js\").Transform}\n         */\n        _this.offsetScaleMatrix_ = createTransform();\n        /**\n         * @private\n         * @type {Array<number>}\n         */\n        _this.tmpMat4_ = create();\n        /**\n         * @private\n         * @type {Object<string, WebGLUniformLocation>}\n         */\n        _this.uniformLocations_ = {};\n        /**\n         * @private\n         * @type {Object<string, number>}\n         */\n        _this.attribLocations_ = {};\n        /**\n         * Holds info about custom uniforms used in the post processing pass.\n         * If the uniform is a texture, the WebGL Texture object will be stored here.\n         * @type {Array<UniformInternalDescription>}\n         * @private\n         */\n        _this.uniforms_ = [];\n        if (options.uniforms) {\n            _this.setUniforms(options.uniforms);\n        }\n        var gl = _this.getGL();\n        /**\n         * An array of PostProcessingPass objects is kept in this variable, built from the steps provided in the\n         * options. If no post process was given, a default one is used (so as not to have to make an exception to\n         * the frame buffer logic).\n         * @type {Array<WebGLPostProcessingPass>}\n         * @private\n         */\n        _this.postProcessPasses_ = options.postProcesses\n            ? options.postProcesses.map(function (options) {\n                return new WebGLPostProcessingPass({\n                    webGlContext: gl,\n                    scaleRatio: options.scaleRatio,\n                    vertexShader: options.vertexShader,\n                    fragmentShader: options.fragmentShader,\n                    uniforms: options.uniforms,\n                });\n            })\n            : [new WebGLPostProcessingPass({ webGlContext: gl })];\n        /**\n         * @type {string|null}\n         * @private\n         */\n        _this.shaderCompileErrors_ = null;\n        /**\n         * @type {number}\n         * @private\n         */\n        _this.startTime_ = Date.now();\n        return _this;\n    }\n    /**\n     * @param {Object<string, UniformValue>} uniforms Uniform definitions.\n     */\n    WebGLHelper.prototype.setUniforms = function (uniforms) {\n        this.uniforms_ = [];\n        for (var name_1 in uniforms) {\n            this.uniforms_.push({\n                name: name_1,\n                value: uniforms[name_1],\n            });\n        }\n        this.uniformLocations_ = {};\n    };\n    /**\n     * @param {string} canvasCacheKey The canvas cache key.\n     * @return {boolean} The provided key matches the one this helper was constructed with.\n     */\n    WebGLHelper.prototype.canvasCacheKeyMatches = function (canvasCacheKey) {\n        return this.canvasCacheKey_ === getSharedCanvasCacheKey(canvasCacheKey);\n    };\n    /**\n     * Get a WebGL extension.  If the extension is not supported, null is returned.\n     * Extensions are cached after they are enabled for the first time.\n     * @param {string} name The extension name.\n     * @return {Object|null} The extension or null if not supported.\n     */\n    WebGLHelper.prototype.getExtension = function (name) {\n        if (name in this.extensionCache_) {\n            return this.extensionCache_[name];\n        }\n        var extension = this.gl_.getExtension(name);\n        this.extensionCache_[name] = extension;\n        return extension;\n    };\n    /**\n     * Just bind the buffer if it's in the cache. Otherwise create\n     * the WebGL buffer, bind it, populate it, and add an entry to\n     * the cache.\n     * @param {import(\"./Buffer\").default} buffer Buffer.\n     * @api\n     */\n    WebGLHelper.prototype.bindBuffer = function (buffer) {\n        var gl = this.getGL();\n        var bufferKey = getUid(buffer);\n        var bufferCache = this.bufferCache_[bufferKey];\n        if (!bufferCache) {\n            var webGlBuffer = gl.createBuffer();\n            bufferCache = {\n                buffer: buffer,\n                webGlBuffer: webGlBuffer,\n            };\n            this.bufferCache_[bufferKey] = bufferCache;\n        }\n        gl.bindBuffer(buffer.getType(), bufferCache.webGlBuffer);\n    };\n    /**\n     * Update the data contained in the buffer array; this is required for the\n     * new data to be rendered\n     * @param {import(\"./Buffer\").default} buffer Buffer.\n     * @api\n     */\n    WebGLHelper.prototype.flushBufferData = function (buffer) {\n        var gl = this.getGL();\n        this.bindBuffer(buffer);\n        gl.bufferData(buffer.getType(), buffer.getArray(), buffer.getUsage());\n    };\n    /**\n     * @param {import(\"./Buffer.js\").default} buf Buffer.\n     */\n    WebGLHelper.prototype.deleteBuffer = function (buf) {\n        var gl = this.getGL();\n        var bufferKey = getUid(buf);\n        var bufferCacheEntry = this.bufferCache_[bufferKey];\n        if (bufferCacheEntry && !gl.isContextLost()) {\n            gl.deleteBuffer(bufferCacheEntry.webGlBuffer);\n        }\n        delete this.bufferCache_[bufferKey];\n    };\n    /**\n     * Clean up.\n     */\n    WebGLHelper.prototype.disposeInternal = function () {\n        this.canvas_.removeEventListener(ContextEventType.LOST, this.boundHandleWebGLContextLost_);\n        this.canvas_.removeEventListener(ContextEventType.RESTORED, this.boundHandleWebGLContextRestored_);\n        releaseCanvas(this.canvasCacheKey_);\n        delete this.gl_;\n        delete this.canvas_;\n    };\n    /**\n     * Clear the buffer & set the viewport to draw.\n     * Post process passes will be initialized here, the first one being bound as a render target for\n     * subsequent draw calls.\n     * @param {import(\"../PluggableMap.js\").FrameState} frameState current frame state\n     * @param {boolean} [opt_disableAlphaBlend] If true, no alpha blending will happen.\n     * @api\n     */\n    WebGLHelper.prototype.prepareDraw = function (frameState, opt_disableAlphaBlend) {\n        var gl = this.getGL();\n        var canvas = this.getCanvas();\n        var size = frameState.size;\n        var pixelRatio = frameState.pixelRatio;\n        canvas.width = size[0] * pixelRatio;\n        canvas.height = size[1] * pixelRatio;\n        canvas.style.width = size[0] + 'px';\n        canvas.style.height = size[1] + 'px';\n        gl.useProgram(this.currentProgram_);\n        // loop backwards in post processes list\n        for (var i = this.postProcessPasses_.length - 1; i >= 0; i--) {\n            this.postProcessPasses_[i].init(frameState);\n        }\n        gl.bindTexture(gl.TEXTURE_2D, null);\n        gl.clearColor(0.0, 0.0, 0.0, 0.0);\n        gl.clear(gl.COLOR_BUFFER_BIT);\n        gl.enable(gl.BLEND);\n        gl.blendFunc(gl.ONE, opt_disableAlphaBlend ? gl.ZERO : gl.ONE_MINUS_SRC_ALPHA);\n        gl.useProgram(this.currentProgram_);\n        this.applyFrameState(frameState);\n        this.applyUniforms(frameState);\n    };\n    /**\n     * Clear the render target & bind it for future draw operations.\n     * This is similar to `prepareDraw`, only post processes will not be applied.\n     * Note: the whole viewport will be drawn to the render target, regardless of its size.\n     * @param {import(\"../PluggableMap.js\").FrameState} frameState current frame state\n     * @param {import(\"./RenderTarget.js\").default} renderTarget Render target to draw to\n     * @param {boolean} [opt_disableAlphaBlend] If true, no alpha blending will happen.\n     */\n    WebGLHelper.prototype.prepareDrawToRenderTarget = function (frameState, renderTarget, opt_disableAlphaBlend) {\n        var gl = this.getGL();\n        var size = renderTarget.getSize();\n        gl.bindFramebuffer(gl.FRAMEBUFFER, renderTarget.getFramebuffer());\n        gl.viewport(0, 0, size[0], size[1]);\n        gl.bindTexture(gl.TEXTURE_2D, renderTarget.getTexture());\n        gl.clearColor(0.0, 0.0, 0.0, 0.0);\n        gl.clear(gl.COLOR_BUFFER_BIT);\n        gl.enable(gl.BLEND);\n        gl.blendFunc(gl.ONE, opt_disableAlphaBlend ? gl.ZERO : gl.ONE_MINUS_SRC_ALPHA);\n        gl.useProgram(this.currentProgram_);\n        this.applyFrameState(frameState);\n        this.applyUniforms(frameState);\n    };\n    /**\n     * Execute a draw call based on the currently bound program, texture, buffers, attributes.\n     * @param {number} start Start index.\n     * @param {number} end End index.\n     * @api\n     */\n    WebGLHelper.prototype.drawElements = function (start, end) {\n        var gl = this.getGL();\n        this.getExtension('OES_element_index_uint');\n        var elementType = gl.UNSIGNED_INT;\n        var elementSize = 4;\n        var numItems = end - start;\n        var offsetInBytes = start * elementSize;\n        gl.drawElements(gl.TRIANGLES, numItems, elementType, offsetInBytes);\n    };\n    /**\n     * Apply the successive post process passes which will eventually render to the actual canvas.\n     * @param {import(\"../PluggableMap.js\").FrameState} frameState current frame state\n     * @param {function(WebGLRenderingContext, import(\"../PluggableMap.js\").FrameState):void} [preCompose] Called before composing.\n     * @param {function(WebGLRenderingContext, import(\"../PluggableMap.js\").FrameState):void} [postCompose] Called before composing.\n     */\n    WebGLHelper.prototype.finalizeDraw = function (frameState, preCompose, postCompose) {\n        // apply post processes using the next one as target\n        for (var i = 0, ii = this.postProcessPasses_.length; i < ii; i++) {\n            if (i === ii - 1) {\n                this.postProcessPasses_[i].apply(frameState, null, preCompose, postCompose);\n            }\n            else {\n                this.postProcessPasses_[i].apply(frameState, this.postProcessPasses_[i + 1]);\n            }\n        }\n    };\n    /**\n     * @return {HTMLCanvasElement} Canvas.\n     * @api\n     */\n    WebGLHelper.prototype.getCanvas = function () {\n        return this.canvas_;\n    };\n    /**\n     * Get the WebGL rendering context\n     * @return {WebGLRenderingContext} The rendering context.\n     * @api\n     */\n    WebGLHelper.prototype.getGL = function () {\n        return this.gl_;\n    };\n    /**\n     * Sets the default matrix uniforms for a given frame state. This is called internally in `prepareDraw`.\n     * @param {import(\"../PluggableMap.js\").FrameState} frameState Frame state.\n     * @private\n     */\n    WebGLHelper.prototype.applyFrameState = function (frameState) {\n        var size = frameState.size;\n        var rotation = frameState.viewState.rotation;\n        var offsetScaleMatrix = resetTransform(this.offsetScaleMatrix_);\n        scaleTransform(offsetScaleMatrix, 2 / size[0], 2 / size[1]);\n        var offsetRotateMatrix = resetTransform(this.offsetRotateMatrix_);\n        if (rotation !== 0) {\n            rotateTransform(offsetRotateMatrix, -rotation);\n        }\n        this.setUniformMatrixValue(DefaultUniform.OFFSET_SCALE_MATRIX, fromTransform(this.tmpMat4_, offsetScaleMatrix));\n        this.setUniformMatrixValue(DefaultUniform.OFFSET_ROTATION_MATRIX, fromTransform(this.tmpMat4_, offsetRotateMatrix));\n        this.setUniformFloatValue(DefaultUniform.TIME, (Date.now() - this.startTime_) * 0.001);\n        this.setUniformFloatValue(DefaultUniform.ZOOM, frameState.viewState.zoom);\n        this.setUniformFloatValue(DefaultUniform.RESOLUTION, frameState.viewState.resolution);\n    };\n    /**\n     * Sets the custom uniforms based on what was given in the constructor. This is called internally in `prepareDraw`.\n     * @param {import(\"../PluggableMap.js\").FrameState} frameState Frame state.\n     * @private\n     */\n    WebGLHelper.prototype.applyUniforms = function (frameState) {\n        var gl = this.getGL();\n        var value;\n        var textureSlot = 0;\n        this.uniforms_.forEach(function (uniform) {\n            value =\n                typeof uniform.value === 'function'\n                    ? uniform.value(frameState)\n                    : uniform.value;\n            // apply value based on type\n            if (value instanceof HTMLCanvasElement ||\n                value instanceof HTMLImageElement ||\n                value instanceof ImageData) {\n                // create a texture & put data\n                if (!uniform.texture) {\n                    uniform.prevValue = undefined;\n                    uniform.texture = gl.createTexture();\n                }\n                gl.activeTexture(gl[\"TEXTURE\".concat(textureSlot)]);\n                gl.bindTexture(gl.TEXTURE_2D, uniform.texture);\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n                var imageReady = !(value instanceof HTMLImageElement) ||\n                    /** @type {HTMLImageElement} */ (value).complete;\n                if (imageReady && uniform.prevValue !== value) {\n                    uniform.prevValue = value;\n                    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, value);\n                }\n                // fill texture slots by increasing index\n                gl.uniform1i(this.getUniformLocation(uniform.name), textureSlot++);\n            }\n            else if (Array.isArray(value) && value.length === 6) {\n                this.setUniformMatrixValue(uniform.name, fromTransform(this.tmpMat4_, value));\n            }\n            else if (Array.isArray(value) && value.length <= 4) {\n                switch (value.length) {\n                    case 2:\n                        gl.uniform2f(this.getUniformLocation(uniform.name), value[0], value[1]);\n                        return;\n                    case 3:\n                        gl.uniform3f(this.getUniformLocation(uniform.name), value[0], value[1], value[2]);\n                        return;\n                    case 4:\n                        gl.uniform4f(this.getUniformLocation(uniform.name), value[0], value[1], value[2], value[3]);\n                        return;\n                    default:\n                        return;\n                }\n            }\n            else if (typeof value === 'number') {\n                gl.uniform1f(this.getUniformLocation(uniform.name), value);\n            }\n        }.bind(this));\n    };\n    /**\n     * Use a program.  If the program is already in use, this will return `false`.\n     * @param {WebGLProgram} program Program.\n     * @return {boolean} Changed.\n     * @api\n     */\n    WebGLHelper.prototype.useProgram = function (program) {\n        if (program == this.currentProgram_) {\n            return false;\n        }\n        else {\n            var gl = this.getGL();\n            gl.useProgram(program);\n            this.currentProgram_ = program;\n            this.uniformLocations_ = {};\n            this.attribLocations_ = {};\n            return true;\n        }\n    };\n    /**\n     * Will attempt to compile a vertex or fragment shader based on source\n     * On error, the shader will be returned but\n     * `gl.getShaderParameter(shader, gl.COMPILE_STATUS)` will return `true`\n     * Use `gl.getShaderInfoLog(shader)` to have details\n     * @param {string} source Shader source\n     * @param {ShaderType} type VERTEX_SHADER or FRAGMENT_SHADER\n     * @return {WebGLShader} Shader object\n     */\n    WebGLHelper.prototype.compileShader = function (source, type) {\n        var gl = this.getGL();\n        var shader = gl.createShader(type);\n        gl.shaderSource(shader, source);\n        gl.compileShader(shader);\n        return shader;\n    };\n    /**\n     * Create a program for a vertex and fragment shader.  Throws if shader compilation fails.\n     * @param {string} fragmentShaderSource Fragment shader source.\n     * @param {string} vertexShaderSource Vertex shader source.\n     * @return {WebGLProgram} Program\n     * @api\n     */\n    WebGLHelper.prototype.getProgram = function (fragmentShaderSource, vertexShaderSource) {\n        var gl = this.getGL();\n        var fragmentShader = this.compileShader(fragmentShaderSource, gl.FRAGMENT_SHADER);\n        var vertexShader = this.compileShader(vertexShaderSource, gl.VERTEX_SHADER);\n        var program = gl.createProgram();\n        gl.attachShader(program, fragmentShader);\n        gl.attachShader(program, vertexShader);\n        gl.linkProgram(program);\n        if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {\n            var message = \"Fragment shader compliation failed: \".concat(gl.getShaderInfoLog(fragmentShader));\n            throw new Error(message);\n        }\n        gl.deleteShader(fragmentShader);\n        if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {\n            var message = \"Vertex shader compilation failed: \".concat(gl.getShaderInfoLog(vertexShader));\n            throw new Error(message);\n        }\n        gl.deleteShader(vertexShader);\n        if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n            var message = \"GL program linking failed: \".concat(gl.getShaderInfoLog(vertexShader));\n            throw new Error(message);\n        }\n        return program;\n    };\n    /**\n     * Will get the location from the shader or the cache\n     * @param {string} name Uniform name\n     * @return {WebGLUniformLocation} uniformLocation\n     * @api\n     */\n    WebGLHelper.prototype.getUniformLocation = function (name) {\n        if (this.uniformLocations_[name] === undefined) {\n            this.uniformLocations_[name] = this.getGL().getUniformLocation(this.currentProgram_, name);\n        }\n        return this.uniformLocations_[name];\n    };\n    /**\n     * Will get the location from the shader or the cache\n     * @param {string} name Attribute name\n     * @return {number} attribLocation\n     * @api\n     */\n    WebGLHelper.prototype.getAttributeLocation = function (name) {\n        if (this.attribLocations_[name] === undefined) {\n            this.attribLocations_[name] = this.getGL().getAttribLocation(this.currentProgram_, name);\n        }\n        return this.attribLocations_[name];\n    };\n    /**\n     * Modifies the given transform to apply the rotation/translation/scaling of the given frame state.\n     * The resulting transform can be used to convert world space coordinates to view coordinates.\n     * @param {import(\"../PluggableMap.js\").FrameState} frameState Frame state.\n     * @param {import(\"../transform\").Transform} transform Transform to update.\n     * @return {import(\"../transform\").Transform} The updated transform object.\n     * @api\n     */\n    WebGLHelper.prototype.makeProjectionTransform = function (frameState, transform) {\n        var size = frameState.size;\n        var rotation = frameState.viewState.rotation;\n        var resolution = frameState.viewState.resolution;\n        var center = frameState.viewState.center;\n        resetTransform(transform);\n        composeTransform(transform, 0, 0, 2 / (resolution * size[0]), 2 / (resolution * size[1]), -rotation, -center[0], -center[1]);\n        return transform;\n    };\n    /**\n     * Give a value for a standard float uniform\n     * @param {string} uniform Uniform name\n     * @param {number} value Value\n     * @api\n     */\n    WebGLHelper.prototype.setUniformFloatValue = function (uniform, value) {\n        this.getGL().uniform1f(this.getUniformLocation(uniform), value);\n    };\n    /**\n     * Give a value for a vec4 uniform\n     * @param {string} uniform Uniform name\n     * @param {Array<number>} value Array of length 4.\n     */\n    WebGLHelper.prototype.setUniformFloatVec4 = function (uniform, value) {\n        this.getGL().uniform4fv(this.getUniformLocation(uniform), value);\n    };\n    /**\n     * Give a value for a standard matrix4 uniform\n     * @param {string} uniform Uniform name\n     * @param {Array<number>} value Matrix value\n     * @api\n     */\n    WebGLHelper.prototype.setUniformMatrixValue = function (uniform, value) {\n        this.getGL().uniformMatrix4fv(this.getUniformLocation(uniform), false, value);\n    };\n    /**\n     * Will set the currently bound buffer to an attribute of the shader program. Used by `#enableAttributes`\n     * internally.\n     * @param {string} attribName Attribute name\n     * @param {number} size Number of components per attributes\n     * @param {number} type UNSIGNED_INT, UNSIGNED_BYTE, UNSIGNED_SHORT or FLOAT\n     * @param {number} stride Stride in bytes (0 means attribs are packed)\n     * @param {number} offset Offset in bytes\n     * @private\n     */\n    WebGLHelper.prototype.enableAttributeArray_ = function (attribName, size, type, stride, offset) {\n        var location = this.getAttributeLocation(attribName);\n        // the attribute has not been found in the shaders; do not enable it\n        if (location < 0) {\n            return;\n        }\n        this.getGL().enableVertexAttribArray(location);\n        this.getGL().vertexAttribPointer(location, size, type, false, stride, offset);\n    };\n    /**\n     * Will enable the following attributes to be read from the currently bound buffer,\n     * i.e. tell the GPU where to read the different attributes in the buffer. An error in the\n     * size/type/order of attributes will most likely break the rendering and throw a WebGL exception.\n     * @param {Array<AttributeDescription>} attributes Ordered list of attributes to read from the buffer\n     * @api\n     */\n    WebGLHelper.prototype.enableAttributes = function (attributes) {\n        var stride = computeAttributesStride(attributes);\n        var offset = 0;\n        for (var i = 0; i < attributes.length; i++) {\n            var attr = attributes[i];\n            this.enableAttributeArray_(attr.name, attr.size, attr.type || FLOAT, stride, offset);\n            offset += attr.size * getByteSizeFromType(attr.type);\n        }\n    };\n    /**\n     * WebGL context was lost\n     * @private\n     */\n    WebGLHelper.prototype.handleWebGLContextLost = function () {\n        clear(this.bufferCache_);\n        this.currentProgram_ = null;\n    };\n    /**\n     * WebGL context was restored\n     * @private\n     */\n    WebGLHelper.prototype.handleWebGLContextRestored = function () { };\n    /**\n     * Will create or reuse a given webgl texture and apply the given size. If no image data\n     * specified, the texture will be empty, otherwise image data will be used and the `size`\n     * parameter will be ignored.\n     * Note: wrap parameters are set to clamp to edge, min filter is set to linear.\n     * @param {Array<number>} size Expected size of the texture\n     * @param {ImageData|HTMLImageElement|HTMLCanvasElement} [opt_data] Image data/object to bind to the texture\n     * @param {WebGLTexture} [opt_texture] Existing texture to reuse\n     * @return {WebGLTexture} The generated texture\n     * @api\n     */\n    WebGLHelper.prototype.createTexture = function (size, opt_data, opt_texture) {\n        var gl = this.getGL();\n        var texture = opt_texture || gl.createTexture();\n        // set params & size\n        var level = 0;\n        var internalFormat = gl.RGBA;\n        var border = 0;\n        var format = gl.RGBA;\n        var type = gl.UNSIGNED_BYTE;\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n        if (opt_data) {\n            gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, format, type, opt_data);\n        }\n        else {\n            gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, size[0], size[1], border, format, type, null);\n        }\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n        return texture;\n    };\n    return WebGLHelper;\n}(Disposable));\n/**\n * Compute a stride in bytes based on a list of attributes\n * @param {Array<AttributeDescription>} attributes Ordered list of attributes\n * @return {number} Stride, ie amount of values for each vertex in the vertex buffer\n * @api\n */\nexport function computeAttributesStride(attributes) {\n    var stride = 0;\n    for (var i = 0; i < attributes.length; i++) {\n        var attr = attributes[i];\n        stride += attr.size * getByteSizeFromType(attr.type);\n    }\n    return stride;\n}\n/**\n * Computes the size in byte of an attribute type.\n * @param {AttributeType} type Attribute type\n * @return {number} The size in bytes\n */\nfunction getByteSizeFromType(type) {\n    switch (type) {\n        case AttributeType.UNSIGNED_BYTE:\n            return Uint8Array.BYTES_PER_ELEMENT;\n        case AttributeType.UNSIGNED_SHORT:\n            return Uint16Array.BYTES_PER_ELEMENT;\n        case AttributeType.UNSIGNED_INT:\n            return Uint32Array.BYTES_PER_ELEMENT;\n        case AttributeType.FLOAT:\n        default:\n            return Float32Array.BYTES_PER_ELEMENT;\n    }\n}\nexport default WebGLHelper;\n//# sourceMappingURL=Helper.js.map","export function create() {\n    var source = \"var e=\\\"function\\\"==typeof Object.assign?Object.assign:function(e,n){if(null==e)throw new TypeError(\\\"Cannot convert undefined or null to object\\\");for(var t=Object(e),r=1,o=arguments.length;r<o;++r){var i=arguments[r];if(null!=i)for(var f in i)i.hasOwnProperty(f)&&(t[f]=i[f])}return t},n=\\\"GENERATE_BUFFERS\\\",t=[],r={vertexPosition:0,indexPosition:0};function o(e,n,t,r,o){e[n+0]=t,e[n+1]=r,e[n+2]=o}function i(e,n,i,f,s,a){var u=3+s,l=e[n+0],v=e[n+1],c=t;c.length=s;for(var g=0;g<c.length;g++)c[g]=e[n+2+g];var b=a?a.vertexPosition:0,h=a?a.indexPosition:0,d=b/u;return o(i,b,l,v,0),c.length&&i.set(c,b+3),o(i,b+=u,l,v,1),c.length&&i.set(c,b+3),o(i,b+=u,l,v,2),c.length&&i.set(c,b+3),o(i,b+=u,l,v,3),c.length&&i.set(c,b+3),b+=u,f[h++]=d,f[h++]=d+1,f[h++]=d+3,f[h++]=d+1,f[h++]=d+2,f[h++]=d+3,r.vertexPosition=b,r.indexPosition=h,r}var f=self;f.onmessage=function(t){var r=t.data;if(r.type===n){for(var o,s=r.customAttributesCount,a=2+s,u=new Float32Array(r.renderInstructions),l=u.length/a,v=4*l*(s+3),c=new Uint32Array(6*l),g=new Float32Array(v),b=0;b<u.length;b+=a)o=i(u,b,g,c,s,o);var h=e({vertexBuffer:g.buffer,indexBuffer:c.buffer,renderInstructions:u.buffer},r);f.postMessage(h,[g.buffer,c.buffer,u.buffer])}};\";\n    return new Worker(typeof Blob === 'undefined'\n        ? 'data:application/javascript;base64,' + Buffer.from(source, 'binary').toString('base64')\n        : URL.createObjectURL(new Blob([source], { type: 'application/javascript' })));\n}\n//# sourceMappingURL=webgl.js.map","/**\n * @module ol/webgl\n */\nimport { SAFARI_BUG_237906 } from './has.js';\nimport { assign } from './obj.js';\n/**\n * Constants taken from goog.webgl\n */\n/**\n * Used by {@link module:ol/webgl/Helper~WebGLHelper} for buffers containing vertices data, such as\n * position, color, texture coordinate, etc. These vertices are then referenced by an index buffer\n * to be drawn on screen (see {@link module:ol/webgl.ELEMENT_ARRAY_BUFFER}).\n * @const\n * @type {number}\n * @api\n */\nexport var ARRAY_BUFFER = 0x8892;\n/**\n * Used by {@link module:ol/webgl/Helper~WebGLHelper} for buffers containing indices data.\n * Index buffers are essentially lists of references to vertices defined in a vertex buffer\n * (see {@link module:ol/webgl.ARRAY_BUFFER}), and define the primitives (triangles) to be drawn.\n * @const\n * @type {number}\n * @api\n */\nexport var ELEMENT_ARRAY_BUFFER = 0x8893;\n/**\n * Used by {link module:ol/webgl/Buffer~WebGLArrayBuffer}.\n * @const\n * @type {number}\n * @api\n */\nexport var STREAM_DRAW = 0x88e0;\n/**\n * Used by {link module:ol/webgl/Buffer~WebGLArrayBuffer}.\n * @const\n * @type {number}\n * @api\n */\nexport var STATIC_DRAW = 0x88e4;\n/**\n * Used by {link module:ol/webgl/Buffer~WebGLArrayBuffer}.\n * @const\n * @type {number}\n * @api\n */\nexport var DYNAMIC_DRAW = 0x88e8;\n/**\n * @const\n * @type {number}\n */\nexport var UNSIGNED_BYTE = 0x1401;\n/**\n * @const\n * @type {number}\n */\nexport var UNSIGNED_SHORT = 0x1403;\n/**\n * @const\n * @type {number}\n */\nexport var UNSIGNED_INT = 0x1405;\n/**\n * @const\n * @type {number}\n */\nexport var FLOAT = 0x1406;\n/** end of goog.webgl constants\n */\n/**\n * @const\n * @type {Array<string>}\n */\nvar CONTEXT_IDS = ['experimental-webgl', 'webgl', 'webkit-3d', 'moz-webgl'];\n/**\n * @param {HTMLCanvasElement} canvas Canvas.\n * @param {Object} [opt_attributes] Attributes.\n * @return {WebGLRenderingContext} WebGL rendering context.\n */\nexport function getContext(canvas, opt_attributes) {\n    var attributes = assign({\n        preserveDrawingBuffer: true,\n        antialias: SAFARI_BUG_237906 ? false : true, // https://bugs.webkit.org/show_bug.cgi?id=237906\n    }, opt_attributes);\n    var ii = CONTEXT_IDS.length;\n    for (var i = 0; i < ii; ++i) {\n        try {\n            var context = canvas.getContext(CONTEXT_IDS[i], attributes);\n            if (context) {\n                return /** @type {!WebGLRenderingContext} */ (context);\n            }\n        }\n        catch (e) {\n            // pass\n        }\n    }\n    return null;\n}\n/**\n * @type {Array<string>}\n */\nvar supportedExtensions;\n/**\n * @return {Array<string>} List of supported WebGL extensions.\n */\nexport function getSupportedExtensions() {\n    if (!supportedExtensions) {\n        var canvas = document.createElement('canvas');\n        var gl = getContext(canvas);\n        if (gl) {\n            supportedExtensions = gl.getSupportedExtensions();\n        }\n    }\n    return supportedExtensions;\n}\n//# sourceMappingURL=webgl.js.map","/**\n * @module ol/webgl/PaletteTexture\n */\nvar PaletteTexture = /** @class */ (function () {\n    /**\n     * @param {string} name The name of the texture.\n     * @param {Uint8Array} data The texture data.\n     */\n    function PaletteTexture(name, data) {\n        this.name = name;\n        this.data = data;\n        /**\n         * @type {WebGLTexture}\n         * @private\n         */\n        this.texture_ = null;\n    }\n    /**\n     * @param {WebGLRenderingContext} gl Rendering context.\n     * @return {WebGLTexture} The texture.\n     */\n    PaletteTexture.prototype.getTexture = function (gl) {\n        if (!this.texture_) {\n            var texture = gl.createTexture();\n            gl.bindTexture(gl.TEXTURE_2D, texture);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.data.length / 4, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, this.data);\n            this.texture_ = texture;\n        }\n        return this.texture_;\n    };\n    return PaletteTexture;\n}());\nexport default PaletteTexture;\n//# sourceMappingURL=PaletteTexture.js.map","/**\n * @module ol/webgl/Buffer\n */\nimport { ARRAY_BUFFER, DYNAMIC_DRAW, ELEMENT_ARRAY_BUFFER, STATIC_DRAW, STREAM_DRAW, } from '../webgl.js';\nimport { assert } from '../asserts.js';\n/**\n * Used to describe the intended usage for the data: `STATIC_DRAW`, `STREAM_DRAW`\n * or `DYNAMIC_DRAW`.\n * @enum {number}\n */\nexport var BufferUsage = {\n    STATIC_DRAW: STATIC_DRAW,\n    STREAM_DRAW: STREAM_DRAW,\n    DYNAMIC_DRAW: DYNAMIC_DRAW,\n};\n/**\n * @classdesc\n * Object used to store an array of data as well as usage information for that data.\n * Stores typed arrays internally, either Float32Array or Uint16/32Array depending on\n * the buffer type (ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER) and available extensions.\n *\n * To populate the array, you can either use:\n * * A size using `#ofSize(buffer)`\n * * An `ArrayBuffer` object using `#fromArrayBuffer(buffer)`\n * * A plain array using `#fromArray(array)`\n *\n * Note:\n * See the documentation of [WebGLRenderingContext.bufferData](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bufferData)\n * for more info on buffer usage.\n * @api\n */\nvar WebGLArrayBuffer = /** @class */ (function () {\n    /**\n     * @param {number} type Buffer type, either ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER.\n     * @param {number} [opt_usage] Intended usage, either `STATIC_DRAW`, `STREAM_DRAW` or `DYNAMIC_DRAW`.\n     * Default is `DYNAMIC_DRAW`.\n     */\n    function WebGLArrayBuffer(type, opt_usage) {\n        /**\n         * @private\n         * @type {Float32Array|Uint32Array}\n         */\n        this.array = null;\n        /**\n         * @private\n         * @type {number}\n         */\n        this.type = type;\n        assert(type === ARRAY_BUFFER || type === ELEMENT_ARRAY_BUFFER, 62);\n        /**\n         * @private\n         * @type {number}\n         */\n        this.usage = opt_usage !== undefined ? opt_usage : BufferUsage.STATIC_DRAW;\n    }\n    /**\n     * Populates the buffer with an array of the given size (all values will be zeroes).\n     * @param {number} size Array size\n     */\n    WebGLArrayBuffer.prototype.ofSize = function (size) {\n        this.array = new (getArrayClassForType(this.type))(size);\n    };\n    /**\n     * Populates the buffer with an array of the given size (all values will be zeroes).\n     * @param {Array<number>} array Numerical array\n     */\n    WebGLArrayBuffer.prototype.fromArray = function (array) {\n        var arrayClass = getArrayClassForType(this.type);\n        this.array = arrayClass.from\n            ? arrayClass.from(array)\n            : new arrayClass(array);\n    };\n    /**\n     * Populates the buffer with a raw binary array buffer.\n     * @param {ArrayBuffer} buffer Raw binary buffer to populate the array with. Note that this buffer must have been\n     * initialized for the same typed array class.\n     */\n    WebGLArrayBuffer.prototype.fromArrayBuffer = function (buffer) {\n        this.array = new (getArrayClassForType(this.type))(buffer);\n    };\n    /**\n     * @return {number} Buffer type.\n     */\n    WebGLArrayBuffer.prototype.getType = function () {\n        return this.type;\n    };\n    /**\n     * Will return null if the buffer was not initialized\n     * @return {Float32Array|Uint32Array} Array.\n     */\n    WebGLArrayBuffer.prototype.getArray = function () {\n        return this.array;\n    };\n    /**\n     * @return {number} Usage.\n     */\n    WebGLArrayBuffer.prototype.getUsage = function () {\n        return this.usage;\n    };\n    /**\n     * Will return 0 if the buffer is not initialized\n     * @return {number} Array size\n     */\n    WebGLArrayBuffer.prototype.getSize = function () {\n        return this.array ? this.array.length : 0;\n    };\n    return WebGLArrayBuffer;\n}());\n/**\n * Returns a typed array constructor based on the given buffer type\n * @param {number} type Buffer type, either ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER.\n * @return {Float32ArrayConstructor|Uint32ArrayConstructor} The typed array class to use for this buffer.\n */\nexport function getArrayClassForType(type) {\n    switch (type) {\n        case ARRAY_BUFFER:\n            return Float32Array;\n        case ELEMENT_ARRAY_BUFFER:\n            return Uint32Array;\n        default:\n            return Float32Array;\n    }\n}\nexport default WebGLArrayBuffer;\n//# sourceMappingURL=Buffer.js.map","/**\n * @module ol/vec/mat4\n */\n/**\n * @return {Array<number>} \"4x4 matrix representing a 3D identity transform.\"\n */\nexport function create() {\n    return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n}\n/**\n * @param {Array<number>} mat4 Flattened 4x4 matrix receiving the result.\n * @param {import(\"../transform.js\").Transform} transform Transformation matrix.\n * @return {Array<number>} \"2D transformation matrix as flattened 4x4 matrix.\"\n */\nexport function fromTransform(mat4, transform) {\n    mat4[0] = transform[0];\n    mat4[1] = transform[1];\n    mat4[4] = transform[2];\n    mat4[5] = transform[3];\n    mat4[12] = transform[4];\n    mat4[13] = transform[5];\n    return mat4;\n}\n//# sourceMappingURL=mat4.js.map","/**\n * A wrapper class to simplify rendering to a texture instead of the final canvas\n * @module ol/webgl/RenderTarget\n */\nimport { equals } from '../array.js';\n// for pixel color reading\nvar tmpArray4 = new Uint8Array(4);\n/**\n * @classdesc\n * This class is a wrapper around the association of both a `WebGLTexture` and a `WebGLFramebuffer` instances,\n * simplifying initialization and binding for rendering.\n * @api\n */\nvar WebGLRenderTarget = /** @class */ (function () {\n    /**\n     * @param {import(\"./Helper.js\").default} helper WebGL helper; mandatory.\n     * @param {Array<number>} [opt_size] Expected size of the render target texture; note: this can be changed later on.\n     */\n    function WebGLRenderTarget(helper, opt_size) {\n        /**\n         * @private\n         * @type {import(\"./Helper.js\").default}\n         */\n        this.helper_ = helper;\n        var gl = helper.getGL();\n        /**\n         * @private\n         * @type {WebGLTexture}\n         */\n        this.texture_ = gl.createTexture();\n        /**\n         * @private\n         * @type {WebGLFramebuffer}\n         */\n        this.framebuffer_ = gl.createFramebuffer();\n        /**\n         * @type {Array<number>}\n         * @private\n         */\n        this.size_ = opt_size || [1, 1];\n        /**\n         * @type {Uint8Array}\n         * @private\n         */\n        this.data_ = new Uint8Array(0);\n        /**\n         * @type {boolean}\n         * @private\n         */\n        this.dataCacheDirty_ = true;\n        this.updateSize_();\n    }\n    /**\n     * Changes the size of the render target texture. Note: will do nothing if the size\n     * is already the same.\n     * @param {Array<number>} size Expected size of the render target texture\n     * @api\n     */\n    WebGLRenderTarget.prototype.setSize = function (size) {\n        if (equals(size, this.size_)) {\n            return;\n        }\n        this.size_[0] = size[0];\n        this.size_[1] = size[1];\n        this.updateSize_();\n    };\n    /**\n     * Returns the size of the render target texture\n     * @return {Array<number>} Size of the render target texture\n     * @api\n     */\n    WebGLRenderTarget.prototype.getSize = function () {\n        return this.size_;\n    };\n    /**\n     * This will cause following calls to `#readAll` or `#readPixel` to download the content of the\n     * render target into memory, which is an expensive operation.\n     * This content will be kept in cache but should be cleared after each new render.\n     * @api\n     */\n    WebGLRenderTarget.prototype.clearCachedData = function () {\n        this.dataCacheDirty_ = true;\n    };\n    /**\n     * Returns the full content of the frame buffer as a series of r, g, b, a components\n     * in the 0-255 range (unsigned byte).\n     * @return {Uint8Array} Integer array of color values\n     * @api\n     */\n    WebGLRenderTarget.prototype.readAll = function () {\n        if (this.dataCacheDirty_) {\n            var size = this.size_;\n            var gl = this.helper_.getGL();\n            gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer_);\n            gl.readPixels(0, 0, size[0], size[1], gl.RGBA, gl.UNSIGNED_BYTE, this.data_);\n            this.dataCacheDirty_ = false;\n        }\n        return this.data_;\n    };\n    /**\n     * Reads one pixel of the frame buffer as an array of r, g, b, a components\n     * in the 0-255 range (unsigned byte).\n     * If x and/or y are outside of existing data, an array filled with 0 is returned.\n     * @param {number} x Pixel coordinate\n     * @param {number} y Pixel coordinate\n     * @return {Uint8Array} Integer array with one color value (4 components)\n     * @api\n     */\n    WebGLRenderTarget.prototype.readPixel = function (x, y) {\n        if (x < 0 || y < 0 || x > this.size_[0] || y >= this.size_[1]) {\n            tmpArray4[0] = 0;\n            tmpArray4[1] = 0;\n            tmpArray4[2] = 0;\n            tmpArray4[3] = 0;\n            return tmpArray4;\n        }\n        this.readAll();\n        var index = Math.floor(x) + (this.size_[1] - Math.floor(y) - 1) * this.size_[0];\n        tmpArray4[0] = this.data_[index * 4];\n        tmpArray4[1] = this.data_[index * 4 + 1];\n        tmpArray4[2] = this.data_[index * 4 + 2];\n        tmpArray4[3] = this.data_[index * 4 + 3];\n        return tmpArray4;\n    };\n    /**\n     * @return {WebGLTexture} Texture to render to\n     */\n    WebGLRenderTarget.prototype.getTexture = function () {\n        return this.texture_;\n    };\n    /**\n     * @return {WebGLFramebuffer} Frame buffer of the render target\n     */\n    WebGLRenderTarget.prototype.getFramebuffer = function () {\n        return this.framebuffer_;\n    };\n    /**\n     * @private\n     */\n    WebGLRenderTarget.prototype.updateSize_ = function () {\n        var size = this.size_;\n        var gl = this.helper_.getGL();\n        this.texture_ = this.helper_.createTexture(size, null, this.texture_);\n        gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer_);\n        gl.viewport(0, 0, size[0], size[1]);\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.texture_, 0);\n        this.data_ = new Uint8Array(size[0] * size[1] * 4);\n    };\n    return WebGLRenderTarget;\n}());\nexport default WebGLRenderTarget;\n//# sourceMappingURL=RenderTarget.js.map","/**\n * @module ol/xml\n */\nimport { extend } from './array.js';\n/**\n * When using {@link module:ol/xml.makeChildAppender} or\n * {@link module:ol/xml.makeSimpleNodeFactory}, the top `objectStack` item needs\n * to have this structure.\n * @typedef {Object} NodeStackItem\n * @property {Element} node Node.\n */\n/**\n * @typedef {function(Element, Array<*>): void} Parser\n */\n/**\n * @typedef {function(Element, *, Array<*>): void} Serializer\n */\n/**\n * @type {string}\n */\nexport var XML_SCHEMA_INSTANCE_URI = 'http://www.w3.org/2001/XMLSchema-instance';\n/**\n * @param {string} namespaceURI Namespace URI.\n * @param {string} qualifiedName Qualified name.\n * @return {Element} Node.\n */\nexport function createElementNS(namespaceURI, qualifiedName) {\n    return getDocument().createElementNS(namespaceURI, qualifiedName);\n}\n/**\n * Recursively grab all text content of child nodes into a single string.\n * @param {Node} node Node.\n * @param {boolean} normalizeWhitespace Normalize whitespace: remove all line\n * breaks.\n * @return {string} All text content.\n * @api\n */\nexport function getAllTextContent(node, normalizeWhitespace) {\n    return getAllTextContent_(node, normalizeWhitespace, []).join('');\n}\n/**\n * Recursively grab all text content of child nodes into a single string.\n * @param {Node} node Node.\n * @param {boolean} normalizeWhitespace Normalize whitespace: remove all line\n * breaks.\n * @param {Array<string>} accumulator Accumulator.\n * @private\n * @return {Array<string>} Accumulator.\n */\nexport function getAllTextContent_(node, normalizeWhitespace, accumulator) {\n    if (node.nodeType == Node.CDATA_SECTION_NODE ||\n        node.nodeType == Node.TEXT_NODE) {\n        if (normalizeWhitespace) {\n            accumulator.push(String(node.nodeValue).replace(/(\\r\\n|\\r|\\n)/g, ''));\n        }\n        else {\n            accumulator.push(node.nodeValue);\n        }\n    }\n    else {\n        var n = void 0;\n        for (n = node.firstChild; n; n = n.nextSibling) {\n            getAllTextContent_(n, normalizeWhitespace, accumulator);\n        }\n    }\n    return accumulator;\n}\n/**\n * @param {Object} object Object.\n * @return {boolean} Is a document.\n */\nexport function isDocument(object) {\n    return 'documentElement' in object;\n}\n/**\n * @param {Element} node Node.\n * @param {?string} namespaceURI Namespace URI.\n * @param {string} name Attribute name.\n * @return {string} Value\n */\nexport function getAttributeNS(node, namespaceURI, name) {\n    return node.getAttributeNS(namespaceURI, name) || '';\n}\n/**\n * Parse an XML string to an XML Document.\n * @param {string} xml XML.\n * @return {Document} Document.\n * @api\n */\nexport function parse(xml) {\n    return new DOMParser().parseFromString(xml, 'application/xml');\n}\n/**\n * Make an array extender function for extending the array at the top of the\n * object stack.\n * @param {function(this: T, Node, Array<*>): (Array<*>|undefined)} valueReader Value reader.\n * @param {T} [opt_this] The object to use as `this` in `valueReader`.\n * @return {Parser} Parser.\n * @template T\n */\nexport function makeArrayExtender(valueReader, opt_this) {\n    return (\n    /**\n     * @param {Node} node Node.\n     * @param {Array<*>} objectStack Object stack.\n     */\n    function (node, objectStack) {\n        var value = valueReader.call(opt_this !== undefined ? opt_this : this, node, objectStack);\n        if (value !== undefined) {\n            var array = /** @type {Array<*>} */ (objectStack[objectStack.length - 1]);\n            extend(array, value);\n        }\n    });\n}\n/**\n * Make an array pusher function for pushing to the array at the top of the\n * object stack.\n * @param {function(this: T, Element, Array<*>): *} valueReader Value reader.\n * @param {T} [opt_this] The object to use as `this` in `valueReader`.\n * @return {Parser} Parser.\n * @template T\n */\nexport function makeArrayPusher(valueReader, opt_this) {\n    return (\n    /**\n     * @param {Element} node Node.\n     * @param {Array<*>} objectStack Object stack.\n     */\n    function (node, objectStack) {\n        var value = valueReader.call(opt_this !== undefined ? opt_this : this, node, objectStack);\n        if (value !== undefined) {\n            var array = /** @type {Array<*>} */ (objectStack[objectStack.length - 1]);\n            array.push(value);\n        }\n    });\n}\n/**\n * Make an object stack replacer function for replacing the object at the\n * top of the stack.\n * @param {function(this: T, Node, Array<*>): *} valueReader Value reader.\n * @param {T} [opt_this] The object to use as `this` in `valueReader`.\n * @return {Parser} Parser.\n * @template T\n */\nexport function makeReplacer(valueReader, opt_this) {\n    return (\n    /**\n     * @param {Node} node Node.\n     * @param {Array<*>} objectStack Object stack.\n     */\n    function (node, objectStack) {\n        var value = valueReader.call(opt_this !== undefined ? opt_this : this, node, objectStack);\n        if (value !== undefined) {\n            objectStack[objectStack.length - 1] = value;\n        }\n    });\n}\n/**\n * Make an object property pusher function for adding a property to the\n * object at the top of the stack.\n * @param {function(this: T, Element, Array<*>): *} valueReader Value reader.\n * @param {string} [opt_property] Property.\n * @param {T} [opt_this] The object to use as `this` in `valueReader`.\n * @return {Parser} Parser.\n * @template T\n */\nexport function makeObjectPropertyPusher(valueReader, opt_property, opt_this) {\n    return (\n    /**\n     * @param {Element} node Node.\n     * @param {Array<*>} objectStack Object stack.\n     */\n    function (node, objectStack) {\n        var value = valueReader.call(opt_this !== undefined ? opt_this : this, node, objectStack);\n        if (value !== undefined) {\n            var object = /** @type {!Object} */ (objectStack[objectStack.length - 1]);\n            var property = opt_property !== undefined ? opt_property : node.localName;\n            var array = void 0;\n            if (property in object) {\n                array = object[property];\n            }\n            else {\n                array = [];\n                object[property] = array;\n            }\n            array.push(value);\n        }\n    });\n}\n/**\n * Make an object property setter function.\n * @param {function(this: T, Element, Array<*>): *} valueReader Value reader.\n * @param {string} [opt_property] Property.\n * @param {T} [opt_this] The object to use as `this` in `valueReader`.\n * @return {Parser} Parser.\n * @template T\n */\nexport function makeObjectPropertySetter(valueReader, opt_property, opt_this) {\n    return (\n    /**\n     * @param {Element} node Node.\n     * @param {Array<*>} objectStack Object stack.\n     */\n    function (node, objectStack) {\n        var value = valueReader.call(opt_this !== undefined ? opt_this : this, node, objectStack);\n        if (value !== undefined) {\n            var object = /** @type {!Object} */ (objectStack[objectStack.length - 1]);\n            var property = opt_property !== undefined ? opt_property : node.localName;\n            object[property] = value;\n        }\n    });\n}\n/**\n * Create a serializer that appends nodes written by its `nodeWriter` to its\n * designated parent. The parent is the `node` of the\n * {@link module:ol/xml~NodeStackItem} at the top of the `objectStack`.\n * @param {function(this: T, Node, V, Array<*>): void} nodeWriter Node writer.\n * @param {T} [opt_this] The object to use as `this` in `nodeWriter`.\n * @return {Serializer} Serializer.\n * @template T, V\n */\nexport function makeChildAppender(nodeWriter, opt_this) {\n    return function (node, value, objectStack) {\n        nodeWriter.call(opt_this !== undefined ? opt_this : this, node, value, objectStack);\n        var parent = /** @type {NodeStackItem} */ (objectStack[objectStack.length - 1]);\n        var parentNode = parent.node;\n        parentNode.appendChild(node);\n    };\n}\n/**\n * Create a serializer that calls the provided `nodeWriter` from\n * {@link module:ol/xml.serialize}. This can be used by the parent writer to have the\n * `nodeWriter` called with an array of values when the `nodeWriter` was\n * designed to serialize a single item. An example would be a LineString\n * geometry writer, which could be reused for writing MultiLineString\n * geometries.\n * @param {function(this: T, Element, V, Array<*>): void} nodeWriter Node writer.\n * @param {T} [opt_this] The object to use as `this` in `nodeWriter`.\n * @return {Serializer} Serializer.\n * @template T, V\n */\nexport function makeArraySerializer(nodeWriter, opt_this) {\n    var serializersNS, nodeFactory;\n    return function (node, value, objectStack) {\n        if (serializersNS === undefined) {\n            serializersNS = {};\n            var serializers = {};\n            serializers[node.localName] = nodeWriter;\n            serializersNS[node.namespaceURI] = serializers;\n            nodeFactory = makeSimpleNodeFactory(node.localName);\n        }\n        serialize(serializersNS, nodeFactory, value, objectStack);\n    };\n}\n/**\n * Create a node factory which can use the `opt_keys` passed to\n * {@link module:ol/xml.serialize} or {@link module:ol/xml.pushSerializeAndPop} as node names,\n * or a fixed node name. The namespace of the created nodes can either be fixed,\n * or the parent namespace will be used.\n * @param {string} [opt_nodeName] Fixed node name which will be used for all\n *     created nodes. If not provided, the 3rd argument to the resulting node\n *     factory needs to be provided and will be the nodeName.\n * @param {string} [opt_namespaceURI] Fixed namespace URI which will be used for\n *     all created nodes. If not provided, the namespace of the parent node will\n *     be used.\n * @return {function(*, Array<*>, string=): (Node|undefined)} Node factory.\n */\nexport function makeSimpleNodeFactory(opt_nodeName, opt_namespaceURI) {\n    var fixedNodeName = opt_nodeName;\n    return (\n    /**\n     * @param {*} value Value.\n     * @param {Array<*>} objectStack Object stack.\n     * @param {string} [opt_nodeName] Node name.\n     * @return {Node} Node.\n     */\n    function (value, objectStack, opt_nodeName) {\n        var context = /** @type {NodeStackItem} */ (objectStack[objectStack.length - 1]);\n        var node = context.node;\n        var nodeName = fixedNodeName;\n        if (nodeName === undefined) {\n            nodeName = opt_nodeName;\n        }\n        var namespaceURI = opt_namespaceURI !== undefined ? opt_namespaceURI : node.namespaceURI;\n        return createElementNS(namespaceURI, /** @type {string} */ (nodeName));\n    });\n}\n/**\n * A node factory that creates a node using the parent's `namespaceURI` and the\n * `nodeName` passed by {@link module:ol/xml.serialize} or\n * {@link module:ol/xml.pushSerializeAndPop} to the node factory.\n * @const\n * @type {function(*, Array<*>, string=): (Node|undefined)}\n */\nexport var OBJECT_PROPERTY_NODE_FACTORY = makeSimpleNodeFactory();\n/**\n * Create an array of `values` to be used with {@link module:ol/xml.serialize} or\n * {@link module:ol/xml.pushSerializeAndPop}, where `orderedKeys` has to be provided as\n * `opt_key` argument.\n * @param {Object<string, *>} object Key-value pairs for the sequence. Keys can\n *     be a subset of the `orderedKeys`.\n * @param {Array<string>} orderedKeys Keys in the order of the sequence.\n * @return {Array<*>} Values in the order of the sequence. The resulting array\n *     has the same length as the `orderedKeys` array. Values that are not\n *     present in `object` will be `undefined` in the resulting array.\n */\nexport function makeSequence(object, orderedKeys) {\n    var length = orderedKeys.length;\n    var sequence = new Array(length);\n    for (var i = 0; i < length; ++i) {\n        sequence[i] = object[orderedKeys[i]];\n    }\n    return sequence;\n}\n/**\n * Create a namespaced structure, using the same values for each namespace.\n * This can be used as a starting point for versioned parsers, when only a few\n * values are version specific.\n * @param {Array<string>} namespaceURIs Namespace URIs.\n * @param {T} structure Structure.\n * @param {Object<string, T>} [opt_structureNS] Namespaced structure to add to.\n * @return {Object<string, T>} Namespaced structure.\n * @template T\n */\nexport function makeStructureNS(namespaceURIs, structure, opt_structureNS) {\n    /**\n     * @type {Object<string, T>}\n     */\n    var structureNS = opt_structureNS !== undefined ? opt_structureNS : {};\n    var i, ii;\n    for (i = 0, ii = namespaceURIs.length; i < ii; ++i) {\n        structureNS[namespaceURIs[i]] = structure;\n    }\n    return structureNS;\n}\n/**\n * Parse a node using the parsers and object stack.\n * @param {Object<string, Object<string, Parser>>} parsersNS\n *     Parsers by namespace.\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @param {*} [opt_this] The object to use as `this`.\n */\nexport function parseNode(parsersNS, node, objectStack, opt_this) {\n    var n;\n    for (n = node.firstElementChild; n; n = n.nextElementSibling) {\n        var parsers = parsersNS[n.namespaceURI];\n        if (parsers !== undefined) {\n            var parser = parsers[n.localName];\n            if (parser !== undefined) {\n                parser.call(opt_this, n, objectStack);\n            }\n        }\n    }\n}\n/**\n * Push an object on top of the stack, parse and return the popped object.\n * @param {T} object Object.\n * @param {Object<string, Object<string, Parser>>} parsersNS\n *     Parsers by namespace.\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @param {*} [opt_this] The object to use as `this`.\n * @return {T} Object.\n * @template T\n */\nexport function pushParseAndPop(object, parsersNS, node, objectStack, opt_this) {\n    objectStack.push(object);\n    parseNode(parsersNS, node, objectStack, opt_this);\n    return /** @type {T} */ (objectStack.pop());\n}\n/**\n * Walk through an array of `values` and call a serializer for each value.\n * @param {Object<string, Object<string, Serializer>>} serializersNS\n *     Namespaced serializers.\n * @param {function(this: T, *, Array<*>, (string|undefined)): (Node|undefined)} nodeFactory\n *     Node factory. The `nodeFactory` creates the node whose namespace and name\n *     will be used to choose a node writer from `serializersNS`. This\n *     separation allows us to decide what kind of node to create, depending on\n *     the value we want to serialize. An example for this would be different\n *     geometry writers based on the geometry type.\n * @param {Array<*>} values Values to serialize. An example would be an array\n *     of {@link module:ol/Feature~Feature} instances.\n * @param {Array<*>} objectStack Node stack.\n * @param {Array<string>} [opt_keys] Keys of the `values`. Will be passed to the\n *     `nodeFactory`. This is used for serializing object literals where the\n *     node name relates to the property key. The array length of `opt_keys` has\n *     to match the length of `values`. For serializing a sequence, `opt_keys`\n *     determines the order of the sequence.\n * @param {T} [opt_this] The object to use as `this` for the node factory and\n *     serializers.\n * @template T\n */\nexport function serialize(serializersNS, nodeFactory, values, objectStack, opt_keys, opt_this) {\n    var length = (opt_keys !== undefined ? opt_keys : values).length;\n    var value, node;\n    for (var i = 0; i < length; ++i) {\n        value = values[i];\n        if (value !== undefined) {\n            node = nodeFactory.call(opt_this !== undefined ? opt_this : this, value, objectStack, opt_keys !== undefined ? opt_keys[i] : undefined);\n            if (node !== undefined) {\n                serializersNS[node.namespaceURI][node.localName].call(opt_this, node, value, objectStack);\n            }\n        }\n    }\n}\n/**\n * @param {O} object Object.\n * @param {Object<string, Object<string, Serializer>>} serializersNS\n *     Namespaced serializers.\n * @param {function(this: T, *, Array<*>, (string|undefined)): (Node|undefined)} nodeFactory\n *     Node factory. The `nodeFactory` creates the node whose namespace and name\n *     will be used to choose a node writer from `serializersNS`. This\n *     separation allows us to decide what kind of node to create, depending on\n *     the value we want to serialize. An example for this would be different\n *     geometry writers based on the geometry type.\n * @param {Array<*>} values Values to serialize. An example would be an array\n *     of {@link module:ol/Feature~Feature} instances.\n * @param {Array<*>} objectStack Node stack.\n * @param {Array<string>} [opt_keys] Keys of the `values`. Will be passed to the\n *     `nodeFactory`. This is used for serializing object literals where the\n *     node name relates to the property key. The array length of `opt_keys` has\n *     to match the length of `values`. For serializing a sequence, `opt_keys`\n *     determines the order of the sequence.\n * @param {T} [opt_this] The object to use as `this` for the node factory and\n *     serializers.\n * @return {O|undefined} Object.\n * @template O, T\n */\nexport function pushSerializeAndPop(object, serializersNS, nodeFactory, values, objectStack, opt_keys, opt_this) {\n    objectStack.push(object);\n    serialize(serializersNS, nodeFactory, values, objectStack, opt_keys, opt_this);\n    return /** @type {O|undefined} */ (objectStack.pop());\n}\nvar xmlSerializer_ = undefined;\n/**\n * Register a XMLSerializer. Can be used  to inject a XMLSerializer\n * where there is no globally available implementation.\n *\n * @param {XMLSerializer} xmlSerializer A XMLSerializer.\n * @api\n */\nexport function registerXMLSerializer(xmlSerializer) {\n    xmlSerializer_ = xmlSerializer;\n}\n/**\n * @return {XMLSerializer} The XMLSerializer.\n */\nexport function getXMLSerializer() {\n    if (xmlSerializer_ === undefined && typeof XMLSerializer !== 'undefined') {\n        xmlSerializer_ = new XMLSerializer();\n    }\n    return xmlSerializer_;\n}\nvar document_ = undefined;\n/**\n * Register a Document to use when creating nodes for XML serializations. Can be used\n * to inject a Document where there is no globally available implementation.\n *\n * @param {Document} document A Document.\n * @api\n */\nexport function registerDocument(document) {\n    document_ = document;\n}\n/**\n * Get a document that should be used when creating nodes for XML serializations.\n * @return {Document} The document.\n */\nexport function getDocument() {\n    if (document_ === undefined && typeof document !== 'undefined') {\n        document_ = document.implementation.createDocument('', '', null);\n    }\n    return document_;\n}\n//# sourceMappingURL=xml.js.map"],"sourceRoot":""}