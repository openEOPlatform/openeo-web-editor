{"version":3,"sources":["webpack:///./src/formats/browserImage.js","webpack:///./src/formats/csv.js","webpack:///./src/formats/native.js","webpack:///./src/formats/tsv.js","webpack:///./src/formats/formatRegistry.js","webpack:///./src/formats/format.js","webpack:///./src/formats/geotiff.js","webpack:///./src/export/exporter.js","webpack:///./src/export/javascript.js","webpack:///./src/formats/json.js"],"names":["BrowserImage","SupportedFormat","constructor","asset","super","isBinary","img","Image","crossOrigin","src","this","getUrl","CSV","delim","data","array","parseCSV","trim","map","row","col","num","Number","parseFloat","isNaN","str","arr","quote","c","length","cc","nc","includes","NativeType","TSV","FormatRegistry","createFilesFromSTAC","stac","resource","files","Object","values","assets","createFileFromAsset","forEach","file","setContext","createFilesFromBlob","Blob","Error","stac_version","type","geometry","properties","links","result","href","URL","createObjectURL","mime","contentType","parse","toLowerCase","JSON_","GeoTIFF","extension","split","pop","error","console","log","UnsupportedFormat","Format","assign","context","getContext","canGroup","download","filename","tempLink","document","createElement","style","display","setAttribute","Utils","makeFileName","body","appendChild","click","removeChild","connection","loaded","fetchData","blob","url","startsWith","response","fetch","promise","Promise","resolve","reject","reader","FileReader","onload","event","target","onerror","readAsBinaryString","readAsText","parseData","component","icon","props","events","GDAL_MIN","GDAL_MAX","GDAL_NAME","removableLayers","bands","nodata","projection","extent","convertToRGB","parseMetadata","stacHasExtent","ProjManager","addFromStac","Array","isArray","parseNodata","band","i","setBandInfo","name","isObject","statistics","min","minimum","max","maximum","push","code","tiff","tiffFromUrl","getImage","getSamplesPerPixel","getGDALMetadata","dummy","getArrayForSample","isFinite","getMinForDataType","getMaxForDataType","getGDALNoData","geoKeys","ProjectedCSTypeGeoKey","GeographicTypeGeoKey","ProjLinearUnitsGeoKey","GeogAngularUnitsGeoKey","get","units","unitsFromCode","Projection","bbox","getBoundingBox","toUserExtent","warn","fileDirectory","ColorMap","from","greenOffset","blueOffset","colorMap","Math","trunc","PhotometricInterpretation","photometricInterpretations","CMYK","YCbCr","CIELab","id","getNoData","getBands","getProjection","getExtent","getColorMap","Int8Array","Int16Array","Int32Array","Float32Array","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","ProcessImpl","BaseProcess","process","exporter","node","generateFunction","Exporter","ProcessGraph","registry","indent","fnCounter","allowEmpty","fillUndefinedParameters","createProcessGraphInstance","pg","processRegistry","getJsonSchemaValidator","copyProcessGraphInstanceProperties","createProcessInstance","isKeyword","keyword","getKeywords","comment","generateImports","generateConnection","generateAuthentication","generateBuilder","generateMetadata","generateMissingParameter","generateFunctionParams","parameters","p","default","e","generateResult","makeNull","makeBoolean","val","makeArray","join","makeObject","obj","mapObject","key","makeString","JSON","stringify","makeNumber","value","mapObjectValues","hasComment","newLine","generateMetadataEntry","args","onExporter","filter","newArgs","from_node","var","from_parameter","fnName","resolveArguments","callback","getArgument","getCallbackParameters","execute","replacement","generateCallback","ordered","arguments","async","resolveCallback","orderArguments","getProcessGraph","getProcess","orderedArgs","param","optional","definedValueFound","prefix","String","match","getTab","addCode","tabs","repeat","lines","line","count","getServerUrl","params","getProcessParameters","getResultNode","validate","reset","executeNodes","getStartNodes","isMath","_isMath","KEYWORDS","JavaScript","generateFormula","parsed","variable","builderName","getParent","generateArguments","namespace","description","processId","process_id","arg","parameter","paramName","formula","toFormulaString","escaped","toCode","resultNode","nodeToFormula","getArrayElementPlaceholder","getArgumentType","getRawArgument","index","findIndex","parentOperator","arrayElement","operator","Formula","reverseOperatorMapping","isArrayData","arrayOperatorMapping","convertValue","refNode","getNode","argList","v","strongOps","weakOps","isGeoJson","detectGeoJson"],"mappings":"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","file":"js/chunk-10f52f91.66be56bb.js","sourcesContent":["import { SupportedFormat } from './format';\n\nclass BrowserImage extends SupportedFormat {\n\n\tconstructor(asset) {\n\t\tsuper(asset, 'ImageViewer', 'fa-image');\n\t}\n\n\tisBinary() {\n\t\treturn true;\n\t}\n\n\tasync fetchData() {\n\t\tlet img = new Image();\n\t\timg.crossOrigin = 'anonymous';\n\t\timg.src = this.getUrl();\n\t\treturn img;\n\t}\n\n}\n\nexport default BrowserImage;","import { SupportedFormat } from './format';\n\nclass CSV extends SupportedFormat {\n\n\tconstructor(asset, delim = [',', ';']) {\n\t\tsuper(asset, 'TableViewer', 'fa-table');\n\t\tthis.delim = delim;\n\t}\n\n\tasync parseData(data) {\n\t\tif (typeof data === 'string') {\n\t\t\t// Parse CSV\n\t\t\tlet array = this.parseCSV(data.trim());\n\t\t\t// Convert values into numbers, if possible\n\t\t\treturn array.map(row => row.map(col => {\n\t\t\t\tlet num = Number.parseFloat(col);\n\t\t\t\treturn Number.isNaN(num) ? col : num;\n\t\t\t}));\n\t\t}\n\t\treturn data;\n\t}\n\n\t// From https://stackoverflow.com/questions/1293147/example-javascript-code-to-parse-csv-data\n\tparseCSV(str) {\n\t\tvar arr = [];\n\t\tvar quote = false;  // 'true' means we're inside a quoted field\n\t\n\t\t// Iterate over each character, keep track of current row and column (of the returned array)\n\t\tfor (var row = 0, col = 0, c = 0; c < str.length; c++) {\n\t\t\tvar cc = str[c], nc = str[c+1];        // Current character, next character\n\t\t\tarr[row] = arr[row] || [];             // Create a new row if necessary\n\t\t\tarr[row][col] = arr[row][col] || '';   // Create a new column (start with empty string) if necessary\n\t\n\t\t\t// If the current character is a quotation mark, and we're inside a\n\t\t\t// quoted field, and the next character is also a quotation mark,\n\t\t\t// add a quotation mark to the current column and skip the next character\n\t\t\tif (cc == '\"' && quote && nc == '\"') {\n\t\t\t\tarr[row][col] += cc; ++c;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\n\t\t\t// If it's just one quotation mark, begin/end quoted field\n\t\t\tif (cc == '\"') {\n\t\t\t\tquote = !quote;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\n\t\t\t// If it's a elimiter and we're not in a quoted field, move on to the next column\n\t\t\tif (this.delim.includes(cc) && !quote) {\n\t\t\t\t++col;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\n\t\t\t// If it's a newline (CRLF) and we're not in a quoted field, skip the next character\n\t\t\t// and move on to the next row and move to column 0 of that new row\n\t\t\tif (cc == '\\r' && nc == '\\n' && !quote) {\n\t\t\t\t++row; col = 0; ++c;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\n\t\t\t// If it's a newline (LF or CR) and we're not in a quoted field,\n\t\t\t// move on to the next row and move to column 0 of that new row\n\t\t\tif (cc == '\\n' && !quote) {\n\t\t\t\t++row; col = 0;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (cc == '\\r' && !quote) {\n\t\t\t\t++row; col = 0;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\n\t\t\t// Otherwise, append the current character to the current column\n\t\t\tarr[row][col] += cc;\n\t\t}\n\t\treturn arr;\n\t}\n\n}\n\nexport default CSV;","import { SupportedFormat } from './format';\n\nclass NativeType extends SupportedFormat {\n\n\tconstructor(asset) {\n\t\tsuper(asset, \"DataViewer\");\n\t}\n\n}\n\nexport default NativeType;","import CSV from './csv';\n\nclass TSV extends CSV {\n\n\tconstructor(asset) {\n\t\tsuper(asset, [\"\\t\"]);\n\t}\n\n}\n\nexport default TSV;","import contentType from 'content-type';\n\nimport BrowserImage from '../formats/browserImage';\nimport CSV from '../formats/csv';\nimport GeoTIFF from '../formats/geotiff';\nimport JSON_ from '../formats/json';\nimport NativeType from './native';\nimport TSV from '../formats/tsv';\nimport { UnsupportedFormat } from './format';\n\nexport default class FormatRegistry {\n\n\tconstructor() {\n\t}\n\n\tcreateFilesFromSTAC(stac, resource = null) {\n\t\tlet files = Object.values(stac.assets)\n\t\t\t.map(asset => this.createFileFromAsset(asset, stac));\n\t\tif (resource) {\n\t\t\tfiles.forEach(file => file.setContext(resource));\n\t\t}\n\t\treturn files;\n\t}\n\n\tcreateFilesFromBlob(data) {\n\t\tif (!(data instanceof Blob)) {\n\t\t\tthrow new Error(\"Given data is not a valid Blob\");\n\t\t}\n\t\treturn this.createFilesFromSTAC({\n\t\t\tstac_version: \"1.0.0\",\n\t\t\ttype: \"Feature\",\n\t\t\tgeometry: null,\n\t\t\tproperties: {},\n\t\t\tlinks: [],\n\t\t\tassets: {\n\t\t\t\tresult: {\n\t\t\t\t\thref: URL.createObjectURL(data),\n\t\t\t\t\ttype: data.type\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tcreateFileFromAsset(asset, stac) {\n\t\ttry {\n\n\t\t\t// Detect by media type\n\t\t\tif (typeof asset.type === 'string') {\n\t\t\t\tlet mime = contentType.parse(asset.type.toLowerCase());\n\t\t\t\tswitch(mime.type) {\n\t\t\t\t\tcase 'image/png':\n\t\t\t\t\tcase 'image/jpg':\n\t\t\t\t\tcase 'image/jpeg':\n\t\t\t\t\tcase 'image/gif':\n\t\t\t\t\tcase 'image/webp':\n\t\t\t\t\t\treturn new BrowserImage(asset);\n\t\t\t\t\tcase 'application/json':\n\t\t\t\t\tcase 'text/json':\n\t\t\t\t\tcase 'application/geo+json':\n\t\t\t\t\t\treturn new JSON_(asset);\n\t\t\t\t\tcase 'text/plain':\n\t\t\t\t\t\treturn new NativeType(asset);\n\t\t\t\t\tcase 'text/csv':\n\t\t\t\t\t\treturn new CSV(asset);\n\t\t\t\t\tcase 'text/tab-separated-values':\n\t\t\t\t\t\treturn new TSV(asset);\n\t\t\t\t\tcase 'image/tiff':\n\t\t\t\t\t\treturn new GeoTIFF(asset, stac);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// Fallback: Detect by file extension\n\t\t\tif (typeof asset.href === 'string') {\n\t\t\t\tlet extension = asset.href.split(/[#?]/)[0].split('.').pop().trim().toLowerCase();\n\t\t\t\tswitch(extension) {\n\t\t\t\t\tcase 'png':\n\t\t\t\t\tcase 'jpg':\n\t\t\t\t\tcase 'jpeg':\n\t\t\t\t\tcase 'gif':\n\t\t\t\t\tcase 'webp':\n\t\t\t\t\t\treturn new BrowserImage(asset);\n\t\t\t\t\tcase 'json':\n\t\t\t\t\tcase 'geojson':\n\t\t\t\t\t\treturn new JSON_(asset);\n\t\t\t\t\tcase 'txt':\n\t\t\t\t\t\treturn new NativeType(asset);\n\t\t\t\t\tcase 'csv':\n\t\t\t\t\t\treturn new CSV(asset);\n\t\t\t\t\tcase 'tsv':\n\t\t\t\t\t\treturn new TSV(asset);\n\t\t\t\t\tcase 'tif':\n\t\t\t\t\tcase 'tiff':\n\t\t\t\t\t\treturn new GeoTIFF(asset, stac);\n\t\t\t\t}\n\t\t\t}\n\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\n\t\treturn new UnsupportedFormat(asset);\n\t}\n\n}","import Utils from '../utils.js';\n\nexport class Format {\n\n\tconstructor(asset) {\n\t\tObject.assign(this, asset);\n\t\tthis.context = null;\n\t}\n\n\tsetContext(context) {\n\t\tthis.context = context;\n\t}\n\n\tgetContext() {\n\t\treturn this.context;\n\t}\n\n\tgetUrl() {\n\t\treturn this.href;\n\t}\n\n\tcanGroup() {\n\t\treturn false;\n\t}\n\n\tisBinary() {\n\t\treturn true;\n\t}\n\n\tdownload(filename = null) {\n\t\tlet tempLink = document.createElement('a');\n\t\ttempLink.style.display = 'none';\n\t\ttempLink.href = this.getUrl();\n\t\ttempLink.setAttribute('download', filename ? filename :  Utils.makeFileName(\"result\", this.type));\n\t\tif (typeof tempLink.download === 'undefined') {\n\t\t\ttempLink.setAttribute('target', '_blank');\n\t\t}\n\t\tdocument.body.appendChild(tempLink);\n\t\ttempLink.click();\n\t\tdocument.body.removeChild(tempLink);\n\t}\n\n\tasync getData(connection) {\n\t\tif (!this.loaded) {\n\t\t\tthis.data = await this.fetchData(connection);\n\t\t\tthis.loaded = true;\n\t\t}\n\t\treturn this.data;\n\t}\n\n\tasync fetchData(connection) {\n\t\tlet blob;\n\t\tlet url = this.getUrl();\n\t\tif (url.startsWith('blob:')) {\n\t\t\tlet response = await fetch(url);\n\t\t\tblob = await response.blob();\n\t\t}\n\t\telse {\n\t\t\tblob = await connection.download(url);\n\t\t}\n\t\tlet promise = new Promise((resolve, reject) => {\n\t\t\tlet reader = new FileReader();\n\t\t\treader.onload = event => resolve(event.target.result);\n\t\t\treader.onerror = reject;\n\t\t\tif (this.isBinary()) {\n\t\t\t\treader.readAsBinaryString(blob);\n\t\t\t}\n\t\t\telse {\n\t\t\t\treader.readAsText(blob);\n\t\t\t}\n\t\t});\n\t\tlet data = await promise;\n\t\treturn this.parseData(data);\n\t}\n\n\tasync parseData(data) {\n\t\treturn data;\n\t}\n\n}\n\nexport class SupportedFormat extends Format {\n\n\tconstructor(asset, component = null, icon = 'fa-database', props = {}, events = {}) {\n\t\tsuper(asset);\n\t\tthis.loaded = false;\n\t\tthis.component = component;\n\t\tthis.props = props;\n\t\tif (!this.props.data) {\n\t\t\tthis.props.data = this;\n\t\t}\n\t\tthis.icon = icon;\n\t\tthis.events = events;\n\t}\n\n\tisBinary() {\n\t\treturn false;\n\t}\n\n}\n\nexport class UnsupportedFormat extends Format {\n\n\tconstructor(asset) {\n\t\tsuper(asset);\n\t}\n\n}\n\nexport class FormatCollection extends SupportedFormat {\n\n}","import { SupportedFormat } from './format';\nimport Utils from '../utils';\nimport ProjManager from '../components/maps/projManager';\n\nimport { fromUrl as tiffFromUrl } from 'geotiff';\nimport { photometricInterpretations } from 'geotiff/dist-module/globals';\n\nimport { toUserExtent } from 'ol/proj';\nimport Projection from 'ol/proj/Projection';\nimport { fromCode as unitsFromCode } from 'ol/proj/Units';\n\nconst GDAL_MIN = 'STATISTICS_MINIMUM';\nconst GDAL_MAX = 'STATISTICS_MAXIMUM';\nconst GDAL_NAME = 'DESCRIPTION';\n\nclass GeoTIFF extends SupportedFormat {\n\n\tconstructor(asset, stac) {\n\t\tsuper(asset, \"MapViewer\", 'fa-map', { removableLayers: true });\n\t\tthis.bands = [];\n\t\tthis.nodata = [];\n\t\tthis.img = null;\n\t\tthis.projection = null;\n\t\tthis.extent = null;\n\t\tthis.convertToRGB = false;\n\t\tthis.stac = stac;\n\t}\n\n\tisBinary() {\n\t\treturn true;\n\t}\n\n\tcanGroup() {\n\t\treturn true;\n\t}\n\n\tasync getData() {\n\t\tawait this.parseMetadata();\n\t\treturn this;\n\t}\n\n\tasync parseMetadata() {\n\t\tlet stacHasExtent = this.stac && (this.stac.geometry || this.stac.extent);\n\n\t\t// Get projection from STAC\n\t\tthis.projection = await ProjManager.addFromStac(this.stac);\n\n\t\t// Get nodata from STAC file:nodata\n\t\tif (Array.isArray(this['file:nodata']) && this['file:nodata'].length > 0) {\n\t\t\tthis.nodata = Utils.parseNodata(this['file:nodata']);\n\t\t}\n\n\t\t// Get band names from STAC eo:bands\n\t\tif (Array.isArray(this['eo:bands']) && this['eo:bands'].length > 0) {\n\t\t\tthis['eo:bands'].forEach((band, i) => this.setBandInfo(i, { name: band.name }));\n\t\t}\n\n\t\t// Get min/max/nodata from STAC raster:bands\n\t\tif (Array.isArray(this['raster:bands']) && this['raster:bands'].length > 0) {\n\t\t\tthis['raster:bands'].forEach((band, i) => {\n\t\t\t\t// Set min/max from statistics\n\t\t\t\tif (Utils.isObject(band.statistics)) {\n\t\t\t\t\tthis.setBandInfo(i, {\n\t\t\t\t\t\tmin: band.statistics.minimum,\n\t\t\t\t\t\tmax: band.statistics.maximum\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t// per-band no-data values are not supported, simply read the no-data from the first occurance if not defined yet\n\t\t\t\tif (this.nodata.length === 0 && typeof band.nodata !== 'undefined') {\n\t\t\t\t\tthis.nodata.push(Utils.parseNodata(band.nodata));\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// Load example tiff image\n\t\tlet tiff = await tiffFromUrl(this.getUrl());\n\t\tthis.img = await tiff.getImage();\n\n\t\t// Get data for each band / sample\n\t\tfor (let i = 0; i < this.img.getSamplesPerPixel(); i++) {\n\t\t\t// Set min/max/name from statistics\n\t\t\tlet band = this.img.getGDALMetadata(i);\n\n\t\t\tlet data = {};\n\t\t\tif (GDAL_MIN in band) {\n\t\t\t\tdata.min = parseFloat(band[GDAL_MIN]);\n\t\t\t}\n\t\t\tif (GDAL_MAX in band) {\n\t\t\t\tdata.max = parseFloat(band[GDAL_MAX]);\n\t\t\t}\n\t\t\tif (GDAL_NAME in band) {\n\t\t\t\tdata.name = band[GDAL_NAME];\n\t\t\t}\n\t\t\tthis.setBandInfo(i, data);\n\n\t\t\t// Use min/max for data type\n\t\t\ttry {\n\t\t\t\tlet dummy = this.img.getArrayForSample(i);\n\t\t\t\tif (!Number.isFinite(this.bands[i].min)) {\n\t\t\t\t\tthis.bands[i].min = this.getMinForDataType(dummy);\n\t\t\t\t}\n\t\t\t\tif (!Number.isFinite(this.bands[i].max)) {\n\t\t\t\t\tthis.bands[i].max = this.getMaxForDataType(dummy);\n\t\t\t\t}\n\t\t\t} catch (error) {}\n\n\t\t\t// get no-data values if needed\n\t\t\tlet nodata = this.img.getGDALNoData();\n\t\t\tif (this.nodata.length === 0 && nodata !== null) {\n\t\t\t\tthis.nodata.push(nodata);\n\t\t\t}\n\t\t}\n\n\t\t// Get projection from GeoTiff\n\t\tlet code;\n\t\tif (!this.projection && this.img.geoKeys) {\n\t\t\tlet { ProjectedCSTypeGeoKey, GeographicTypeGeoKey, ProjLinearUnitsGeoKey, GeogAngularUnitsGeoKey } = this.img.geoKeys;\n\t\t\tif (ProjectedCSTypeGeoKey) {\n\t\t\t\tcode = 'EPSG:' + ProjectedCSTypeGeoKey;\n\t\t\t\tthis.projection = await ProjManager.get(code);\n\t\t\t}\n\t\t\tif (!this.projection && GeographicTypeGeoKey) {\n\t\t\t\tcode = 'EPSG:' + GeographicTypeGeoKey;\n\t\t\t\tthis.projection = await ProjManager.get(code);\n\t\t\t}\n\n\t\t\tif (!this.projection && code) {\n\t\t\t\tconst units = (ProjLinearUnitsGeoKey && unitsFromCode(ProjLinearUnitsGeoKey)) || (GeogAngularUnitsGeoKey && unitsFromCode(GeogAngularUnitsGeoKey));\n\t\t\t\tif (units) {\n\t\t\t\t\tthis.projection = new Projection({ code, units });\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Get extent from geotiff\n\t\tif (!stacHasExtent) {\n\t\t\ttry {\n\t\t\t\tlet bbox = this.img.getBoundingBox();\n\t\t\t\tthis.extent = toUserExtent(bbox, this.projection);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.warn(error);\n\t\t\t}\n\t\t}\n\n\t\t// Store color map as RGB\n\t\tif (this.img.fileDirectory.ColorMap) {\n\t\t\tconst map = Array.from(this.img.fileDirectory.ColorMap);\n\t\t\tconst greenOffset = map.length / 3;\n\t\t\tconst blueOffset = map.length / 3 * 2;\n\t\t\tthis.colorMap = [];\n\t\t\tfor (let i = 0; i < greenOffset; i++) {\n\t\t\t\tthis.colorMap.push([\n\t\t\t\t\tMath.trunc(map[i] / 65536 * 256),\n\t\t\t\t\tMath.trunc(map[i + greenOffset] / 65536 * 256),\n\t\t\t\t\tMath.trunc(map[i + blueOffset] / 65536 * 256),\n\t\t\t\t\tthis.nodata.includes(i) ? 0 : 1\n\t\t\t\t]);\n\t\t\t}\n\t\t}\n\n\t\t// Get photometric interpretation\n\t\tswitch (this.img.fileDirectory.PhotometricInterpretation) {\n\t\t\tcase photometricInterpretations.CMYK:\n\t\t\tcase photometricInterpretations.YCbCr:\n\t\t\tcase photometricInterpretations.CIELab:\n\t\t\t\tthis.convertToRGB = true;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t// RGB and (Black/White)IsZero are handled via user control\n\t\t\t\t// Palette is handled directly by our styling\n\t\t\t\tthis.convertToRGB = false;\n\t\t}\n\t}\n\n\tsetBandInfo(i, data) {\n\t\tif (this.bands[i]) {\n\t\t\tObject.assign(this.bands[i], data);\n\t\t}\n\t\telse {\n\t\t\tthis.bands.push(Object.assign({ id: i + 1 }, data));\n\t\t}\n\t}\n\n\tgetNoData() {\n\t\treturn this.nodata;\n\t}\n\n\tgetContext() {\n\t\treturn this.stac;\n\t}\n\n\tgetBands() {\n\t\treturn this.bands;\n\t}\n\n\tgetProjection() {\n\t\treturn this.projection;\n\t}\n\n\tgetExtent() {\n\t\treturn this.extent;\n\t}\n\n\tgetColorMap() {\n\t\treturn this.colorMap;\n\t}\n\n\tgetMinForDataType(array) {\n\t\tif (array instanceof Int8Array) {\n\t\t\treturn -128;\n\t\t}\n\t\tif (array instanceof Int16Array) {\n\t\t\treturn -32768;\n\t\t}\n\t\tif (array instanceof Int32Array) {\n\t\t\treturn -2147483648;\n\t\t}\n\t\tif (array instanceof Float32Array) {\n\t\t\treturn 1.2e-38;\n\t\t}\n\t\treturn 0;\n\t}\n\t\n\tgetMaxForDataType(array) {\n\t\tif (array instanceof Int8Array) {\n\t\t\treturn 127;\n\t\t}\n\t\tif (array instanceof Uint8Array) {\n\t\t\treturn 255;\n\t\t}\n\t\tif (array instanceof Uint8ClampedArray) {\n\t\t\treturn 255;\n\t\t}\n\t\tif (array instanceof Int16Array) {\n\t\t\treturn 32767;\n\t\t}\n\t\tif (array instanceof Uint16Array) {\n\t\t\treturn 65535;\n\t\t}\n\t\tif (array instanceof Int32Array) {\n\t\t\treturn 2147483647;\n\t\t}\n\t\tif (array instanceof Uint32Array) {\n\t\t\treturn 4294967295;\n\t\t}\n\t\tif (array instanceof Float32Array) {\n\t\t\treturn 3.4e38;\n\t\t}\n\t\treturn 255;\n\t}\n\n}\n\nexport default GeoTIFF;","import { BaseProcess, ProcessGraph } from '@openeo/js-processgraphs';\nimport Utils from \"../utils\";\n\nclass ProcessImpl extends BaseProcess {\n\tconstructor(process, exporter) {\n\t\tsuper(process);\n\t\tthis.exporter = exporter;\n\t}\n\tasync execute(node) {\n\t\tawait this.exporter.generateFunction(node);\n\t}\n}\n\nexport default class Exporter extends ProcessGraph {\n\n\tconstructor(process, registry, connection) {\n\t\tsuper(Utils.isObject(process) ? process : {}, registry);\n\t\tthis.connection = connection;\n\t\tthis.indent = 0;\n\t\tthis.code = [];\n\t\tthis.fnCounter = 1;\n\t\tthis.allowEmpty();\n\t\tthis.fillUndefinedParameters();\n\t}\n\n\t// inherited from ProcessGraph\n\n\tcreateProcessGraphInstance(process) {\n\t\tlet pg = new Exporter(process, this.processRegistry, this.getJsonSchemaValidator());\n\t\treturn this.copyProcessGraphInstanceProperties(pg);\n\t}\n\n\tcopyProcessGraphInstanceProperties(pg) {\n\t\tpg = super.copyProcessGraphInstanceProperties(pg);\n\t\tpg.connection = this.connection;\n\t\treturn pg;\n\t}\n\n\tcreateProcessInstance(process) {\n\t\treturn new ProcessImpl(process, this);\n\t}\n\n\tisKeyword(keyword) {\n\t\treturn this.getKeywords().includes(keyword.toLowerCase());\n\t}\n\n\t// Methods to be implemented by sub-class\n\n\tgetKeywords() {\n\t\treturn [];\n\t}\n\n\tcomment(/*comment*/) {}\n\n\tgenerateImports() {}\n\n\tgenerateConnection() {}\n\n\tgenerateAuthentication() {}\n\n\tgenerateBuilder() {}\n\n\tgenerateMetadata(/*key, value*/) {}\n\n\tgenerateMissingParameter() {}\n\n\tasync generateFunction(/*node*/) {}\n\n\tgenerateFunctionParams(parameters) {\n\t\treturn parameters.map(p => {\n\t\t\tif (typeof p.default !== 'undefined') {\n\t\t\t\treturn `${p.name} = ${this.e(p.default)}`;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn p.name;\n\t\t\t}\n\t\t});\n\t}\n\n\tasync generateCallback(/*callback, parameters, variable*/) {}\n\n\tgenerateResult(/*resultNode, callback*/) {}\n\n\tmakeNull() {\n\t\treturn \"null\";\n\t}\n\tmakeBoolean(val) {\n\t\treturn val ? \"true\" : \"false\";\n\t}\n\tmakeArray(arr) {\n\t\treturn `[${arr.join(', ')}]`;\n\t}\n\tmakeObject(obj) {\n\t\tlet arr = Utils.mapObject(obj, (val, key) => `${this.makeString(key)}: ${val}`);\n\t\treturn `{${arr.join(', ')}}`;\n\t}\n\tmakeString(str) {\n\t\treturn JSON.stringify(str);\n\t}\n\tmakeNumber(num) {\n\t\treturn num;\n\t}\n\n\t// Helpers\n\n\te(value) {\n\t\tif (value === null) {\n\t\t\treturn this.makeNull();\n\t\t}\n\t\telse if (typeof value === 'boolean') {\n\t\t\treturn this.makeBoolean(value);\n\t\t}\n\t\telse if (typeof value === 'number') {\n\t\t\treturn this.makeNumber(value);\n\t\t}\n\t\telse if (typeof value === 'string') {\n\t\t\treturn this.makeString(value);\n\t\t}\n\t\telse if (Array.isArray(value)) {\n\t\t\treturn this.makeArray(value.map(val => this.e(val)));\n\t\t}\n\t\telse if (Utils.isObject(value)) {\n\t\t\treturn this.makeObject(Utils.mapObjectValues(value, val => this.e(val)));\n\t\t}\n\t\telse if (typeof value === 'function') {\n\t\t\treturn value();\n\t\t}\n\t\telse {\n\t\t\treturn this.makeNull();\n\t\t}\n\t}\n\n\tgenerateMetadata() {\n\t\tlet hasComment = false;\n\t\tfor(let key in this.process) {\n\t\t\tif (key === 'process_graph') {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tlet val = this.process[key];\n\t\t\tif (Array.isArray(val) && val.length === 0) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse if (typeof val === 'string' && val.length === 0) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse if (typeof val === 'boolean' && !val) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (!hasComment) {\n\t\t\t\tthis.newLine();\n\t\t\t\tthis.comment(`Set the metadata for the process`);\n\t\t\t\thasComment = true;\n\t\t\t}\n\t\t\tthis.generateMetadataEntry(key, val);\n\t\t}\n\t}\n\n\tasync resolveArguments(args, onExporter, filter) {\n\t\tlet newArgs = Array.isArray(args) ? [] : {};\n\t\tfor(let key in args) {\n\t\t\tlet value = args[key];\n\t\t\tif (filter && filter(key, value)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (Utils.isObject(value)) {\n\t\t\t\tif (value.from_node) {\n\t\t\t\t\tnewArgs[key] = () => this.var(value.from_node);\n\t\t\t\t\tcontinue; \n\t\t\t\t}\n\t\t\t\telse if (value.from_parameter) {\n\t\t\t\t\tnewArgs[key] = () => this.var(value.from_parameter);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\telse if (value instanceof Exporter) {\n\t\t\t\t\tlet fnName = await onExporter(key);\n\t\t\t\t\tnewArgs[key] = () => fnName;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tnewArgs[key] = await this.resolveArguments(value, onExporter, filter);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (Array.isArray(value)) {\n\t\t\t\tnewArgs[key] = await this.resolveArguments(value, onExporter, filter);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tnewArgs[key] = value;\n\t\t\t}\n\t\t}\n\t\treturn newArgs;\n\t}\n\n\tasync resolveCallback(node, key) {\n\t\tlet callback = node.getArgument(key);\n\t\tlet parameters = callback.getCallbackParameters();\n\t\tawait callback.execute(parameters);\n\t\tlet fnName = this.var(`${key}${this.fnCounter++}`, 'fn_');\n\t\tlet replacement = await this.generateCallback(callback, parameters, fnName);\n\t\treturn replacement ? replacement : fnName;\n\t}\n\n\tasync generateArguments(node, ordered = false, filter = null) {\n\t\tlet args = await this.resolveArguments(node.arguments, async key => await this.resolveCallback(node, key), filter);\n\t\tif (ordered) {\n\t\t\targs = this.orderArguments(node, args);\n\t\t}\n\t\treturn args;\n\t}\n\n\torderArguments(node, args) {\n\t\tlet process = node.getProcessGraph().getProcess(node);\n\t\tif (process && Array.isArray(process.parameters)) {\n\t\t\tlet orderedArgs = process.parameters.map(param => {\n\t\t\t\tif (typeof args[param.name] !== 'undefined') {\n\t\t\t\t\treturn args[param.name];\n\t\t\t\t}\n\t\t\t\telse if (!param.optional) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t});\n\t\t\tlet definedValueFound = false;\n\t\t\tfor(let i = orderedArgs.length-1; i >= 0; i--) {\n\t\t\t\tif (typeof orderedArgs[i] === 'undefined') {\n\t\t\t\t\tif (definedValueFound) {\n\t\t\t\t\t\torderedArgs[i] = null;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\torderedArgs.pop();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tdefinedValueFound = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn orderedArgs;\n\t\t}\n\t}\n\n\tvar(id, prefix = \"datacube\") {\n\t\tid = String(id);\n\t\tif (this.isKeyword(id)) {\n\t\t\treturn `${id}_`;\n\t\t}\n\t\tif (!id.match(/^[a-z_]\\w*$/)) {\n\t\t\treturn `${prefix}${id}`;\n\t\t}\n\t\telse {\n\t\t\treturn id;\n\t\t}\n\t}\n\n\tgetTab() {\n\t\treturn `\\t`;\n\t}\n\n\taddCode(code, prefix = '') {\n\t\tif (typeof code !== 'string') {\n\t\t\treturn;\n\t\t}\n\t\tlet tabs = this.getTab().repeat(this.indent);\n\t\tlet lines = code.trim().split(/\\r\\n|\\r|\\n/g);\n\t\tfor(let line of lines) {\n\t\t\tthis.code.push(`${tabs}${prefix}${line}\\n`);\n\t\t}\n\t}\n\n\tnewLine(count = 1) {\n\t\tfor(let i = 0; i < count; i++) {\n\t\t\tthis.addCode('');\n\t\t}\n\t}\n\n\tgetServerUrl() {\n\t\treturn this.connection.getUrl();\n\t}\n\n\tasync toCode(callback = false) {\n\t\tthis.code = [];\n\t\tif (!callback) {\n\t\t\tthis.comment(`Import required packages`);\n\t\t\tthis.generateImports();\n\t\t\tthis.newLine();\n\t\t\tthis.comment(`Connect to the back-end`);\n\t\t\tthis.generateConnection();\n\t\t\tthis.generateAuthentication();\n\t\t\tthis.newLine();\n\t\t\tthis.generateBuilder();\n\t\t\tthis.generateMetadata();\n\t\t\tthis.newLine();\n\t\t}\n\t\tlet params = this.getProcessParameters();\n\t\tif (params.length > 0) {\n\t\t\tthis.comment('ToDo: Here you need to set values for the parameters');\n\t\t\tfor(let param of params) {\n\t\t\t\tthis.generateMissingParameter(param);\n\t\t\t}\n\t\t\tthis.newLine();\n\t\t}\n\t\tawait this.execute();\n\t\tif (!callback) {\n\t\t\tthis.newLine();\n\t\t\tthis.comment(`The process can be executed synchronously (see below), as batch job or as web service now`);\n\t\t}\n\t\tthis.generateResult(this.getResultNode(), callback);\n\t\treturn this.code.join('').trim();\n\t}\n\n\tasync execute() {\n\t\tawait this.validate();\n\t\tthis.reset();\n\t\tawait this.executeNodes(this.getStartNodes());\n\t\treturn this.getResultNode();\n\t}\n\n\tisMath() {\n\t\tif (typeof this._isMath === 'undefined') {\n\t\t\t// Determine whether the process is just math\n\t\t\tthis._isMath = this.processRegistry.isMath(this);\n\t\t}\n\t\treturn this._isMath;\n\t}\n\n}","import Utils from \"../utils\";\nimport Exporter from \"./exporter\";\nimport { Formula } from '@openeo/js-client';\n\nconst KEYWORDS = [\n\t\"abstract\",\n\t\"arguments\",\n\t\"await\",\n\t\"boolean\",\n\t\"break\",\n\t\"byte\",\n\t\"case\",\n\t\"catch\",\n\t\"char\",\n\t\"class\",\n\t\"const\",\n\t\"continue\",\n\t\"debugger\",\n\t\"default\",\n\t\"delete\",\n\t\"do\",\n\t\"double\",\n\t\"else\",\n\t\"enum\",\n\t\"eval\",\n\t\"export\",\n\t\"extends\",\n\t\"false\",\n\t\"final\",\n\t\"finally\",\n\t\"float\",\n\t\"for\",\n\t\"function\",\n\t\"goto\",\n\t\"if\",\n\t\"implements\",\n\t\"import\",\n\t\"in\",\n\t\"instanceof\",\n\t\"int\",\n\t\"interface\",\n\t\"let\",\n\t\"long\",\n\t\"native\",\n\t\"new\",\n\t\"null\",\n\t\"package\",\n\t\"private\",\n\t\"protected\",\n\t\"public\",\n\t\"return\",\n\t\"short\",\n\t\"static\",\n\t\"super\",\n\t\"switch\",\n\t\"synchronized\",\n\t\"this\",\n\t\"throw\",\n\t\"throws\",\n\t\"transient\",\n\t\"true\",\n\t\"try\",\n\t\"typeof\",\n\t\"var\",\n\t\"void\",\n\t\"volatile\",\n\t\"while\",\n\t\"with\",\n\t\"yield\",\n\t// specific to this generator\n\t\"builder\",\n\t\"connection\",\n\t\"formula\",\n\t\"openeo\",\n\t\"result\"\n];\n\nexport default class JavaScript extends Exporter {\n\n\tconstructor(process, registry, connection, generateFormula = false) {\n\t\tsuper(process, registry, connection);\n\t\tthis.generateFormula = generateFormula;\n\t}\n\n\tcreateProcessGraphInstance(process) {\n\t\tlet pg = new JavaScript(process, this.processRegistry, this.getJsonSchemaValidator(), this.generateFormula);\n\t\treturn this.copyProcessGraphInstanceProperties(pg);\n\t}\n\n\tparse() {\n\t\tif (this.parsed) {\n\t\t\treturn;\n\t\t}\n\t\tsuper.parse();\n\t}\n\n\tgetKeywords() {\n\t\treturn KEYWORDS;\n\t}\n\n\tcomment(comment) {\n\t\tthis.addCode(comment, '// ');\n\t}\n\n\tgenerateImports() {\n\t\tthis.addCode(`import { OpenEO, Formula } from '@openeo/js-client';`);\n\t}\n\n\tgenerateConnection() {\n\t\tthis.addCode(`let connection = await OpenEO.connect('${this.getServerUrl()}');`);\n\t}\n\n\tgenerateAuthentication() {\n\t\tthis.comment(`ToDo: Here you need to add your authentication steps`);\n\t}\n\n\tgenerateBuilder() {\n\t\tthis.addCode(`let builder = await connection.buildProcess();`);\n\t}\n\n\tgenerateMetadataEntry(key, value) {\n\t\tthis.addCode(`builder.${key} = ${this.e(value)};`);\n\t}\n\n\tasync generateFunction(node) {\n\t\tlet variable = this.var(node.id);\n\t\tlet builderName = node.getParent() ? 'this' : 'builder';\n\t\tlet args = await this.generateArguments(node, !node.namespace);\n\n\t\tthis.comment(node.description);\n\t\tif (Utils.isObject(args)) {\n\t\t\tlet processId = node.namespace ? `${node.process_id}@${node.namespace}` : node.process_id;\n\t\t\tthis.addCode(`let ${variable} = ${builderName}.process(\"${processId}\", ${this.e(args)});`);\n\t\t}\n\t\telse {\n\t\t\tthis.addCode(`let ${variable} = ${builderName}.${node.process_id}(${args.map(arg => this.e(arg)).join(', ')});`);\n\t\t}\n\t}\n\n\tgenerateMissingParameter(parameter) {\n\t\tthis.comment(parameter.description);\n\t\tlet paramName = this.var(parameter.name, 'param');\n\t\tlet value = typeof parameter.default !== 'undefined' ? parameter.default : null;\n\t\tthis.addCode(`let ${paramName} = ${this.e(value)};`);\n\t}\n\n\tasync generateCallback(callback, parameters, variable) {\n\t\tif (this.generateFormula && callback && callback.isMath()) {\n\t\t\tlet formula = callback.toFormulaString();\n\t\t\tlet escaped = JSON.stringify(formula);\n\t\t\treturn `new Formula(${escaped})`;\n\t\t}\n\t\telse {\n\t\t\tlet params = this.generateFunctionParams(parameters);\n\t\t\tthis.newLine();\n\t\t\tthis.addCode(`let ${variable} = function(${params.join(', ')}) {`);\n\t\t\tthis.indent++;\n\t\t\tthis.addCode(await callback.toCode(true));\n\t\t\tthis.indent--;\n\t\t\tthis.addCode(`}`);\n\t\t}\n\t}\n\n\tgenerateResult(resultNode, callback) {\n\t\tif (!resultNode) {\n\t\t\treturn;\n\t\t}\n\t\tlet variable = this.var(resultNode.id);\n\t\tif (callback) {\n\t\t\tthis.addCode(`return ${variable};`);\n\t\t}\n\t\telse {\n\t\t\tthis.addCode(`let result = await connection.computeResult(${variable});`);\n\t\t}\n\t}\n\n\ttoFormulaString() {\n\t\tif (this.isMath()) {\n\t\t\treturn this.nodeToFormula(this.getResultNode());\n\t\t}\n\t\telse {\n\t\t\treturn '';\n\t\t}\n\t}\n\n\tgetArrayElementPlaceholder(node) {\n\t\tif (node.process_id === 'array_element') {\n\t\t\tif (node.getArgumentType('data') === 'parameter') {\n\t\t\t\tlet parameter = node.getRawArgument('data').from_parameter;\n\t\t\t\tlet index = this.getCallbackParameters().findIndex(param => param.name === parameter);\n\t\t\t\tif (index >= 0) {\n\t\t\t\t\treturn '$'.repeat(index+1) + (node.getArgument('label') || node.getArgument('index'));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tnodeToFormula(node, parentOperator = null) {\n\t\tif (node.process_id === 'array_element') {\n\t\t\tlet arrayElement = this.getArrayElementPlaceholder(node);\n\t\t\tif (arrayElement) {\n\t\t\t\treturn arrayElement;\n\t\t\t}\n\t\t}\n\n\t\tlet operator = Formula.reverseOperatorMapping[node.process_id];\n\t\tlet process = this.processRegistry.get(node.process_id);\n\t\tlet isArrayData = (typeof Formula.arrayOperatorMapping[node.process_id] !== 'undefined');\n\n\t\tlet convertValue = value => {\n\t\t\tif (Utils.isObject(value)) {\n\t\t\t\tif (value.from_node) {\n\t\t\t\t\tlet refNode = node.getProcessGraph().getNode(value.from_node);\n\t\t\t\t\tif (refNode) {\n\t\t\t\t\t\tvalue = this.nodeToFormula(refNode, operator);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tvalue = '#' + value.from_node;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (value.from_parameter) {\n\t\t\t\t\tvalue = value.from_parameter;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthrow new Error('Objects not allowed');\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn value;\n\t\t};\n\n\t\t// Create the list of arguments\n\t\tlet argList = [];\n\t\tlet params = Array.isArray(process.parameters) ? process.parameters : [];\n\t\tfor(let parameter of params) {\n\t\t\tlet value = convertValue(node.getRawArgument(parameter.name));\n\n\t\t\tif (isArrayData && Array.isArray(value) && parameter.name === 'data') {\n\t\t\t\targList = value.map(v => convertValue(v));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(typeof value !== 'undefined') {\n\t\t\t\targList.push(value);\n\t\t\t}\n\t\t\telse if(typeof parameter.default !== 'undefined') {\n\t\t\t\targList.push(parameter.default);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new Error('Argument for parameter \"' + parameter.name + '\" missing');\n\t\t\t}\n\t\t}\n\t\t \n\t\t // Filter null values for array data to handle ignore_nodata\n\t\tif (isArrayData) {\n\t\t\targList = argList.filter(v => v !== null);\n\t\t}\n\n\t\tif (operator) {\n\t\t\tlet strongOps = ['/', '*']; // \"Punktrechnung\" vor\n\t\t\tlet weakOps = ['-', '+']; // \"Strichrechung\"\n\t\t\tlet formula = argList\n\t\t\t\t.map(v => v < 0 ? '(' + v + ')' : v) // Put negative values in brackets\n\t\t\t\t.join(operator); // Merge everything together\n\t\t\t\n\t\t\t// Check whether brackets are required\n\t\t\tif (\n\t\t\t\t// No brackets on top-level\n\t\t\t\t!parentOperator\n\t\t\t\t// If operators are both weak, no brackets required\n\t\t\t\t|| (weakOps.includes(parentOperator) && weakOps.includes(operator))\n\t\t\t\t// If operators are both strong, no brackets required -> not correct, x/(a*b) needs it, see https://github.com/Open-EO/openeo-web-editor/issues/235\n//\t\t\t\t|| (strongOps.includes(parentOperator) && strongOps.includes(operator))\n\t\t\t\t// No brackets required for power, it's the strongest operation\n\t\t\t\t|| operator === '^'\n\t\t\t\t// If the parent operation is a weak operation (+/-) and this is a strong operation, no brackets required\n\t\t\t\t|| (weakOps.includes(parentOperator) && strongOps.includes(operator))\n\t\t\t) {\n\t\t\t\treturn formula;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn '(' + formula + ')';\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\treturn node.process_id + '(' + argList.join(', ') + ')';\n\t\t}\n\t}\n\n}","import Utils from '../utils';\nimport { SupportedFormat } from './format';\n\nclass JSON_ extends SupportedFormat {\n\n\tconstructor(asset, component = \"DataViewer\") {\n\t\tsuper(asset, component);\n\n\t\tthis.isGeoJson = false;\n\t\t// this.isCovJson = false;\n\t}\n\n\tasync parseData(data) {\n\t\tif (typeof data === 'string') {\n\t\t\ttry {\n\t\t\t\tdata = JSON.parse(data);\n\t\t\t}\n\t\t\tcatch (error) {\n\t\t\t\tconsole.log(error);\n\t\t\t}\n\t\t}\n\t\tif (Utils.detectGeoJson(data)) {\n\t\t\tthis.isGeoJson = true;\n\t\t\tthis.component = 'MapViewer';\n\t\t\tthis.icon = 'fa-map';\n\t\t}\n\t\treturn data;\n\t}\n}\n\nexport default JSON_;"],"sourceRoot":""}