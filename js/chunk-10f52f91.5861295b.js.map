{"version":3,"sources":["webpack:///./src/formats/browserImage.js","webpack:///./src/formats/csv.js","webpack:///./src/formats/native.js","webpack:///./src/formats/tsv.js","webpack:///./src/formats/formatRegistry.js","webpack:///./src/formats/format.js","webpack:///./src/formats/geotiff.js","webpack:///./src/export/exporter.js","webpack:///./src/export/javascript.js","webpack:///./src/formats/json.js"],"names":["BrowserImage","SupportedFormat","constructor","asset","super","isBinary","img","Image","crossOrigin","src","this","getUrl","CSV","delim","data","array","parseCSV","trim","map","row","col","length","NaN","isNaN","parseFloat","str","arr","quote","c","cc","nc","includes","NativeType","TSV","FormatRegistry","createFilesFromSTAC","stac","resource","files","Object","values","assets","createFileFromAsset","forEach","file","setContext","createFilesFromBlob","Blob","Error","stac_version","type","geometry","properties","links","result","href","URL","createObjectURL","mime","contentType","parse","toLowerCase","JSON_","GeoTIFF","extension","split","pop","error","console","log","UnsupportedFormat","Format","assign","context","getContext","canGroup","download","filename","tempLink","document","createElement","style","display","setAttribute","Utils","makeFileName","body","appendChild","click","removeChild","connection","loaded","fetchData","blob","url","startsWith","response","fetch","promise","Promise","resolve","reject","reader","FileReader","onload","event","target","onerror","readAsBinaryString","readAsText","parseData","component","icon","props","events","GDAL_MIN","GDAL_MAX","GDAL_NAME","removableLayers","bands","nodata","projection","extent","convertToRGB","parseMetadata","stacHasExtent","ProjManager","addFromStac","Array","isArray","parseNodata","band","i","setBandInfo","name","isObject","statistics","min","minimum","max","maximum","push","code","tiff","tiffFromUrl","getImage","getSamplesPerPixel","getGDALMetadata","dummy","getArrayForSample","Number","isFinite","getMinForDataType","getMaxForDataType","getGDALNoData","geoKeys","ProjectedCSTypeGeoKey","GeographicTypeGeoKey","ProjLinearUnitsGeoKey","GeogAngularUnitsGeoKey","get","units","unitsFromCode","Projection","bbox","getBoundingBox","toUserExtent","warn","fileDirectory","ColorMap","from","greenOffset","blueOffset","colorMap","Math","trunc","PhotometricInterpretation","photometricInterpretations","CMYK","YCbCr","CIELab","id","getNoData","getBands","getProjection","getExtent","getColorMap","Int8Array","Int16Array","Int32Array","Float32Array","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","ProcessImpl","BaseProcess","process","exporter","node","generateFunction","Exporter","ProcessGraph","registry","indent","fnCounter","allowEmpty","fillUndefinedParameters","createProcessGraphInstance","pg","processRegistry","getJsonSchemaValidator","copyProcessGraphInstanceProperties","createProcessInstance","isKeyword","keyword","getKeywords","comment","generateImports","generateConnection","generateAuthentication","generateBuilder","generateMetadata","generateMissingParameter","generateFunctionParams","parameters","p","default","e","generateResult","makeNull","makeBoolean","val","makeArray","join","makeObject","obj","mapObject","key","makeString","JSON","stringify","makeNumber","num","value","mapObjectValues","hasComment","newLine","generateMetadataEntry","args","onExporter","filter","newArgs","from_node","var","from_parameter","fnName","resolveArguments","callback","getArgument","getCallbackParameters","execute","replacement","generateCallback","ordered","arguments","async","resolveCallback","orderArguments","getProcessGraph","getProcess","orderedArgs","param","optional","definedValueFound","prefix","String","match","getTab","addCode","tabs","repeat","lines","line","count","getServerUrl","params","getProcessParameters","getResultNode","validate","reset","executeNodes","getStartNodes","isMath","_isMath","KEYWORDS","JavaScript","generateFormula","parsed","variable","builderName","getParent","generateArguments","namespace","description","processId","process_id","arg","parameter","paramName","formula","toFormulaString","escaped","toCode","resultNode","nodeToFormula","getArrayElementPlaceholder","getArgumentType","getRawArgument","index","findIndex","parentOperator","arrayElement","operator","Formula","reverseOperatorMapping","isArrayData","arrayOperatorMapping","convertValue","refNode","getNode","argList","v","strongOps","weakOps","isGeoJson","detectGeoJson"],"mappings":"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","file":"js/chunk-10f52f91.5861295b.js","sourcesContent":["import { SupportedFormat } from './format';\n\nclass BrowserImage extends SupportedFormat {\n\n\tconstructor(asset) {\n\t\tsuper(asset, 'ImageViewer', 'fa-image');\n\t}\n\n\tisBinary() {\n\t\treturn true;\n\t}\n\n\tasync fetchData() {\n\t\tlet img = new Image();\n\t\timg.crossOrigin = 'anonymous';\n\t\timg.src = this.getUrl();\n\t\treturn img;\n\t}\n\n}\n\nexport default BrowserImage;","import { SupportedFormat } from './format';\n\nclass CSV extends SupportedFormat {\n\n\tconstructor(asset, delim = [',', ';']) {\n\t\tsuper(asset, 'TableViewer', 'fa-table');\n\t\tthis.delim = delim;\n\t}\n\n\tasync parseData(data) {\n\t\tif (typeof data === 'string') {\n\t\t\t// Parse CSV\n\t\t\tlet array = this.parseCSV(data.trim());\n\t\t\t// Convert values into numbers, if possible\n\t\t\treturn array.map(row => row.map(col => {\n\t\t\t\tcol = col.trim();\n\t\t\t\tif (col.length === 0) {\n\t\t\t\t\treturn NaN;\n\t\t\t\t}\n\t\t\t\telse if (!isNaN(col)) { // https://stackoverflow.com/a/35759874/9709414\n\t\t\t\t\treturn parseFloat(col);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn col;\n\t\t\t\t}\n\t\t\t}));\n\t\t}\n\t\treturn data;\n\t}\n\n\t// From https://stackoverflow.com/questions/1293147/example-javascript-code-to-parse-csv-data\n\tparseCSV(str) {\n\t\tvar arr = [];\n\t\tvar quote = false;  // 'true' means we're inside a quoted field\n\t\n\t\t// Iterate over each character, keep track of current row and column (of the returned array)\n\t\tfor (var row = 0, col = 0, c = 0; c < str.length; c++) {\n\t\t\tvar cc = str[c], nc = str[c+1];        // Current character, next character\n\t\t\tarr[row] = arr[row] || [];             // Create a new row if necessary\n\t\t\tarr[row][col] = arr[row][col] || '';   // Create a new column (start with empty string) if necessary\n\t\n\t\t\t// If the current character is a quotation mark, and we're inside a\n\t\t\t// quoted field, and the next character is also a quotation mark,\n\t\t\t// add a quotation mark to the current column and skip the next character\n\t\t\tif (cc == '\"' && quote && nc == '\"') {\n\t\t\t\tarr[row][col] += cc; ++c;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\n\t\t\t// If it's just one quotation mark, begin/end quoted field\n\t\t\tif (cc == '\"') {\n\t\t\t\tquote = !quote;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\n\t\t\t// If it's a elimiter and we're not in a quoted field, move on to the next column\n\t\t\tif (this.delim.includes(cc) && !quote) {\n\t\t\t\t++col;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\n\t\t\t// If it's a newline (CRLF) and we're not in a quoted field, skip the next character\n\t\t\t// and move on to the next row and move to column 0 of that new row\n\t\t\tif (cc == '\\r' && nc == '\\n' && !quote) {\n\t\t\t\t++row; col = 0; ++c;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\n\t\t\t// If it's a newline (LF or CR) and we're not in a quoted field,\n\t\t\t// move on to the next row and move to column 0 of that new row\n\t\t\tif (cc == '\\n' && !quote) {\n\t\t\t\t++row; col = 0;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (cc == '\\r' && !quote) {\n\t\t\t\t++row; col = 0;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\n\t\t\t// Otherwise, append the current character to the current column\n\t\t\tarr[row][col] += cc;\n\t\t}\n\t\treturn arr;\n\t}\n\n}\n\nexport default CSV;","import { SupportedFormat } from './format';\n\nclass NativeType extends SupportedFormat {\n\n\tconstructor(asset) {\n\t\tsuper(asset, \"DataViewer\");\n\t}\n\n}\n\nexport default NativeType;","import CSV from './csv';\n\nclass TSV extends CSV {\n\n\tconstructor(asset) {\n\t\tsuper(asset, [\"\\t\"]);\n\t}\n\n}\n\nexport default TSV;","import contentType from 'content-type';\n\nimport BrowserImage from '../formats/browserImage';\nimport CSV from '../formats/csv';\nimport GeoTIFF from '../formats/geotiff';\nimport JSON_ from '../formats/json';\nimport NativeType from './native';\nimport TSV from '../formats/tsv';\nimport { UnsupportedFormat } from './format';\n\nexport default class FormatRegistry {\n\n\tconstructor() {\n\t}\n\n\tcreateFilesFromSTAC(stac, resource = null) {\n\t\tlet files = Object.values(stac.assets)\n\t\t\t.map(asset => this.createFileFromAsset(asset, stac));\n\t\tif (resource) {\n\t\t\tfiles.forEach(file => file.setContext(resource));\n\t\t}\n\t\treturn files;\n\t}\n\n\tcreateFilesFromBlob(data) {\n\t\tif (!(data instanceof Blob)) {\n\t\t\tthrow new Error(\"Given data is not a valid Blob\");\n\t\t}\n\t\treturn this.createFilesFromSTAC({\n\t\t\tstac_version: \"1.0.0\",\n\t\t\ttype: \"Feature\",\n\t\t\tgeometry: null,\n\t\t\tproperties: {},\n\t\t\tlinks: [],\n\t\t\tassets: {\n\t\t\t\tresult: {\n\t\t\t\t\thref: URL.createObjectURL(data),\n\t\t\t\t\ttype: data.type\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tcreateFileFromAsset(asset, stac) {\n\t\ttry {\n\n\t\t\t// Detect by media type\n\t\t\tif (typeof asset.type === 'string') {\n\t\t\t\tlet mime = contentType.parse(asset.type.toLowerCase());\n\t\t\t\tswitch(mime.type) {\n\t\t\t\t\tcase 'image/png':\n\t\t\t\t\tcase 'image/jpg':\n\t\t\t\t\tcase 'image/jpeg':\n\t\t\t\t\tcase 'image/gif':\n\t\t\t\t\tcase 'image/webp':\n\t\t\t\t\t\treturn new BrowserImage(asset);\n\t\t\t\t\tcase 'application/json':\n\t\t\t\t\tcase 'text/json':\n\t\t\t\t\tcase 'application/geo+json':\n\t\t\t\t\t\treturn new JSON_(asset);\n\t\t\t\t\tcase 'text/plain':\n\t\t\t\t\t\treturn new NativeType(asset);\n\t\t\t\t\tcase 'text/csv':\n\t\t\t\t\t\treturn new CSV(asset);\n\t\t\t\t\tcase 'text/tab-separated-values':\n\t\t\t\t\t\treturn new TSV(asset);\n\t\t\t\t\tcase 'image/tiff':\n\t\t\t\t\t\treturn new GeoTIFF(asset, stac);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// Fallback: Detect by file extension\n\t\t\tif (typeof asset.href === 'string') {\n\t\t\t\tlet extension = asset.href.split(/[#?]/)[0].split('.').pop().trim().toLowerCase();\n\t\t\t\tswitch(extension) {\n\t\t\t\t\tcase 'png':\n\t\t\t\t\tcase 'jpg':\n\t\t\t\t\tcase 'jpeg':\n\t\t\t\t\tcase 'gif':\n\t\t\t\t\tcase 'webp':\n\t\t\t\t\t\treturn new BrowserImage(asset);\n\t\t\t\t\tcase 'json':\n\t\t\t\t\tcase 'geojson':\n\t\t\t\t\t\treturn new JSON_(asset);\n\t\t\t\t\tcase 'txt':\n\t\t\t\t\t\treturn new NativeType(asset);\n\t\t\t\t\tcase 'csv':\n\t\t\t\t\t\treturn new CSV(asset);\n\t\t\t\t\tcase 'tsv':\n\t\t\t\t\t\treturn new TSV(asset);\n\t\t\t\t\tcase 'tif':\n\t\t\t\t\tcase 'tiff':\n\t\t\t\t\t\treturn new GeoTIFF(asset, stac);\n\t\t\t\t}\n\t\t\t}\n\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\n\t\treturn new UnsupportedFormat(asset);\n\t}\n\n}","import Utils from '../utils.js';\n\nexport class Format {\n\n\tconstructor(asset) {\n\t\tObject.assign(this, asset);\n\t\tthis.context = null;\n\t}\n\n\tsetContext(context) {\n\t\tthis.context = context;\n\t}\n\n\tgetContext() {\n\t\treturn this.context;\n\t}\n\n\tgetUrl() {\n\t\treturn this.href;\n\t}\n\n\tcanGroup() {\n\t\treturn false;\n\t}\n\n\tisBinary() {\n\t\treturn true;\n\t}\n\n\tdownload(filename = null) {\n\t\tlet tempLink = document.createElement('a');\n\t\ttempLink.style.display = 'none';\n\t\ttempLink.href = this.getUrl();\n\t\ttempLink.setAttribute('download', filename ? filename :  Utils.makeFileName(\"result\", this.type));\n\t\tif (typeof tempLink.download === 'undefined') {\n\t\t\ttempLink.setAttribute('target', '_blank');\n\t\t}\n\t\tdocument.body.appendChild(tempLink);\n\t\ttempLink.click();\n\t\tdocument.body.removeChild(tempLink);\n\t}\n\n\tasync getData(connection) {\n\t\tif (!this.loaded) {\n\t\t\tthis.data = await this.fetchData(connection);\n\t\t\tthis.loaded = true;\n\t\t}\n\t\treturn this.data;\n\t}\n\n\tasync fetchData(connection) {\n\t\tlet blob;\n\t\tlet url = this.getUrl();\n\t\tif (url.startsWith('blob:')) {\n\t\t\tlet response = await fetch(url);\n\t\t\tblob = await response.blob();\n\t\t}\n\t\telse {\n\t\t\tblob = await connection.download(url);\n\t\t}\n\t\tlet promise = new Promise((resolve, reject) => {\n\t\t\tlet reader = new FileReader();\n\t\t\treader.onload = event => resolve(event.target.result);\n\t\t\treader.onerror = reject;\n\t\t\tif (this.isBinary()) {\n\t\t\t\treader.readAsBinaryString(blob);\n\t\t\t}\n\t\t\telse {\n\t\t\t\treader.readAsText(blob);\n\t\t\t}\n\t\t});\n\t\tlet data = await promise;\n\t\treturn this.parseData(data);\n\t}\n\n\tasync parseData(data) {\n\t\treturn data;\n\t}\n\n}\n\nexport class SupportedFormat extends Format {\n\n\tconstructor(asset, component = null, icon = 'fa-database', props = {}, events = {}) {\n\t\tsuper(asset);\n\t\tthis.loaded = false;\n\t\tthis.component = component;\n\t\tthis.props = props;\n\t\tif (!this.props.data) {\n\t\t\tthis.props.data = this;\n\t\t}\n\t\tthis.icon = icon;\n\t\tthis.events = events;\n\t}\n\n\tisBinary() {\n\t\treturn false;\n\t}\n\n}\n\nexport class UnsupportedFormat extends Format {\n\n\tconstructor(asset) {\n\t\tsuper(asset);\n\t}\n\n}\n\nexport class FormatCollection extends SupportedFormat {\n\n}","import { SupportedFormat } from './format';\nimport Utils from '../utils';\nimport ProjManager from '../components/maps/projManager';\n\nimport { fromUrl as tiffFromUrl } from 'geotiff';\nimport { photometricInterpretations } from 'geotiff/dist-module/globals';\n\nimport { toUserExtent } from 'ol/proj';\nimport Projection from 'ol/proj/Projection';\nimport { fromCode as unitsFromCode } from 'ol/proj/Units';\n\nconst GDAL_MIN = 'STATISTICS_MINIMUM';\nconst GDAL_MAX = 'STATISTICS_MAXIMUM';\nconst GDAL_NAME = 'DESCRIPTION';\n\nclass GeoTIFF extends SupportedFormat {\n\n\tconstructor(asset, stac) {\n\t\tsuper(asset, \"MapViewer\", 'fa-map', { removableLayers: true });\n\t\tthis.bands = [];\n\t\tthis.nodata = [];\n\t\tthis.img = null;\n\t\tthis.projection = null;\n\t\tthis.extent = null;\n\t\tthis.convertToRGB = false;\n\t\tthis.stac = stac;\n\t}\n\n\tisBinary() {\n\t\treturn true;\n\t}\n\n\tcanGroup() {\n\t\treturn true;\n\t}\n\n\tasync getData() {\n\t\tawait this.parseMetadata();\n\t\treturn this;\n\t}\n\n\tasync parseMetadata() {\n\t\tlet stacHasExtent = this.stac && (this.stac.geometry || this.stac.extent);\n\n\t\t// Get projection from STAC\n\t\tthis.projection = await ProjManager.addFromStac(this.stac);\n\n\t\t// Get nodata from STAC file:nodata\n\t\tif (Array.isArray(this['file:nodata']) && this['file:nodata'].length > 0) {\n\t\t\tthis.nodata = Utils.parseNodata(this['file:nodata']);\n\t\t}\n\n\t\t// Get band names from STAC eo:bands\n\t\tif (Array.isArray(this['eo:bands']) && this['eo:bands'].length > 0) {\n\t\t\tthis['eo:bands'].forEach((band, i) => this.setBandInfo(i, { name: band.name }));\n\t\t}\n\n\t\t// Get min/max/nodata from STAC raster:bands\n\t\tif (Array.isArray(this['raster:bands']) && this['raster:bands'].length > 0) {\n\t\t\tthis['raster:bands'].forEach((band, i) => {\n\t\t\t\t// Set min/max from statistics\n\t\t\t\tif (Utils.isObject(band.statistics)) {\n\t\t\t\t\tthis.setBandInfo(i, {\n\t\t\t\t\t\tmin: band.statistics.minimum,\n\t\t\t\t\t\tmax: band.statistics.maximum\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t// per-band no-data values are not supported, simply read the no-data from the first occurance if not defined yet\n\t\t\t\tif (this.nodata.length === 0 && typeof band.nodata !== 'undefined') {\n\t\t\t\t\tthis.nodata.push(Utils.parseNodata(band.nodata));\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// Load example tiff image\n\t\tlet tiff = await tiffFromUrl(this.getUrl());\n\t\tthis.img = await tiff.getImage();\n\n\t\t// Get data for each band / sample\n\t\tfor (let i = 0; i < this.img.getSamplesPerPixel(); i++) {\n\t\t\t// Set min/max/name from statistics\n\t\t\tlet band = this.img.getGDALMetadata(i);\n\n\t\t\tlet data = {};\n\t\t\tif (GDAL_MIN in band) {\n\t\t\t\tdata.min = parseFloat(band[GDAL_MIN]);\n\t\t\t}\n\t\t\tif (GDAL_MAX in band) {\n\t\t\t\tdata.max = parseFloat(band[GDAL_MAX]);\n\t\t\t}\n\t\t\tif (GDAL_NAME in band) {\n\t\t\t\tdata.name = band[GDAL_NAME];\n\t\t\t}\n\t\t\tthis.setBandInfo(i, data);\n\n\t\t\t// Use min/max for data type\n\t\t\ttry {\n\t\t\t\tlet dummy = this.img.getArrayForSample(i);\n\t\t\t\tif (!Number.isFinite(this.bands[i].min)) {\n\t\t\t\t\tthis.bands[i].min = this.getMinForDataType(dummy);\n\t\t\t\t}\n\t\t\t\tif (!Number.isFinite(this.bands[i].max)) {\n\t\t\t\t\tthis.bands[i].max = this.getMaxForDataType(dummy);\n\t\t\t\t}\n\t\t\t} catch (error) {}\n\n\t\t\t// get no-data values if needed\n\t\t\tlet nodata = this.img.getGDALNoData();\n\t\t\tif (this.nodata.length === 0 && nodata !== null) {\n\t\t\t\tthis.nodata.push(nodata);\n\t\t\t}\n\t\t}\n\n\t\t// Get projection from GeoTiff\n\t\tlet code;\n\t\tif (!this.projection && this.img.geoKeys) {\n\t\t\tlet { ProjectedCSTypeGeoKey, GeographicTypeGeoKey, ProjLinearUnitsGeoKey, GeogAngularUnitsGeoKey } = this.img.geoKeys;\n\t\t\tif (ProjectedCSTypeGeoKey) {\n\t\t\t\tcode = 'EPSG:' + ProjectedCSTypeGeoKey;\n\t\t\t\tthis.projection = await ProjManager.get(code);\n\t\t\t}\n\t\t\tif (!this.projection && GeographicTypeGeoKey) {\n\t\t\t\tcode = 'EPSG:' + GeographicTypeGeoKey;\n\t\t\t\tthis.projection = await ProjManager.get(code);\n\t\t\t}\n\n\t\t\tif (!this.projection && code) {\n\t\t\t\tconst units = (ProjLinearUnitsGeoKey && unitsFromCode(ProjLinearUnitsGeoKey)) || (GeogAngularUnitsGeoKey && unitsFromCode(GeogAngularUnitsGeoKey));\n\t\t\t\tif (units) {\n\t\t\t\t\tthis.projection = new Projection({ code, units });\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Get extent from geotiff\n\t\tif (!stacHasExtent) {\n\t\t\ttry {\n\t\t\t\tlet bbox = this.img.getBoundingBox();\n\t\t\t\tthis.extent = toUserExtent(bbox, this.projection);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.warn(error);\n\t\t\t}\n\t\t}\n\n\t\t// Store color map as RGB\n\t\tif (this.img.fileDirectory.ColorMap) {\n\t\t\tconst map = Array.from(this.img.fileDirectory.ColorMap);\n\t\t\tconst greenOffset = map.length / 3;\n\t\t\tconst blueOffset = map.length / 3 * 2;\n\t\t\tthis.colorMap = [];\n\t\t\tfor (let i = 0; i < greenOffset; i++) {\n\t\t\t\tthis.colorMap.push([\n\t\t\t\t\tMath.trunc(map[i] / 65536 * 256),\n\t\t\t\t\tMath.trunc(map[i + greenOffset] / 65536 * 256),\n\t\t\t\t\tMath.trunc(map[i + blueOffset] / 65536 * 256),\n\t\t\t\t\tthis.nodata.includes(i) ? 0 : 1\n\t\t\t\t]);\n\t\t\t}\n\t\t}\n\n\t\t// Get photometric interpretation\n\t\tswitch (this.img.fileDirectory.PhotometricInterpretation) {\n\t\t\tcase photometricInterpretations.CMYK:\n\t\t\tcase photometricInterpretations.YCbCr:\n\t\t\tcase photometricInterpretations.CIELab:\n\t\t\t\tthis.convertToRGB = true;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t// RGB and (Black/White)IsZero are handled via user control\n\t\t\t\t// Palette is handled directly by our styling\n\t\t\t\tthis.convertToRGB = false;\n\t\t}\n\t}\n\n\tsetBandInfo(i, data) {\n\t\tif (this.bands[i]) {\n\t\t\tObject.assign(this.bands[i], data);\n\t\t}\n\t\telse {\n\t\t\tthis.bands.push(Object.assign({ id: i + 1 }, data));\n\t\t}\n\t}\n\n\tgetNoData() {\n\t\treturn this.nodata;\n\t}\n\n\tgetContext() {\n\t\treturn this.stac;\n\t}\n\n\tgetBands() {\n\t\treturn this.bands;\n\t}\n\n\tgetProjection() {\n\t\treturn this.projection;\n\t}\n\n\tgetExtent() {\n\t\treturn this.extent;\n\t}\n\n\tgetColorMap() {\n\t\treturn this.colorMap;\n\t}\n\n\tgetMinForDataType(array) {\n\t\tif (array instanceof Int8Array) {\n\t\t\treturn -128;\n\t\t}\n\t\tif (array instanceof Int16Array) {\n\t\t\treturn -32768;\n\t\t}\n\t\tif (array instanceof Int32Array) {\n\t\t\treturn -2147483648;\n\t\t}\n\t\tif (array instanceof Float32Array) {\n\t\t\treturn 1.2e-38;\n\t\t}\n\t\treturn 0;\n\t}\n\t\n\tgetMaxForDataType(array) {\n\t\tif (array instanceof Int8Array) {\n\t\t\treturn 127;\n\t\t}\n\t\tif (array instanceof Uint8Array) {\n\t\t\treturn 255;\n\t\t}\n\t\tif (array instanceof Uint8ClampedArray) {\n\t\t\treturn 255;\n\t\t}\n\t\tif (array instanceof Int16Array) {\n\t\t\treturn 32767;\n\t\t}\n\t\tif (array instanceof Uint16Array) {\n\t\t\treturn 65535;\n\t\t}\n\t\tif (array instanceof Int32Array) {\n\t\t\treturn 2147483647;\n\t\t}\n\t\tif (array instanceof Uint32Array) {\n\t\t\treturn 4294967295;\n\t\t}\n\t\tif (array instanceof Float32Array) {\n\t\t\treturn 3.4e38;\n\t\t}\n\t\treturn 255;\n\t}\n\n}\n\nexport default GeoTIFF;","import { BaseProcess, ProcessGraph } from '@openeo/js-processgraphs';\nimport Utils from \"../utils\";\n\nclass ProcessImpl extends BaseProcess {\n\tconstructor(process, exporter) {\n\t\tsuper(process);\n\t\tthis.exporter = exporter;\n\t}\n\tasync execute(node) {\n\t\tawait this.exporter.generateFunction(node);\n\t}\n}\n\nexport default class Exporter extends ProcessGraph {\n\n\tconstructor(process, registry, connection) {\n\t\tsuper(Utils.isObject(process) ? process : {}, registry);\n\t\tthis.connection = connection;\n\t\tthis.indent = 0;\n\t\tthis.code = [];\n\t\tthis.fnCounter = 1;\n\t\tthis.allowEmpty();\n\t\tthis.fillUndefinedParameters();\n\t}\n\n\t// inherited from ProcessGraph\n\n\tcreateProcessGraphInstance(process) {\n\t\tlet pg = new Exporter(process, this.processRegistry, this.getJsonSchemaValidator());\n\t\treturn this.copyProcessGraphInstanceProperties(pg);\n\t}\n\n\tcopyProcessGraphInstanceProperties(pg) {\n\t\tpg = super.copyProcessGraphInstanceProperties(pg);\n\t\tpg.connection = this.connection;\n\t\treturn pg;\n\t}\n\n\tcreateProcessInstance(process) {\n\t\treturn new ProcessImpl(process, this);\n\t}\n\n\tisKeyword(keyword) {\n\t\treturn this.getKeywords().includes(keyword.toLowerCase());\n\t}\n\n\t// Methods to be implemented by sub-class\n\n\tgetKeywords() {\n\t\treturn [];\n\t}\n\n\tcomment(/*comment*/) {}\n\n\tgenerateImports() {}\n\n\tgenerateConnection() {}\n\n\tgenerateAuthentication() {}\n\n\tgenerateBuilder() {}\n\n\tgenerateMetadata(/*key, value*/) {}\n\n\tgenerateMissingParameter() {}\n\n\tasync generateFunction(/*node*/) {}\n\n\tgenerateFunctionParams(parameters) {\n\t\treturn parameters.map(p => {\n\t\t\tif (typeof p.default !== 'undefined') {\n\t\t\t\treturn `${p.name} = ${this.e(p.default)}`;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn p.name;\n\t\t\t}\n\t\t});\n\t}\n\n\tasync generateCallback(/*callback, parameters, variable*/) {}\n\n\tgenerateResult(/*resultNode, callback*/) {}\n\n\tmakeNull() {\n\t\treturn \"null\";\n\t}\n\tmakeBoolean(val) {\n\t\treturn val ? \"true\" : \"false\";\n\t}\n\tmakeArray(arr) {\n\t\treturn `[${arr.join(', ')}]`;\n\t}\n\tmakeObject(obj) {\n\t\tlet arr = Utils.mapObject(obj, (val, key) => `${this.makeString(key)}: ${val}`);\n\t\treturn `{${arr.join(', ')}}`;\n\t}\n\tmakeString(str) {\n\t\treturn JSON.stringify(str);\n\t}\n\tmakeNumber(num) {\n\t\treturn num;\n\t}\n\n\t// Helpers\n\n\te(value) {\n\t\tif (value === null) {\n\t\t\treturn this.makeNull();\n\t\t}\n\t\telse if (typeof value === 'boolean') {\n\t\t\treturn this.makeBoolean(value);\n\t\t}\n\t\telse if (typeof value === 'number') {\n\t\t\treturn this.makeNumber(value);\n\t\t}\n\t\telse if (typeof value === 'string') {\n\t\t\treturn this.makeString(value);\n\t\t}\n\t\telse if (Array.isArray(value)) {\n\t\t\treturn this.makeArray(value.map(val => this.e(val)));\n\t\t}\n\t\telse if (Utils.isObject(value)) {\n\t\t\treturn this.makeObject(Utils.mapObjectValues(value, val => this.e(val)));\n\t\t}\n\t\telse if (typeof value === 'function') {\n\t\t\treturn value();\n\t\t}\n\t\telse {\n\t\t\treturn this.makeNull();\n\t\t}\n\t}\n\n\tgenerateMetadata() {\n\t\tlet hasComment = false;\n\t\tfor(let key in this.process) {\n\t\t\tif (key === 'process_graph') {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tlet val = this.process[key];\n\t\t\tif (Array.isArray(val) && val.length === 0) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse if (typeof val === 'string' && val.length === 0) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse if (typeof val === 'boolean' && !val) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (!hasComment) {\n\t\t\t\tthis.newLine();\n\t\t\t\tthis.comment(`Set the metadata for the process`);\n\t\t\t\thasComment = true;\n\t\t\t}\n\t\t\tthis.generateMetadataEntry(key, val);\n\t\t}\n\t}\n\n\tasync resolveArguments(args, onExporter, filter) {\n\t\tlet newArgs = Array.isArray(args) ? [] : {};\n\t\tfor(let key in args) {\n\t\t\tlet value = args[key];\n\t\t\tif (filter && filter(key, value)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (Utils.isObject(value)) {\n\t\t\t\tif (value.from_node) {\n\t\t\t\t\tnewArgs[key] = () => this.var(value.from_node);\n\t\t\t\t\tcontinue; \n\t\t\t\t}\n\t\t\t\telse if (value.from_parameter) {\n\t\t\t\t\tnewArgs[key] = () => this.var(value.from_parameter);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\telse if (value instanceof Exporter) {\n\t\t\t\t\tlet fnName = await onExporter(key);\n\t\t\t\t\tnewArgs[key] = () => fnName;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tnewArgs[key] = await this.resolveArguments(value, onExporter, filter);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (Array.isArray(value)) {\n\t\t\t\tnewArgs[key] = await this.resolveArguments(value, onExporter, filter);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tnewArgs[key] = value;\n\t\t\t}\n\t\t}\n\t\treturn newArgs;\n\t}\n\n\tasync resolveCallback(node, key) {\n\t\tlet callback = node.getArgument(key);\n\t\tlet parameters = callback.getCallbackParameters();\n\t\tawait callback.execute(parameters);\n\t\tlet fnName = this.var(`${key}${this.fnCounter++}`, 'fn_');\n\t\tlet replacement = await this.generateCallback(callback, parameters, fnName);\n\t\treturn replacement ? replacement : fnName;\n\t}\n\n\tasync generateArguments(node, ordered = false, filter = null) {\n\t\tlet args = await this.resolveArguments(node.arguments, async key => await this.resolveCallback(node, key), filter);\n\t\tif (ordered) {\n\t\t\targs = this.orderArguments(node, args);\n\t\t}\n\t\treturn args;\n\t}\n\n\torderArguments(node, args) {\n\t\tlet process = node.getProcessGraph().getProcess(node);\n\t\tif (process && Array.isArray(process.parameters)) {\n\t\t\tlet orderedArgs = process.parameters.map(param => {\n\t\t\t\tif (typeof args[param.name] !== 'undefined') {\n\t\t\t\t\treturn args[param.name];\n\t\t\t\t}\n\t\t\t\telse if (!param.optional) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t});\n\t\t\tlet definedValueFound = false;\n\t\t\tfor(let i = orderedArgs.length-1; i >= 0; i--) {\n\t\t\t\tif (typeof orderedArgs[i] === 'undefined') {\n\t\t\t\t\tif (definedValueFound) {\n\t\t\t\t\t\torderedArgs[i] = null;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\torderedArgs.pop();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tdefinedValueFound = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn orderedArgs;\n\t\t}\n\t}\n\n\tvar(id, prefix = \"datacube\") {\n\t\tid = String(id);\n\t\tif (this.isKeyword(id)) {\n\t\t\treturn `${id}_`;\n\t\t}\n\t\tif (!id.match(/^[a-z_]\\w*$/)) {\n\t\t\treturn `${prefix}${id}`;\n\t\t}\n\t\telse {\n\t\t\treturn id;\n\t\t}\n\t}\n\n\tgetTab() {\n\t\treturn `\\t`;\n\t}\n\n\taddCode(code, prefix = '') {\n\t\tif (typeof code !== 'string') {\n\t\t\treturn;\n\t\t}\n\t\tlet tabs = this.getTab().repeat(this.indent);\n\t\tlet lines = code.trim().split(/\\r\\n|\\r|\\n/g);\n\t\tfor(let line of lines) {\n\t\t\tthis.code.push(`${tabs}${prefix}${line}\\n`);\n\t\t}\n\t}\n\n\tnewLine(count = 1) {\n\t\tfor(let i = 0; i < count; i++) {\n\t\t\tthis.addCode('');\n\t\t}\n\t}\n\n\tgetServerUrl() {\n\t\treturn this.connection.getUrl();\n\t}\n\n\tasync toCode(callback = false) {\n\t\tthis.code = [];\n\t\tif (!callback) {\n\t\t\tthis.comment(`Import required packages`);\n\t\t\tthis.generateImports();\n\t\t\tthis.newLine();\n\t\t\tthis.comment(`Connect to the back-end`);\n\t\t\tthis.generateConnection();\n\t\t\tthis.generateAuthentication();\n\t\t\tthis.newLine();\n\t\t\tthis.generateBuilder();\n\t\t\tthis.generateMetadata();\n\t\t\tthis.newLine();\n\t\t}\n\t\tlet params = this.getProcessParameters();\n\t\tif (params.length > 0) {\n\t\t\tthis.comment('ToDo: Here you need to set values for the parameters');\n\t\t\tfor(let param of params) {\n\t\t\t\tthis.generateMissingParameter(param);\n\t\t\t}\n\t\t\tthis.newLine();\n\t\t}\n\t\tawait this.execute();\n\t\tif (!callback) {\n\t\t\tthis.newLine();\n\t\t\tthis.comment(`The process can be executed synchronously (see below), as batch job or as web service now`);\n\t\t}\n\t\tthis.generateResult(this.getResultNode(), callback);\n\t\treturn this.code.join('').trim();\n\t}\n\n\tasync execute() {\n\t\tawait this.validate();\n\t\tthis.reset();\n\t\tawait this.executeNodes(this.getStartNodes());\n\t\treturn this.getResultNode();\n\t}\n\n\tisMath() {\n\t\tif (typeof this._isMath === 'undefined') {\n\t\t\t// Determine whether the process is just math\n\t\t\tthis._isMath = this.processRegistry.isMath(this);\n\t\t}\n\t\treturn this._isMath;\n\t}\n\n}","import Utils from \"../utils\";\nimport Exporter from \"./exporter\";\nimport { Formula } from '@openeo/js-client';\n\nconst KEYWORDS = [\n\t\"abstract\",\n\t\"arguments\",\n\t\"await\",\n\t\"boolean\",\n\t\"break\",\n\t\"byte\",\n\t\"case\",\n\t\"catch\",\n\t\"char\",\n\t\"class\",\n\t\"const\",\n\t\"continue\",\n\t\"debugger\",\n\t\"default\",\n\t\"delete\",\n\t\"do\",\n\t\"double\",\n\t\"else\",\n\t\"enum\",\n\t\"eval\",\n\t\"export\",\n\t\"extends\",\n\t\"false\",\n\t\"final\",\n\t\"finally\",\n\t\"float\",\n\t\"for\",\n\t\"function\",\n\t\"goto\",\n\t\"if\",\n\t\"implements\",\n\t\"import\",\n\t\"in\",\n\t\"instanceof\",\n\t\"int\",\n\t\"interface\",\n\t\"let\",\n\t\"long\",\n\t\"native\",\n\t\"new\",\n\t\"null\",\n\t\"package\",\n\t\"private\",\n\t\"protected\",\n\t\"public\",\n\t\"return\",\n\t\"short\",\n\t\"static\",\n\t\"super\",\n\t\"switch\",\n\t\"synchronized\",\n\t\"this\",\n\t\"throw\",\n\t\"throws\",\n\t\"transient\",\n\t\"true\",\n\t\"try\",\n\t\"typeof\",\n\t\"var\",\n\t\"void\",\n\t\"volatile\",\n\t\"while\",\n\t\"with\",\n\t\"yield\",\n\t// specific to this generator\n\t\"builder\",\n\t\"connection\",\n\t\"formula\",\n\t\"openeo\",\n\t\"result\"\n];\n\nexport default class JavaScript extends Exporter {\n\n\tconstructor(process, registry, connection, generateFormula = false) {\n\t\tsuper(process, registry, connection);\n\t\tthis.generateFormula = generateFormula;\n\t}\n\n\tcreateProcessGraphInstance(process) {\n\t\tlet pg = new JavaScript(process, this.processRegistry, this.getJsonSchemaValidator(), this.generateFormula);\n\t\treturn this.copyProcessGraphInstanceProperties(pg);\n\t}\n\n\tparse() {\n\t\tif (this.parsed) {\n\t\t\treturn;\n\t\t}\n\t\tsuper.parse();\n\t}\n\n\tgetKeywords() {\n\t\treturn KEYWORDS;\n\t}\n\n\tcomment(comment) {\n\t\tthis.addCode(comment, '// ');\n\t}\n\n\tgenerateImports() {\n\t\tthis.addCode(`import { OpenEO, Formula } from '@openeo/js-client';`);\n\t}\n\n\tgenerateConnection() {\n\t\tthis.addCode(`let connection = await OpenEO.connect('${this.getServerUrl()}');`);\n\t}\n\n\tgenerateAuthentication() {\n\t\tthis.comment(`ToDo: Here you need to add your authentication steps`);\n\t}\n\n\tgenerateBuilder() {\n\t\tthis.addCode(`let builder = await connection.buildProcess();`);\n\t}\n\n\tgenerateMetadataEntry(key, value) {\n\t\tthis.addCode(`builder.${key} = ${this.e(value)};`);\n\t}\n\n\tasync generateFunction(node) {\n\t\tlet variable = this.var(node.id);\n\t\tlet builderName = node.getParent() ? 'this' : 'builder';\n\t\tlet args = await this.generateArguments(node, !node.namespace);\n\n\t\tthis.comment(node.description);\n\t\tif (Utils.isObject(args)) {\n\t\t\tlet processId = node.namespace ? `${node.process_id}@${node.namespace}` : node.process_id;\n\t\t\tthis.addCode(`let ${variable} = ${builderName}.process(\"${processId}\", ${this.e(args)});`);\n\t\t}\n\t\telse {\n\t\t\tthis.addCode(`let ${variable} = ${builderName}.${node.process_id}(${args.map(arg => this.e(arg)).join(', ')});`);\n\t\t}\n\t}\n\n\tgenerateMissingParameter(parameter) {\n\t\tthis.comment(parameter.description);\n\t\tlet paramName = this.var(parameter.name, 'param');\n\t\tlet value = typeof parameter.default !== 'undefined' ? parameter.default : null;\n\t\tthis.addCode(`let ${paramName} = ${this.e(value)};`);\n\t}\n\n\tasync generateCallback(callback, parameters, variable) {\n\t\tif (this.generateFormula && callback && callback.isMath()) {\n\t\t\tlet formula = callback.toFormulaString();\n\t\t\tlet escaped = JSON.stringify(formula);\n\t\t\treturn `new Formula(${escaped})`;\n\t\t}\n\t\telse {\n\t\t\tlet params = this.generateFunctionParams(parameters);\n\t\t\tthis.newLine();\n\t\t\tthis.addCode(`let ${variable} = function(${params.join(', ')}) {`);\n\t\t\tthis.indent++;\n\t\t\tthis.addCode(await callback.toCode(true));\n\t\t\tthis.indent--;\n\t\t\tthis.addCode(`}`);\n\t\t}\n\t}\n\n\tgenerateResult(resultNode, callback) {\n\t\tif (!resultNode) {\n\t\t\treturn;\n\t\t}\n\t\tlet variable = this.var(resultNode.id);\n\t\tif (callback) {\n\t\t\tthis.addCode(`return ${variable};`);\n\t\t}\n\t\telse {\n\t\t\tthis.addCode(`let result = await connection.computeResult(${variable});`);\n\t\t}\n\t}\n\n\ttoFormulaString() {\n\t\tif (this.isMath()) {\n\t\t\treturn this.nodeToFormula(this.getResultNode());\n\t\t}\n\t\telse {\n\t\t\treturn '';\n\t\t}\n\t}\n\n\tgetArrayElementPlaceholder(node) {\n\t\tif (node.process_id === 'array_element') {\n\t\t\tif (node.getArgumentType('data') === 'parameter') {\n\t\t\t\tlet parameter = node.getRawArgument('data').from_parameter;\n\t\t\t\tlet index = this.getCallbackParameters().findIndex(param => param.name === parameter);\n\t\t\t\tif (index >= 0) {\n\t\t\t\t\treturn '$'.repeat(index+1) + (node.getArgument('label') || node.getArgument('index'));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tnodeToFormula(node, parentOperator = null) {\n\t\tif (node.process_id === 'array_element') {\n\t\t\tlet arrayElement = this.getArrayElementPlaceholder(node);\n\t\t\tif (arrayElement) {\n\t\t\t\treturn arrayElement;\n\t\t\t}\n\t\t}\n\n\t\tlet operator = Formula.reverseOperatorMapping[node.process_id];\n\t\tlet process = this.processRegistry.get(node.process_id);\n\t\tlet isArrayData = (typeof Formula.arrayOperatorMapping[node.process_id] !== 'undefined');\n\n\t\tlet convertValue = value => {\n\t\t\tif (Utils.isObject(value)) {\n\t\t\t\tif (value.from_node) {\n\t\t\t\t\tlet refNode = node.getProcessGraph().getNode(value.from_node);\n\t\t\t\t\tif (refNode) {\n\t\t\t\t\t\tvalue = this.nodeToFormula(refNode, operator);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tvalue = '#' + value.from_node;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (value.from_parameter) {\n\t\t\t\t\tvalue = value.from_parameter;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthrow new Error('Objects not allowed');\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn value;\n\t\t};\n\n\t\t// Create the list of arguments\n\t\tlet argList = [];\n\t\tlet params = Array.isArray(process.parameters) ? process.parameters : [];\n\t\tfor(let parameter of params) {\n\t\t\tlet value = convertValue(node.getRawArgument(parameter.name));\n\n\t\t\tif (isArrayData && Array.isArray(value) && parameter.name === 'data') {\n\t\t\t\targList = value.map(v => convertValue(v));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(typeof value !== 'undefined') {\n\t\t\t\targList.push(value);\n\t\t\t}\n\t\t\telse if(typeof parameter.default !== 'undefined') {\n\t\t\t\targList.push(parameter.default);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new Error('Argument for parameter \"' + parameter.name + '\" missing');\n\t\t\t}\n\t\t}\n\t\t \n\t\t // Filter null values for array data to handle ignore_nodata\n\t\tif (isArrayData) {\n\t\t\targList = argList.filter(v => v !== null);\n\t\t}\n\n\t\tif (operator) {\n\t\t\tlet strongOps = ['/', '*']; // \"Punktrechnung\" vor\n\t\t\tlet weakOps = ['-', '+']; // \"Strichrechung\"\n\t\t\tlet formula = argList\n\t\t\t\t.map(v => v < 0 ? '(' + v + ')' : v) // Put negative values in brackets\n\t\t\t\t.join(operator); // Merge everything together\n\t\t\t\n\t\t\t// Check whether brackets are required\n\t\t\tif (\n\t\t\t\t// No brackets on top-level\n\t\t\t\t!parentOperator\n\t\t\t\t// If operators are both weak, no brackets required\n\t\t\t\t|| (weakOps.includes(parentOperator) && weakOps.includes(operator))\n\t\t\t\t// If operators are both strong, no brackets required -> not correct, x/(a*b) needs it, see https://github.com/Open-EO/openeo-web-editor/issues/235\n//\t\t\t\t|| (strongOps.includes(parentOperator) && strongOps.includes(operator))\n\t\t\t\t// No brackets required for power, it's the strongest operation\n\t\t\t\t|| operator === '^'\n\t\t\t\t// If the parent operation is a weak operation (+/-) and this is a strong operation, no brackets required\n\t\t\t\t|| (weakOps.includes(parentOperator) && strongOps.includes(operator))\n\t\t\t) {\n\t\t\t\treturn formula;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn '(' + formula + ')';\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\treturn node.process_id + '(' + argList.join(', ') + ')';\n\t\t}\n\t}\n\n}","import Utils from '../utils';\nimport { SupportedFormat } from './format';\n\nclass JSON_ extends SupportedFormat {\n\n\tconstructor(asset, component = \"DataViewer\") {\n\t\tsuper(asset, component);\n\n\t\tthis.isGeoJson = false;\n\t\t// this.isCovJson = false;\n\t}\n\n\tasync parseData(data) {\n\t\tif (typeof data === 'string') {\n\t\t\ttry {\n\t\t\t\tdata = JSON.parse(data);\n\t\t\t}\n\t\t\tcatch (error) {\n\t\t\t\tconsole.log(error);\n\t\t\t}\n\t\t}\n\t\tif (Utils.detectGeoJson(data)) {\n\t\t\tthis.isGeoJson = true;\n\t\t\tthis.component = 'MapViewer';\n\t\t\tthis.icon = 'fa-map';\n\t\t}\n\t\treturn data;\n\t}\n}\n\nexport default JSON_;"],"sourceRoot":""}