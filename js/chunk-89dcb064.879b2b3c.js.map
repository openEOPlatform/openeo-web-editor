{"version":3,"sources":["webpack:///./node_modules/ol/geom/flat/textpath.js","webpack:///./node_modules/ol/geom/LinearRing.js","webpack:///./node_modules/ol/events/condition.js","webpack:///./node_modules/ol/geom/flat/interiorpoint.js","webpack:///./node_modules/ol/events/KeyCode.js","webpack:///./node_modules/ol/geom/flat/simplify.js","webpack:///./node_modules/ol/format/FormatType.js","webpack:///./node_modules/ol/format/XML.js","webpack:///./node_modules/ol/format/xlink.js","webpack:///./node_modules/ol/format/xsd.js","webpack:///./node_modules/ol/format/OWS.js","webpack:///./node_modules/ol/format/WMTSCapabilities.js","webpack:///./node_modules/ol/geom/flat/contains.js","webpack:///./node_modules/ol/geom/MultiLineString.js","webpack:///./node_modules/ol/geom/flat/reverse.js","webpack:///./node_modules/ol/geom/flat/orient.js","webpack:///./node_modules/ol/geom/GeometryLayout.js","webpack:///./node_modules/ol/geom/flat/length.js","webpack:///./node_modules/ol/geom/Polygon.js","webpack:///./node_modules/ol/featureloader.js","webpack:///./node_modules/ol/geom/LineString.js","webpack:///./node_modules/ol/geom/flat/straightchunk.js","webpack:///./node_modules/ol/geom/flat/center.js","webpack:///./node_modules/ol/geom/MultiPolygon.js","webpack:///./node_modules/ol/geom/Geometry.js","webpack:///./node_modules/ol/geom/flat/closest.js","webpack:///./node_modules/ol/geom/MultiPoint.js","webpack:///./node_modules/ol/geom/SimpleGeometry.js","webpack:///./node_modules/ol/format/Feature.js","webpack:///./node_modules/ol/format/JSONFeature.js","webpack:///./node_modules/ol/format/GeoJSON.js","webpack:///./node_modules/ol/geom/flat/deflate.js","webpack:///./node_modules/ol/geom/flat/interpolate.js","webpack:///./node_modules/ol/geom/flat/area.js","webpack:///./node_modules/ol/geom/flat/inflate.js","webpack:///./node_modules/ol/geom/flat/transform.js","webpack:///./node_modules/ol/geom/flat/intersectsextent.js","webpack:///./node_modules/ol/geom/GeometryCollection.js","webpack:///./node_modules/ol/geom/Point.js","webpack:///./node_modules/ol/geom/flat/segments.js"],"names":["drawTextOnPath","flatCoordinates","offset","end","stride","text","startM","maxAngle","scale","measureAndCacheTextWidth","font","cache","rotation","x2","y2","x1","y1","segmentLength","segmentM","advance","Math","sqrt","interpolate","beginX","beginY","startOffset","startLength","endM","reverse","endX","endY","flat","previousAngle","PI","result","singleSegment","atan2","x","y","i","ii","length","angle","undefined","delta","abs","iStart","charLength","index","len","chars","substring","push","__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","this","constructor","create","LinearRing","_super","coordinates","opt_layout","_this","maxDelta_","maxDeltaRevision_","isArray","setCoordinates","setFlatCoordinates","clone","slice","layout","closestPointXY","closestPoint","minSquaredDistance","getExtent","getRevision","getArea","getCoordinates","getSimplifiedGeometryInternal","squaredTolerance","simplifiedFlatCoordinates","XY","getType","LINEAR_RING","intersectsExtent","extent","setLayout","changed","all","var_args","conditions","arguments","event","pass","altKeyOnly","mapBrowserEvent","originalEvent","altKey","metaKey","ctrlKey","shiftKey","altShiftKeysOnly","focus","targetElement","map","getTargetElement","activeElement","getOwnerDocument","contains","focusWithTabindex","hasAttribute","always","click","type","CLICK","mouseActionButton","button","never","singleClick","SINGLECLICK","noModifierKeys","shiftKeyOnly","targetNotEditable","tagName","mouseOnly","pointerEvent","pointerType","primaryAction","isPrimary","getInteriorPointOfArray","ends","flatCenters","flatCentersOffset","opt_dest","intersections","r","rr","pointX","NaN","maxSegmentLength","Infinity","sort","isNaN","getInteriorPointsOfMultiArray","endss","interiorPoints","LEFT","UP","RIGHT","DOWN","douglasPeucker","simplifiedOffset","n","markers","stack","last","pop","first","maxSquaredDistance","squaredDistance_1","douglasPeuckerArray","simplifiedEnds","snap","value","tolerance","round","quantize","x3","y3","dx1","dy1","dx2","dy2","quantizeArray","quantizeMultiArray","simplifiedEndss","ARRAY_BUFFER","JSON","TEXT","XML","read","source","doc","readFromDocument","readFromNode","firstChild","nextSibling","nodeType","Node","ELEMENT_NODE","node","NAMESPACE_URI","readHref","getAttributeNS","readDecimal","s","readDecimalString","string","m","exec","parseFloat","readPositiveInteger","readNonNegativeIntegerString","parseInt","readString","trim","NAMESPACE_URIS","PARSERS","readServiceIdentification","readServiceProvider","readOperationsMetadata","OWS","owsObject","ADDRESS_PARSERS","ALLOWED_VALUES_PARSERS","readValue","CONSTRAINT_PARSERS","readAllowedValues","CONTACT_INFO_PARSERS","readPhone","readAddress","DCP_PARSERS","readHttp","HTTP_PARSERS","readGet","OPERATION_PARSERS","readDcp","OPERATIONS_METADATA_PARSERS","readOperation","PHONE_PARSERS","REQUEST_METHOD_PARSERS","readConstraint","SERVICE_CONTACT_PARSERS","readContactInfo","SERVICE_IDENTIFICATION_PARSERS","SERVICE_PROVIDER_PARSERS","readServiceContact","objectStack","name","getAttribute","href","object","OWS_NAMESPACE_URIS","readContents","WMTSCapabilities","owsParser_","version","WMTSCapabilityObject","CONTENTS_PARSERS","readLayer","readTileMatrixSet","LAYER_PARSERS","readStyle","readTileMatrixSetLink","readDimensions","readResourceUrl","readBoundingBox","STYLE_PARSERS","readLegendUrl","TMS_LINKS_PARSERS","readTileMatrixLimitsList","TMS_LIMITS_LIST_PARSERS","readTileMatrixLimits","TMS_LIMITS_PARSERS","DIMENSION_PARSERS","WGS84_BBOX_READERS","readCoordinates","TMS_PARSERS","readTileMatrix","TM_PARSERS","style","isDefault","format","template","resourceType","resource","legend","split","linearRingContainsExtent","outside","coordinate","linearRingContainsXY","wn","linearRingsContainsXY","linearRingssContainsXY","MultiLineString","opt_ends","ends_","getLayout","lineStrings","lineString","getFlatCoordinates","appendLineString","multiLineString","applyProperties","getCoordinateAtM","opt_extrapolate","opt_interpolate","XYM","XYZM","extrapolate","getEnds","getLineString","getLineStrings","getFlatMidpoints","midpoints","midpoint","MULTI_LINE_STRING","tmp","linearRingIsClockwise","edge","linearRingsAreOriented","opt_right","right","isClockwise","linearRingssAreOriented","orientLinearRings","orientLinearRingsArray","XYZ","lineStringLength","Polygon","flatInteriorPointRevision_","flatInteriorPoint_","orientedRevision_","orientedFlatCoordinates_","appendLinearRing","linearRing","polygon","containsXY","getOrientedFlatCoordinates","getFlatInteriorPoint","flatCenter","getInteriorPoint","getLinearRingCount","getLinearRing","getLinearRings","linearRings","POLYGON","fromExtent","minX","minY","maxX","maxY","fromCircle","circle","opt_sides","opt_angle","sides","getStride","center","getCenter","arrayLength","j","makeRegular","getRadius","radius","startAngle","cos","sin","withCredentials","loadFeaturesXhr","url","resolution","projection","success","failure","xhr","XMLHttpRequest","open","responseType","onload","status","responseText","responseXML","DOMParser","parseFromString","readFeatures","featureProjection","readProjection","onerror","send","features","dataProjection","addFeatures","LineString","flatMidpoint_","flatMidpointRevision_","appendCoordinate","forEachSegment","callback","getCoordinateAt","fraction","getLength","getFlatMidpoint","LINE_STRING","matchingChunk","acos","m12","m23","x12","y12","x23","y23","chunkStart","chunkEnd","chunkM","start","linearRingss","MultiPolygon","opt_endss","endss_","flatInteriorPointsRevision_","flatInteriorPoints_","polygons","jj","appendPolygon","newEndss","multiPolygon","orient","inflate","getEndss","getFlatInteriorPoints","getInteriorPoints","MultiPoint","GeometryLayout","getPolygon","prevEnds","getPolygons","GeometryType","MULTI_POLYGON","deflate","lastEnds","SimpleGeometry","tmpTransform","Geometry","extent_","extentRevision_","simplifiedGeometryMaxMinSquaredTolerance","simplifiedGeometryRevision","simplifyTransformedInternal","revision","opt_transform","getSimplifiedGeometry","applyTransform","simplifyTransformed","coord","getClosestPoint","point","opt_closestPoint","intersectsCoordinate","computeExtent","opt_extent","rotate","anchor","sx","opt_sy","opt_anchor","simplify","transformFn","translate","deltaX","deltaY","transform","destination","sourceProj","getUnits","TILE_PIXELS","inCoordinates","outCoordinates","pixelExtent","projectedExtent","getWorldExtent","assignClosest","offset1","offset2","dx","dy","t","maxSquaredDelta","max","squaredDelta","arrayMaxSquaredDelta","multiArrayMaxSquaredDelta","assignClosestPoint","maxDelta","isRing","opt_tmpPoint","squaredDistance","tmpPoint","assignClosestArrayPoint","assignClosestMultiArrayPoint","appendPoint","multiPoint","getPoint","getPoints","points","MULTI_POINT","getFirstCoordinate","getLastCoordinate","simplifiedGeometry","getStrideForLayout","nesting","getLayoutForStride","sy","transformGeom2D","simpleGeometry","FeatureFormat","defaultFeatureProjection","supportedMediaTypes","getReadOptions","opt_options","options","Units","setWorldExtent","adaptOptions","readFeature","readGeometry","writeFeature","feature","writeFeatures","writeGeometry","geometry","transformGeometryWithOptions","write","transformed","decimals","power_1","pow","JSONFeature","FormatType","readFeatureFromObject","getObject","readFeaturesFromObject","readGeometryFromObject","readProjectionFromObject","stringify","writeFeatureObject","writeFeaturesObject","writeGeometryObject","parse","GeoJSON","geometryName_","geometryName","extractGeometryName_","extractGeometryName","geoJSONFeature","Feature","setGeometryName","setGeometry","setId","setProperties","geoJSONObject","geoJSONFeatureCollection","geoJSONFeatures","crs","properties","id","getId","hasProperties","getProperties","getGeometry","getGeometryName","objects","POINT","readPointGeometry","readLineStringGeometry","readPolygonGeometry","readMultiPointGeometry","readMultiLineStringGeometry","readMultiPolygonGeometry","GEOMETRY_COLLECTION","readGeometryCollectionGeometry","Error","geometries","GeometryCollection","Point","geoJSON","writePointGeometry","writeLineStringGeometry","writePolygonGeometry","writeMultiPointGeometry","writeMultiLineStringGeometry","writeMultiPolygonGeometry","writeGeometryCollectionGeometry","CIRCLE","getGeometriesArray","rightHanded","deflateCoordinate","deflateCoordinates","deflateCoordinatesArray","coordinatess","deflateMultiCoordinatesArray","coordinatesss","interpolatePoint","opt_dimension","o","length_1","cumulativeLengths","target","dimension","dest","lineStringCoordinateAtM","lo","hi","mid","m0","m1","lineStringsCoordinateAtM","twiceArea","area","inflateCoordinates","opt_coordinates","inflateCoordinatesArray","opt_coordinatess","inflateMultiCoordinatesArray","opt_coordinatesss","transform2D","anchorX","anchorY","k","intersectsLineString","coordinatesExtent","point1","point2","intersectsLineStringArray","intersectsLinearRing","intersectsLinearRingArray","intersectsLinearRingMultiArray","opt_geometries","geometries_","changeEventsKeys_","listenGeometriesChange_","unlistenGeometriesChange_","forEach","CHANGE","geometryCollection","setGeometries","getGeometries","cloneGeometries","getGeometriesArrayRecursive","geometriesArray","concat","simplifiedGeometries","simplified","simplifiedGeometryCollection","setGeometriesArray","isEmpty","disposeInternal","clonedGeometries","ret"],"mappings":"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","file":"js/chunk-89dcb064.879b2b3c.js","sourcesContent":["/**\n * @module ol/geom/flat/textpath\n */\nimport { lerp } from '../../math.js';\nimport { rotate } from './transform.js';\n/**\n * @param {Array<number>} flatCoordinates Path to put text on.\n * @param {number} offset Start offset of the `flatCoordinates`.\n * @param {number} end End offset of the `flatCoordinates`.\n * @param {number} stride Stride.\n * @param {string} text Text to place on the path.\n * @param {number} startM m along the path where the text starts.\n * @param {number} maxAngle Max angle between adjacent chars in radians.\n * @param {number} scale The product of the text scale and the device pixel ratio.\n * @param {function(string, string, Object<string, number>):number} measureAndCacheTextWidth Measure and cache text width.\n * @param {string} font The font.\n * @param {Object<string, number>} cache A cache of measured widths.\n * @param {number} rotation Rotation to apply to the flatCoordinates to determine whether text needs to be reversed.\n * @return {Array<Array<*>>|null} The result array (or null if `maxAngle` was\n * exceeded). Entries of the array are x, y, anchorX, angle, chunk.\n */\nexport function drawTextOnPath(flatCoordinates, offset, end, stride, text, startM, maxAngle, scale, measureAndCacheTextWidth, font, cache, rotation) {\n    var x2 = flatCoordinates[offset];\n    var y2 = flatCoordinates[offset + 1];\n    var x1 = 0;\n    var y1 = 0;\n    var segmentLength = 0;\n    var segmentM = 0;\n    function advance() {\n        x1 = x2;\n        y1 = y2;\n        offset += stride;\n        x2 = flatCoordinates[offset];\n        y2 = flatCoordinates[offset + 1];\n        segmentM += segmentLength;\n        segmentLength = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n    }\n    do {\n        advance();\n    } while (offset < end - stride && segmentM + segmentLength < startM);\n    var interpolate = segmentLength === 0 ? 0 : (startM - segmentM) / segmentLength;\n    var beginX = lerp(x1, x2, interpolate);\n    var beginY = lerp(y1, y2, interpolate);\n    var startOffset = offset - stride;\n    var startLength = segmentM;\n    var endM = startM + scale * measureAndCacheTextWidth(font, text, cache);\n    while (offset < end - stride && segmentM + segmentLength < endM) {\n        advance();\n    }\n    interpolate = segmentLength === 0 ? 0 : (endM - segmentM) / segmentLength;\n    var endX = lerp(x1, x2, interpolate);\n    var endY = lerp(y1, y2, interpolate);\n    // Keep text upright\n    var reverse;\n    if (rotation) {\n        var flat = [beginX, beginY, endX, endY];\n        rotate(flat, 0, 4, 2, rotation, flat, flat);\n        reverse = flat[0] > flat[2];\n    }\n    else {\n        reverse = beginX > endX;\n    }\n    var PI = Math.PI;\n    var result = [];\n    var singleSegment = startOffset + stride === offset;\n    offset = startOffset;\n    segmentLength = 0;\n    segmentM = startLength;\n    x2 = flatCoordinates[offset];\n    y2 = flatCoordinates[offset + 1];\n    var previousAngle;\n    // All on the same segment\n    if (singleSegment) {\n        advance();\n        previousAngle = Math.atan2(y2 - y1, x2 - x1);\n        if (reverse) {\n            previousAngle += previousAngle > 0 ? -PI : PI;\n        }\n        var x = (endX + beginX) / 2;\n        var y = (endY + beginY) / 2;\n        result[0] = [x, y, (endM - startM) / 2, previousAngle, text];\n        return result;\n    }\n    for (var i = 0, ii = text.length; i < ii;) {\n        advance();\n        var angle = Math.atan2(y2 - y1, x2 - x1);\n        if (reverse) {\n            angle += angle > 0 ? -PI : PI;\n        }\n        if (previousAngle !== undefined) {\n            var delta = angle - previousAngle;\n            delta += delta > PI ? -2 * PI : delta < -PI ? 2 * PI : 0;\n            if (Math.abs(delta) > maxAngle) {\n                return null;\n            }\n        }\n        previousAngle = angle;\n        var iStart = i;\n        var charLength = 0;\n        for (; i < ii; ++i) {\n            var index = reverse ? ii - i - 1 : i;\n            var len = scale * measureAndCacheTextWidth(font, text[index], cache);\n            if (offset + stride < end &&\n                segmentM + segmentLength < startM + charLength + len / 2) {\n                break;\n            }\n            charLength += len;\n        }\n        if (i === iStart) {\n            continue;\n        }\n        var chars = reverse\n            ? text.substring(ii - iStart, ii - i)\n            : text.substring(iStart, i);\n        interpolate =\n            segmentLength === 0\n                ? 0\n                : (startM + charLength / 2 - segmentM) / segmentLength;\n        var x = lerp(x1, x2, interpolate);\n        var y = lerp(y1, y2, interpolate);\n        result.push([x, y, charLength / 2, angle, chars]);\n        startM += charLength;\n    }\n    return result;\n}\n//# sourceMappingURL=textpath.js.map","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/geom/LinearRing\n */\nimport GeometryLayout from './GeometryLayout.js';\nimport GeometryType from './GeometryType.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport { assignClosestPoint, maxSquaredDelta } from './flat/closest.js';\nimport { closestSquaredDistanceXY } from '../extent.js';\nimport { deflateCoordinates } from './flat/deflate.js';\nimport { douglasPeucker } from './flat/simplify.js';\nimport { inflateCoordinates } from './flat/inflate.js';\nimport { linearRing as linearRingArea } from './flat/area.js';\n/**\n * @classdesc\n * Linear ring geometry. Only used as part of polygon; cannot be rendered\n * on its own.\n *\n * @api\n */\nvar LinearRing = /** @class */ (function (_super) {\n    __extends(LinearRing, _super);\n    /**\n     * @param {Array<import(\"../coordinate.js\").Coordinate>|Array<number>} coordinates Coordinates.\n     *     For internal use, flat coordinates in combination with `opt_layout` are also accepted.\n     * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n     */\n    function LinearRing(coordinates, opt_layout) {\n        var _this = _super.call(this) || this;\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.maxDelta_ = -1;\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.maxDeltaRevision_ = -1;\n        if (opt_layout !== undefined && !Array.isArray(coordinates[0])) {\n            _this.setFlatCoordinates(opt_layout, \n            /** @type {Array<number>} */ (coordinates));\n        }\n        else {\n            _this.setCoordinates(\n            /** @type {Array<import(\"../coordinate.js\").Coordinate>} */ (coordinates), opt_layout);\n        }\n        return _this;\n    }\n    /**\n     * Make a complete copy of the geometry.\n     * @return {!LinearRing} Clone.\n     * @api\n     */\n    LinearRing.prototype.clone = function () {\n        return new LinearRing(this.flatCoordinates.slice(), this.layout);\n    };\n    /**\n     * @param {number} x X.\n     * @param {number} y Y.\n     * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n     * @param {number} minSquaredDistance Minimum squared distance.\n     * @return {number} Minimum squared distance.\n     */\n    LinearRing.prototype.closestPointXY = function (x, y, closestPoint, minSquaredDistance) {\n        if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n            return minSquaredDistance;\n        }\n        if (this.maxDeltaRevision_ != this.getRevision()) {\n            this.maxDelta_ = Math.sqrt(maxSquaredDelta(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, 0));\n            this.maxDeltaRevision_ = this.getRevision();\n        }\n        return assignClosestPoint(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, this.maxDelta_, true, x, y, closestPoint, minSquaredDistance);\n    };\n    /**\n     * Return the area of the linear ring on projected plane.\n     * @return {number} Area (on projected plane).\n     * @api\n     */\n    LinearRing.prototype.getArea = function () {\n        return linearRingArea(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);\n    };\n    /**\n     * Return the coordinates of the linear ring.\n     * @return {Array<import(\"../coordinate.js\").Coordinate>} Coordinates.\n     * @api\n     */\n    LinearRing.prototype.getCoordinates = function () {\n        return inflateCoordinates(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);\n    };\n    /**\n     * @param {number} squaredTolerance Squared tolerance.\n     * @return {LinearRing} Simplified LinearRing.\n     * @protected\n     */\n    LinearRing.prototype.getSimplifiedGeometryInternal = function (squaredTolerance) {\n        var simplifiedFlatCoordinates = [];\n        simplifiedFlatCoordinates.length = douglasPeucker(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, squaredTolerance, simplifiedFlatCoordinates, 0);\n        return new LinearRing(simplifiedFlatCoordinates, GeometryLayout.XY);\n    };\n    /**\n     * Get the type of this geometry.\n     * @return {import(\"./GeometryType.js\").default} Geometry type.\n     * @api\n     */\n    LinearRing.prototype.getType = function () {\n        return GeometryType.LINEAR_RING;\n    };\n    /**\n     * Test if the geometry and the passed extent intersect.\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @return {boolean} `true` if the geometry and the extent intersect.\n     * @api\n     */\n    LinearRing.prototype.intersectsExtent = function (extent) {\n        return false;\n    };\n    /**\n     * Set the coordinates of the linear ring.\n     * @param {!Array<import(\"../coordinate.js\").Coordinate>} coordinates Coordinates.\n     * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n     * @api\n     */\n    LinearRing.prototype.setCoordinates = function (coordinates, opt_layout) {\n        this.setLayout(opt_layout, coordinates, 1);\n        if (!this.flatCoordinates) {\n            this.flatCoordinates = [];\n        }\n        this.flatCoordinates.length = deflateCoordinates(this.flatCoordinates, 0, coordinates, this.stride);\n        this.changed();\n    };\n    return LinearRing;\n}(SimpleGeometry));\nexport default LinearRing;\n//# sourceMappingURL=LinearRing.js.map","/**\n * @module ol/events/condition\n */\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport { FALSE, TRUE } from '../functions.js';\nimport { MAC, WEBKIT } from '../has.js';\nimport { assert } from '../asserts.js';\n/**\n * A function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * `{boolean}`. If the condition is met, true should be returned.\n *\n * @typedef {function(this: ?, import(\"../MapBrowserEvent.js\").default): boolean} Condition\n */\n/**\n * Creates a condition function that passes when all provided conditions pass.\n * @param {...Condition} var_args Conditions to check.\n * @return {Condition} Condition function.\n */\nexport function all(var_args) {\n    var conditions = arguments;\n    /**\n     * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n     * @return {boolean} All conditions passed.\n     */\n    return function (event) {\n        var pass = true;\n        for (var i = 0, ii = conditions.length; i < ii; ++i) {\n            pass = pass && conditions[i](event);\n            if (!pass) {\n                break;\n            }\n        }\n        return pass;\n    };\n}\n/**\n * Return `true` if only the alt-key is pressed, `false` otherwise (e.g. when\n * additionally the shift-key is pressed).\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if only the alt key is pressed.\n * @api\n */\nexport var altKeyOnly = function (mapBrowserEvent) {\n    var originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (mapBrowserEvent.originalEvent);\n    return (originalEvent.altKey &&\n        !(originalEvent.metaKey || originalEvent.ctrlKey) &&\n        !originalEvent.shiftKey);\n};\n/**\n * Return `true` if only the alt-key and shift-key is pressed, `false` otherwise\n * (e.g. when additionally the platform-modifier-key is pressed).\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if only the alt and shift keys are pressed.\n * @api\n */\nexport var altShiftKeysOnly = function (mapBrowserEvent) {\n    var originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (mapBrowserEvent.originalEvent);\n    return (originalEvent.altKey &&\n        !(originalEvent.metaKey || originalEvent.ctrlKey) &&\n        originalEvent.shiftKey);\n};\n/**\n * Return `true` if the map has the focus. This condition requires a map target\n * element with a `tabindex` attribute, e.g. `<div id=\"map\" tabindex=\"1\">`.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} event Map browser event.\n * @return {boolean} The map has the focus.\n * @api\n */\nexport var focus = function (event) {\n    var targetElement = event.map.getTargetElement();\n    var activeElement = event.map.getOwnerDocument().activeElement;\n    return targetElement.contains(activeElement);\n};\n/**\n * Return `true` if the map has the focus or no 'tabindex' attribute set.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} event Map browser event.\n * @return {boolean} The map container has the focus or no 'tabindex' attribute.\n */\nexport var focusWithTabindex = function (event) {\n    return event.map.getTargetElement().hasAttribute('tabindex')\n        ? focus(event)\n        : true;\n};\n/**\n * Return always true.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True.\n * @api\n */\nexport var always = TRUE;\n/**\n * Return `true` if the event is a `click` event, `false` otherwise.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event is a map `click` event.\n * @api\n */\nexport var click = function (mapBrowserEvent) {\n    return mapBrowserEvent.type == MapBrowserEventType.CLICK;\n};\n/**\n * Return `true` if the event has an \"action\"-producing mouse button.\n *\n * By definition, this includes left-click on windows/linux, and left-click\n * without the ctrl key on Macs.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} The result.\n */\nexport var mouseActionButton = function (mapBrowserEvent) {\n    var originalEvent = /** @type {MouseEvent} */ (mapBrowserEvent.originalEvent);\n    return originalEvent.button == 0 && !(WEBKIT && MAC && originalEvent.ctrlKey);\n};\n/**\n * Return always false.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} False.\n * @api\n */\nexport var never = FALSE;\n/**\n * Return `true` if the browser event is a `pointermove` event, `false`\n * otherwise.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if the browser event is a `pointermove` event.\n * @api\n */\nexport var pointerMove = function (mapBrowserEvent) {\n    return mapBrowserEvent.type == 'pointermove';\n};\n/**\n * Return `true` if the event is a map `singleclick` event, `false` otherwise.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event is a map `singleclick` event.\n * @api\n */\nexport var singleClick = function (mapBrowserEvent) {\n    return mapBrowserEvent.type == MapBrowserEventType.SINGLECLICK;\n};\n/**\n * Return `true` if the event is a map `dblclick` event, `false` otherwise.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event is a map `dblclick` event.\n * @api\n */\nexport var doubleClick = function (mapBrowserEvent) {\n    return mapBrowserEvent.type == MapBrowserEventType.DBLCLICK;\n};\n/**\n * Return `true` if no modifier key (alt-, shift- or platform-modifier-key) is\n * pressed.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True only if there no modifier keys are pressed.\n * @api\n */\nexport var noModifierKeys = function (mapBrowserEvent) {\n    var originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (mapBrowserEvent.originalEvent);\n    return (!originalEvent.altKey &&\n        !(originalEvent.metaKey || originalEvent.ctrlKey) &&\n        !originalEvent.shiftKey);\n};\n/**\n * Return `true` if only the platform-modifier-key (the meta-key on Mac,\n * ctrl-key otherwise) is pressed, `false` otherwise (e.g. when additionally\n * the shift-key is pressed).\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if only the platform modifier key is pressed.\n * @api\n */\nexport var platformModifierKeyOnly = function (mapBrowserEvent) {\n    var originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (mapBrowserEvent.originalEvent);\n    return (!originalEvent.altKey &&\n        (MAC ? originalEvent.metaKey : originalEvent.ctrlKey) &&\n        !originalEvent.shiftKey);\n};\n/**\n * Return `true` if only the shift-key is pressed, `false` otherwise (e.g. when\n * additionally the alt-key is pressed).\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if only the shift key is pressed.\n * @api\n */\nexport var shiftKeyOnly = function (mapBrowserEvent) {\n    var originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (mapBrowserEvent.originalEvent);\n    return (!originalEvent.altKey &&\n        !(originalEvent.metaKey || originalEvent.ctrlKey) &&\n        originalEvent.shiftKey);\n};\n/**\n * Return `true` if the target element is not editable, i.e. not a `<input>`-,\n * `<select>`- or `<textarea>`-element, `false` otherwise.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True only if the target element is not editable.\n * @api\n */\nexport var targetNotEditable = function (mapBrowserEvent) {\n    var originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (mapBrowserEvent.originalEvent);\n    var tagName = /** @type {Element} */ (originalEvent.target).tagName;\n    return tagName !== 'INPUT' && tagName !== 'SELECT' && tagName !== 'TEXTAREA';\n};\n/**\n * Return `true` if the event originates from a mouse device.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event originates from a mouse device.\n * @api\n */\nexport var mouseOnly = function (mapBrowserEvent) {\n    var pointerEvent = /** @type {import(\"../MapBrowserEvent\").default} */ (mapBrowserEvent).originalEvent;\n    assert(pointerEvent !== undefined, 56); // mapBrowserEvent must originate from a pointer event\n    // see https://www.w3.org/TR/pointerevents/#widl-PointerEvent-pointerType\n    return pointerEvent.pointerType == 'mouse';\n};\n/**\n * Return `true` if the event originates from a touchable device.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event originates from a touchable device.\n * @api\n */\nexport var touchOnly = function (mapBrowserEvent) {\n    var pointerEvt = /** @type {import(\"../MapBrowserEvent\").default} */ (mapBrowserEvent).originalEvent;\n    assert(pointerEvt !== undefined, 56); // mapBrowserEvent must originate from a pointer event\n    // see https://www.w3.org/TR/pointerevents/#widl-PointerEvent-pointerType\n    return pointerEvt.pointerType === 'touch';\n};\n/**\n * Return `true` if the event originates from a digital pen.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event originates from a digital pen.\n * @api\n */\nexport var penOnly = function (mapBrowserEvent) {\n    var pointerEvt = /** @type {import(\"../MapBrowserEvent\").default} */ (mapBrowserEvent).originalEvent;\n    assert(pointerEvt !== undefined, 56); // mapBrowserEvent must originate from a pointer event\n    // see https://www.w3.org/TR/pointerevents/#widl-PointerEvent-pointerType\n    return pointerEvt.pointerType === 'pen';\n};\n/**\n * Return `true` if the event originates from a primary pointer in\n * contact with the surface or if the left mouse button is pressed.\n * See https://www.w3.org/TR/pointerevents/#button-states.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event originates from a primary pointer.\n * @api\n */\nexport var primaryAction = function (mapBrowserEvent) {\n    var pointerEvent = /** @type {import(\"../MapBrowserEvent\").default} */ (mapBrowserEvent).originalEvent;\n    assert(pointerEvent !== undefined, 56); // mapBrowserEvent must originate from a pointer event\n    return pointerEvent.isPrimary && pointerEvent.button === 0;\n};\n//# sourceMappingURL=condition.js.map","/**\n * @module ol/geom/flat/interiorpoint\n */\nimport { linearRingsContainsXY } from './contains.js';\nimport { numberSafeCompareFunction } from '../../array.js';\n/**\n * Calculates a point that is likely to lie in the interior of the linear rings.\n * Inspired by JTS's com.vividsolutions.jts.geom.Geometry#getInteriorPoint.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {Array<number>} flatCenters Flat centers.\n * @param {number} flatCentersOffset Flat center offset.\n * @param {Array<number>} [opt_dest] Destination.\n * @return {Array<number>} Destination point as XYM coordinate, where M is the\n * length of the horizontal intersection that the point belongs to.\n */\nexport function getInteriorPointOfArray(flatCoordinates, offset, ends, stride, flatCenters, flatCentersOffset, opt_dest) {\n    var i, ii, x, x1, x2, y1, y2;\n    var y = flatCenters[flatCentersOffset + 1];\n    /** @type {Array<number>} */\n    var intersections = [];\n    // Calculate intersections with the horizontal line\n    for (var r = 0, rr = ends.length; r < rr; ++r) {\n        var end = ends[r];\n        x1 = flatCoordinates[end - stride];\n        y1 = flatCoordinates[end - stride + 1];\n        for (i = offset; i < end; i += stride) {\n            x2 = flatCoordinates[i];\n            y2 = flatCoordinates[i + 1];\n            if ((y <= y1 && y2 <= y) || (y1 <= y && y <= y2)) {\n                x = ((y - y1) / (y2 - y1)) * (x2 - x1) + x1;\n                intersections.push(x);\n            }\n            x1 = x2;\n            y1 = y2;\n        }\n    }\n    // Find the longest segment of the horizontal line that has its center point\n    // inside the linear ring.\n    var pointX = NaN;\n    var maxSegmentLength = -Infinity;\n    intersections.sort(numberSafeCompareFunction);\n    x1 = intersections[0];\n    for (i = 1, ii = intersections.length; i < ii; ++i) {\n        x2 = intersections[i];\n        var segmentLength = Math.abs(x2 - x1);\n        if (segmentLength > maxSegmentLength) {\n            x = (x1 + x2) / 2;\n            if (linearRingsContainsXY(flatCoordinates, offset, ends, stride, x, y)) {\n                pointX = x;\n                maxSegmentLength = segmentLength;\n            }\n        }\n        x1 = x2;\n    }\n    if (isNaN(pointX)) {\n        // There is no horizontal line that has its center point inside the linear\n        // ring.  Use the center of the the linear ring's extent.\n        pointX = flatCenters[flatCentersOffset];\n    }\n    if (opt_dest) {\n        opt_dest.push(pointX, y, maxSegmentLength);\n        return opt_dest;\n    }\n    else {\n        return [pointX, y, maxSegmentLength];\n    }\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {Array<number>} flatCenters Flat centers.\n * @return {Array<number>} Interior points as XYM coordinates, where M is the\n * length of the horizontal intersection that the point belongs to.\n */\nexport function getInteriorPointsOfMultiArray(flatCoordinates, offset, endss, stride, flatCenters) {\n    var interiorPoints = [];\n    for (var i = 0, ii = endss.length; i < ii; ++i) {\n        var ends = endss[i];\n        interiorPoints = getInteriorPointOfArray(flatCoordinates, offset, ends, stride, flatCenters, 2 * i, interiorPoints);\n        offset = ends[ends.length - 1];\n    }\n    return interiorPoints;\n}\n//# sourceMappingURL=interiorpoint.js.map","/**\n * @module ol/events/KeyCode\n */\n/**\n * @enum {number}\n * @const\n */\nexport default {\n    LEFT: 37,\n    UP: 38,\n    RIGHT: 39,\n    DOWN: 40,\n};\n//# sourceMappingURL=KeyCode.js.map","/**\n * @module ol/geom/flat/simplify\n */\n// Based on simplify-js https://github.com/mourner/simplify-js\n// Copyright (c) 2012, Vladimir Agafonkin\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are met:\n//\n//    1. Redistributions of source code must retain the above copyright notice,\n//       this list of conditions and the following disclaimer.\n//\n//    2. Redistributions in binary form must reproduce the above copyright\n//       notice, this list of conditions and the following disclaimer in the\n//       documentation and/or other materials provided with the distribution.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n// POSSIBILITY OF SUCH DAMAGE.\nimport { squaredDistance, squaredSegmentDistance } from '../../math.js';\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} squaredTolerance Squared tolerance.\n * @param {boolean} highQuality Highest quality.\n * @param {Array<number>} [opt_simplifiedFlatCoordinates] Simplified flat\n *     coordinates.\n * @return {Array<number>} Simplified line string.\n */\nexport function simplifyLineString(flatCoordinates, offset, end, stride, squaredTolerance, highQuality, opt_simplifiedFlatCoordinates) {\n    var simplifiedFlatCoordinates = opt_simplifiedFlatCoordinates !== undefined\n        ? opt_simplifiedFlatCoordinates\n        : [];\n    if (!highQuality) {\n        end = radialDistance(flatCoordinates, offset, end, stride, squaredTolerance, simplifiedFlatCoordinates, 0);\n        flatCoordinates = simplifiedFlatCoordinates;\n        offset = 0;\n        stride = 2;\n    }\n    simplifiedFlatCoordinates.length = douglasPeucker(flatCoordinates, offset, end, stride, squaredTolerance, simplifiedFlatCoordinates, 0);\n    return simplifiedFlatCoordinates;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} squaredTolerance Squared tolerance.\n * @param {Array<number>} simplifiedFlatCoordinates Simplified flat\n *     coordinates.\n * @param {number} simplifiedOffset Simplified offset.\n * @return {number} Simplified offset.\n */\nexport function douglasPeucker(flatCoordinates, offset, end, stride, squaredTolerance, simplifiedFlatCoordinates, simplifiedOffset) {\n    var n = (end - offset) / stride;\n    if (n < 3) {\n        for (; offset < end; offset += stride) {\n            simplifiedFlatCoordinates[simplifiedOffset++] = flatCoordinates[offset];\n            simplifiedFlatCoordinates[simplifiedOffset++] =\n                flatCoordinates[offset + 1];\n        }\n        return simplifiedOffset;\n    }\n    /** @type {Array<number>} */\n    var markers = new Array(n);\n    markers[0] = 1;\n    markers[n - 1] = 1;\n    /** @type {Array<number>} */\n    var stack = [offset, end - stride];\n    var index = 0;\n    while (stack.length > 0) {\n        var last = stack.pop();\n        var first = stack.pop();\n        var maxSquaredDistance = 0;\n        var x1 = flatCoordinates[first];\n        var y1 = flatCoordinates[first + 1];\n        var x2 = flatCoordinates[last];\n        var y2 = flatCoordinates[last + 1];\n        for (var i = first + stride; i < last; i += stride) {\n            var x = flatCoordinates[i];\n            var y = flatCoordinates[i + 1];\n            var squaredDistance_1 = squaredSegmentDistance(x, y, x1, y1, x2, y2);\n            if (squaredDistance_1 > maxSquaredDistance) {\n                index = i;\n                maxSquaredDistance = squaredDistance_1;\n            }\n        }\n        if (maxSquaredDistance > squaredTolerance) {\n            markers[(index - offset) / stride] = 1;\n            if (first + stride < index) {\n                stack.push(first, index);\n            }\n            if (index + stride < last) {\n                stack.push(index, last);\n            }\n        }\n    }\n    for (var i = 0; i < n; ++i) {\n        if (markers[i]) {\n            simplifiedFlatCoordinates[simplifiedOffset++] =\n                flatCoordinates[offset + i * stride];\n            simplifiedFlatCoordinates[simplifiedOffset++] =\n                flatCoordinates[offset + i * stride + 1];\n        }\n    }\n    return simplifiedOffset;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {number} squaredTolerance Squared tolerance.\n * @param {Array<number>} simplifiedFlatCoordinates Simplified flat\n *     coordinates.\n * @param {number} simplifiedOffset Simplified offset.\n * @param {Array<number>} simplifiedEnds Simplified ends.\n * @return {number} Simplified offset.\n */\nexport function douglasPeuckerArray(flatCoordinates, offset, ends, stride, squaredTolerance, simplifiedFlatCoordinates, simplifiedOffset, simplifiedEnds) {\n    for (var i = 0, ii = ends.length; i < ii; ++i) {\n        var end = ends[i];\n        simplifiedOffset = douglasPeucker(flatCoordinates, offset, end, stride, squaredTolerance, simplifiedFlatCoordinates, simplifiedOffset);\n        simplifiedEnds.push(simplifiedOffset);\n        offset = end;\n    }\n    return simplifiedOffset;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {number} squaredTolerance Squared tolerance.\n * @param {Array<number>} simplifiedFlatCoordinates Simplified flat\n *     coordinates.\n * @param {number} simplifiedOffset Simplified offset.\n * @param {Array<Array<number>>} simplifiedEndss Simplified endss.\n * @return {number} Simplified offset.\n */\nexport function douglasPeuckerMultiArray(flatCoordinates, offset, endss, stride, squaredTolerance, simplifiedFlatCoordinates, simplifiedOffset, simplifiedEndss) {\n    for (var i = 0, ii = endss.length; i < ii; ++i) {\n        var ends = endss[i];\n        var simplifiedEnds = [];\n        simplifiedOffset = douglasPeuckerArray(flatCoordinates, offset, ends, stride, squaredTolerance, simplifiedFlatCoordinates, simplifiedOffset, simplifiedEnds);\n        simplifiedEndss.push(simplifiedEnds);\n        offset = ends[ends.length - 1];\n    }\n    return simplifiedOffset;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} squaredTolerance Squared tolerance.\n * @param {Array<number>} simplifiedFlatCoordinates Simplified flat\n *     coordinates.\n * @param {number} simplifiedOffset Simplified offset.\n * @return {number} Simplified offset.\n */\nexport function radialDistance(flatCoordinates, offset, end, stride, squaredTolerance, simplifiedFlatCoordinates, simplifiedOffset) {\n    if (end <= offset + stride) {\n        // zero or one point, no simplification possible, so copy and return\n        for (; offset < end; offset += stride) {\n            simplifiedFlatCoordinates[simplifiedOffset++] = flatCoordinates[offset];\n            simplifiedFlatCoordinates[simplifiedOffset++] =\n                flatCoordinates[offset + 1];\n        }\n        return simplifiedOffset;\n    }\n    var x1 = flatCoordinates[offset];\n    var y1 = flatCoordinates[offset + 1];\n    // copy first point\n    simplifiedFlatCoordinates[simplifiedOffset++] = x1;\n    simplifiedFlatCoordinates[simplifiedOffset++] = y1;\n    var x2 = x1;\n    var y2 = y1;\n    for (offset += stride; offset < end; offset += stride) {\n        x2 = flatCoordinates[offset];\n        y2 = flatCoordinates[offset + 1];\n        if (squaredDistance(x1, y1, x2, y2) > squaredTolerance) {\n            // copy point at offset\n            simplifiedFlatCoordinates[simplifiedOffset++] = x2;\n            simplifiedFlatCoordinates[simplifiedOffset++] = y2;\n            x1 = x2;\n            y1 = y2;\n        }\n    }\n    if (x2 != x1 || y2 != y1) {\n        // copy last point\n        simplifiedFlatCoordinates[simplifiedOffset++] = x2;\n        simplifiedFlatCoordinates[simplifiedOffset++] = y2;\n    }\n    return simplifiedOffset;\n}\n/**\n * @param {number} value Value.\n * @param {number} tolerance Tolerance.\n * @return {number} Rounded value.\n */\nexport function snap(value, tolerance) {\n    return tolerance * Math.round(value / tolerance);\n}\n/**\n * Simplifies a line string using an algorithm designed by Tim Schaub.\n * Coordinates are snapped to the nearest value in a virtual grid and\n * consecutive duplicate coordinates are discarded.  This effectively preserves\n * topology as the simplification of any subsection of a line string is\n * independent of the rest of the line string.  This means that, for examples,\n * the common edge between two polygons will be simplified to the same line\n * string independently in both polygons.  This implementation uses a single\n * pass over the coordinates and eliminates intermediate collinear points.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} tolerance Tolerance.\n * @param {Array<number>} simplifiedFlatCoordinates Simplified flat\n *     coordinates.\n * @param {number} simplifiedOffset Simplified offset.\n * @return {number} Simplified offset.\n */\nexport function quantize(flatCoordinates, offset, end, stride, tolerance, simplifiedFlatCoordinates, simplifiedOffset) {\n    // do nothing if the line is empty\n    if (offset == end) {\n        return simplifiedOffset;\n    }\n    // snap the first coordinate (P1)\n    var x1 = snap(flatCoordinates[offset], tolerance);\n    var y1 = snap(flatCoordinates[offset + 1], tolerance);\n    offset += stride;\n    // add the first coordinate to the output\n    simplifiedFlatCoordinates[simplifiedOffset++] = x1;\n    simplifiedFlatCoordinates[simplifiedOffset++] = y1;\n    // find the next coordinate that does not snap to the same value as the first\n    // coordinate (P2)\n    var x2, y2;\n    do {\n        x2 = snap(flatCoordinates[offset], tolerance);\n        y2 = snap(flatCoordinates[offset + 1], tolerance);\n        offset += stride;\n        if (offset == end) {\n            // all coordinates snap to the same value, the line collapses to a point\n            // push the last snapped value anyway to ensure that the output contains\n            // at least two points\n            // FIXME should we really return at least two points anyway?\n            simplifiedFlatCoordinates[simplifiedOffset++] = x2;\n            simplifiedFlatCoordinates[simplifiedOffset++] = y2;\n            return simplifiedOffset;\n        }\n    } while (x2 == x1 && y2 == y1);\n    while (offset < end) {\n        // snap the next coordinate (P3)\n        var x3 = snap(flatCoordinates[offset], tolerance);\n        var y3 = snap(flatCoordinates[offset + 1], tolerance);\n        offset += stride;\n        // skip P3 if it is equal to P2\n        if (x3 == x2 && y3 == y2) {\n            continue;\n        }\n        // calculate the delta between P1 and P2\n        var dx1 = x2 - x1;\n        var dy1 = y2 - y1;\n        // calculate the delta between P3 and P1\n        var dx2 = x3 - x1;\n        var dy2 = y3 - y1;\n        // if P1, P2, and P3 are colinear and P3 is further from P1 than P2 is from\n        // P1 in the same direction then P2 is on the straight line between P1 and\n        // P3\n        if (dx1 * dy2 == dy1 * dx2 &&\n            ((dx1 < 0 && dx2 < dx1) || dx1 == dx2 || (dx1 > 0 && dx2 > dx1)) &&\n            ((dy1 < 0 && dy2 < dy1) || dy1 == dy2 || (dy1 > 0 && dy2 > dy1))) {\n            // discard P2 and set P2 = P3\n            x2 = x3;\n            y2 = y3;\n            continue;\n        }\n        // either P1, P2, and P3 are not colinear, or they are colinear but P3 is\n        // between P3 and P1 or on the opposite half of the line to P2.  add P2,\n        // and continue with P1 = P2 and P2 = P3\n        simplifiedFlatCoordinates[simplifiedOffset++] = x2;\n        simplifiedFlatCoordinates[simplifiedOffset++] = y2;\n        x1 = x2;\n        y1 = y2;\n        x2 = x3;\n        y2 = y3;\n    }\n    // add the last point (P2)\n    simplifiedFlatCoordinates[simplifiedOffset++] = x2;\n    simplifiedFlatCoordinates[simplifiedOffset++] = y2;\n    return simplifiedOffset;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {number} tolerance Tolerance.\n * @param {Array<number>} simplifiedFlatCoordinates Simplified flat\n *     coordinates.\n * @param {number} simplifiedOffset Simplified offset.\n * @param {Array<number>} simplifiedEnds Simplified ends.\n * @return {number} Simplified offset.\n */\nexport function quantizeArray(flatCoordinates, offset, ends, stride, tolerance, simplifiedFlatCoordinates, simplifiedOffset, simplifiedEnds) {\n    for (var i = 0, ii = ends.length; i < ii; ++i) {\n        var end = ends[i];\n        simplifiedOffset = quantize(flatCoordinates, offset, end, stride, tolerance, simplifiedFlatCoordinates, simplifiedOffset);\n        simplifiedEnds.push(simplifiedOffset);\n        offset = end;\n    }\n    return simplifiedOffset;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {number} tolerance Tolerance.\n * @param {Array<number>} simplifiedFlatCoordinates Simplified flat\n *     coordinates.\n * @param {number} simplifiedOffset Simplified offset.\n * @param {Array<Array<number>>} simplifiedEndss Simplified endss.\n * @return {number} Simplified offset.\n */\nexport function quantizeMultiArray(flatCoordinates, offset, endss, stride, tolerance, simplifiedFlatCoordinates, simplifiedOffset, simplifiedEndss) {\n    for (var i = 0, ii = endss.length; i < ii; ++i) {\n        var ends = endss[i];\n        var simplifiedEnds = [];\n        simplifiedOffset = quantizeArray(flatCoordinates, offset, ends, stride, tolerance, simplifiedFlatCoordinates, simplifiedOffset, simplifiedEnds);\n        simplifiedEndss.push(simplifiedEnds);\n        offset = ends[ends.length - 1];\n    }\n    return simplifiedOffset;\n}\n//# sourceMappingURL=simplify.js.map","/**\n * @module ol/format/FormatType\n */\n/**\n * @enum {string}\n */\nexport default {\n    ARRAY_BUFFER: 'arraybuffer',\n    JSON: 'json',\n    TEXT: 'text',\n    XML: 'xml',\n};\n//# sourceMappingURL=FormatType.js.map","/**\n * @module ol/format/XML\n */\nimport { isDocument, parse } from '../xml.js';\n/**\n * @classdesc\n * Generic format for reading non-feature XML data\n *\n * @abstract\n */\nvar XML = /** @class */ (function () {\n    function XML() {\n    }\n    /**\n     * Read the source document.\n     *\n     * @param {Document|Element|string} source The XML source.\n     * @return {Object} An object representing the source.\n     * @api\n     */\n    XML.prototype.read = function (source) {\n        if (!source) {\n            return null;\n        }\n        else if (typeof source === 'string') {\n            var doc = parse(source);\n            return this.readFromDocument(doc);\n        }\n        else if (isDocument(source)) {\n            return this.readFromDocument(/** @type {Document} */ (source));\n        }\n        else {\n            return this.readFromNode(/** @type {Element} */ (source));\n        }\n    };\n    /**\n     * @param {Document} doc Document.\n     * @return {Object} Object\n     */\n    XML.prototype.readFromDocument = function (doc) {\n        for (var n = doc.firstChild; n; n = n.nextSibling) {\n            if (n.nodeType == Node.ELEMENT_NODE) {\n                return this.readFromNode(/** @type {Element} */ (n));\n            }\n        }\n        return null;\n    };\n    /**\n     * @abstract\n     * @param {Element} node Node.\n     * @return {Object} Object\n     */\n    XML.prototype.readFromNode = function (node) { };\n    return XML;\n}());\nexport default XML;\n//# sourceMappingURL=XML.js.map","/**\n * @module ol/format/xlink\n */\n/**\n * @const\n * @type {string}\n */\nvar NAMESPACE_URI = 'http://www.w3.org/1999/xlink';\n/**\n * @param {Element} node Node.\n * @return {string|undefined} href.\n */\nexport function readHref(node) {\n    return node.getAttributeNS(NAMESPACE_URI, 'href');\n}\n//# sourceMappingURL=xlink.js.map","/**\n * @module ol/format/xsd\n */\nimport { getAllTextContent, getDocument } from '../xml.js';\nimport { padNumber } from '../string.js';\n/**\n * @param {Node} node Node.\n * @return {boolean|undefined} Boolean.\n */\nexport function readBoolean(node) {\n    var s = getAllTextContent(node, false);\n    return readBooleanString(s);\n}\n/**\n * @param {string} string String.\n * @return {boolean|undefined} Boolean.\n */\nexport function readBooleanString(string) {\n    var m = /^\\s*(true|1)|(false|0)\\s*$/.exec(string);\n    if (m) {\n        return m[1] !== undefined || false;\n    }\n    else {\n        return undefined;\n    }\n}\n/**\n * @param {Node} node Node.\n * @return {number|undefined} DateTime in seconds.\n */\nexport function readDateTime(node) {\n    var s = getAllTextContent(node, false);\n    var dateTime = Date.parse(s);\n    return isNaN(dateTime) ? undefined : dateTime / 1000;\n}\n/**\n * @param {Node} node Node.\n * @return {number|undefined} Decimal.\n */\nexport function readDecimal(node) {\n    var s = getAllTextContent(node, false);\n    return readDecimalString(s);\n}\n/**\n * @param {string} string String.\n * @return {number|undefined} Decimal.\n */\nexport function readDecimalString(string) {\n    // FIXME check spec\n    var m = /^\\s*([+\\-]?\\d*\\.?\\d+(?:e[+\\-]?\\d+)?)\\s*$/i.exec(string);\n    if (m) {\n        return parseFloat(m[1]);\n    }\n    else {\n        return undefined;\n    }\n}\n/**\n * @param {Node} node Node.\n * @return {number|undefined} Non negative integer.\n */\nexport function readPositiveInteger(node) {\n    var s = getAllTextContent(node, false);\n    return readNonNegativeIntegerString(s);\n}\n/**\n * @param {string} string String.\n * @return {number|undefined} Non negative integer.\n */\nexport function readNonNegativeIntegerString(string) {\n    var m = /^\\s*(\\d+)\\s*$/.exec(string);\n    if (m) {\n        return parseInt(m[1], 10);\n    }\n    else {\n        return undefined;\n    }\n}\n/**\n * @param {Node} node Node.\n * @return {string|undefined} String.\n */\nexport function readString(node) {\n    return getAllTextContent(node, false).trim();\n}\n/**\n * @param {Node} node Node to append a TextNode with the boolean to.\n * @param {boolean} bool Boolean.\n */\nexport function writeBooleanTextNode(node, bool) {\n    writeStringTextNode(node, bool ? '1' : '0');\n}\n/**\n * @param {Node} node Node to append a CDATA Section with the string to.\n * @param {string} string String.\n */\nexport function writeCDATASection(node, string) {\n    node.appendChild(getDocument().createCDATASection(string));\n}\n/**\n * @param {Node} node Node to append a TextNode with the dateTime to.\n * @param {number} dateTime DateTime in seconds.\n */\nexport function writeDateTimeTextNode(node, dateTime) {\n    var date = new Date(dateTime * 1000);\n    var string = date.getUTCFullYear() +\n        '-' +\n        padNumber(date.getUTCMonth() + 1, 2) +\n        '-' +\n        padNumber(date.getUTCDate(), 2) +\n        'T' +\n        padNumber(date.getUTCHours(), 2) +\n        ':' +\n        padNumber(date.getUTCMinutes(), 2) +\n        ':' +\n        padNumber(date.getUTCSeconds(), 2) +\n        'Z';\n    node.appendChild(getDocument().createTextNode(string));\n}\n/**\n * @param {Node} node Node to append a TextNode with the decimal to.\n * @param {number} decimal Decimal.\n */\nexport function writeDecimalTextNode(node, decimal) {\n    var string = decimal.toPrecision();\n    node.appendChild(getDocument().createTextNode(string));\n}\n/**\n * @param {Node} node Node to append a TextNode with the decimal to.\n * @param {number} nonNegativeInteger Non negative integer.\n */\nexport function writeNonNegativeIntegerTextNode(node, nonNegativeInteger) {\n    var string = nonNegativeInteger.toString();\n    node.appendChild(getDocument().createTextNode(string));\n}\n/**\n * @param {Node} node Node to append a TextNode with the string to.\n * @param {string} string String.\n */\nexport function writeStringTextNode(node, string) {\n    node.appendChild(getDocument().createTextNode(string));\n}\n//# sourceMappingURL=xsd.js.map","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/format/OWS\n */\nimport XML from './XML.js';\nimport { makeObjectPropertyPusher, makeObjectPropertySetter, makeStructureNS, pushParseAndPop, } from '../xml.js';\nimport { readHref } from './xlink.js';\nimport { readString } from './xsd.js';\n/**\n * @const\n * @type {Array<null|string>}\n */\nvar NAMESPACE_URIS = [null, 'http://www.opengis.net/ows/1.1'];\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nvar PARSERS = makeStructureNS(NAMESPACE_URIS, {\n    'ServiceIdentification': makeObjectPropertySetter(readServiceIdentification),\n    'ServiceProvider': makeObjectPropertySetter(readServiceProvider),\n    'OperationsMetadata': makeObjectPropertySetter(readOperationsMetadata),\n});\nvar OWS = /** @class */ (function (_super) {\n    __extends(OWS, _super);\n    function OWS() {\n        return _super.call(this) || this;\n    }\n    /**\n     * @param {Element} node Node.\n     * @return {Object} Object\n     */\n    OWS.prototype.readFromNode = function (node) {\n        var owsObject = pushParseAndPop({}, PARSERS, node, []);\n        return owsObject ? owsObject : null;\n    };\n    return OWS;\n}(XML));\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nvar ADDRESS_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n    'DeliveryPoint': makeObjectPropertySetter(readString),\n    'City': makeObjectPropertySetter(readString),\n    'AdministrativeArea': makeObjectPropertySetter(readString),\n    'PostalCode': makeObjectPropertySetter(readString),\n    'Country': makeObjectPropertySetter(readString),\n    'ElectronicMailAddress': makeObjectPropertySetter(readString),\n});\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nvar ALLOWED_VALUES_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n    'Value': makeObjectPropertyPusher(readValue),\n});\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nvar CONSTRAINT_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n    'AllowedValues': makeObjectPropertySetter(readAllowedValues),\n});\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nvar CONTACT_INFO_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n    'Phone': makeObjectPropertySetter(readPhone),\n    'Address': makeObjectPropertySetter(readAddress),\n});\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nvar DCP_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n    'HTTP': makeObjectPropertySetter(readHttp),\n});\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nvar HTTP_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n    'Get': makeObjectPropertyPusher(readGet),\n    'Post': undefined, // TODO\n});\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nvar OPERATION_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n    'DCP': makeObjectPropertySetter(readDcp),\n});\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nvar OPERATIONS_METADATA_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n    'Operation': readOperation,\n});\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nvar PHONE_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n    'Voice': makeObjectPropertySetter(readString),\n    'Facsimile': makeObjectPropertySetter(readString),\n});\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nvar REQUEST_METHOD_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n    'Constraint': makeObjectPropertyPusher(readConstraint),\n});\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nvar SERVICE_CONTACT_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n    'IndividualName': makeObjectPropertySetter(readString),\n    'PositionName': makeObjectPropertySetter(readString),\n    'ContactInfo': makeObjectPropertySetter(readContactInfo),\n});\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nvar SERVICE_IDENTIFICATION_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n    'Abstract': makeObjectPropertySetter(readString),\n    'AccessConstraints': makeObjectPropertySetter(readString),\n    'Fees': makeObjectPropertySetter(readString),\n    'Title': makeObjectPropertySetter(readString),\n    'ServiceTypeVersion': makeObjectPropertySetter(readString),\n    'ServiceType': makeObjectPropertySetter(readString),\n});\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nvar SERVICE_PROVIDER_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n    'ProviderName': makeObjectPropertySetter(readString),\n    'ProviderSite': makeObjectPropertySetter(readHref),\n    'ServiceContact': makeObjectPropertySetter(readServiceContact),\n});\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} The address.\n */\nfunction readAddress(node, objectStack) {\n    return pushParseAndPop({}, ADDRESS_PARSERS, node, objectStack);\n}\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} The values.\n */\nfunction readAllowedValues(node, objectStack) {\n    return pushParseAndPop({}, ALLOWED_VALUES_PARSERS, node, objectStack);\n}\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} The constraint.\n */\nfunction readConstraint(node, objectStack) {\n    var name = node.getAttribute('name');\n    if (!name) {\n        return undefined;\n    }\n    return pushParseAndPop({ 'name': name }, CONSTRAINT_PARSERS, node, objectStack);\n}\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} The contact info.\n */\nfunction readContactInfo(node, objectStack) {\n    return pushParseAndPop({}, CONTACT_INFO_PARSERS, node, objectStack);\n}\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} The DCP.\n */\nfunction readDcp(node, objectStack) {\n    return pushParseAndPop({}, DCP_PARSERS, node, objectStack);\n}\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} The GET object.\n */\nfunction readGet(node, objectStack) {\n    var href = readHref(node);\n    if (!href) {\n        return undefined;\n    }\n    return pushParseAndPop({ 'href': href }, REQUEST_METHOD_PARSERS, node, objectStack);\n}\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} The HTTP object.\n */\nfunction readHttp(node, objectStack) {\n    return pushParseAndPop({}, HTTP_PARSERS, node, objectStack);\n}\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} The operation.\n */\nfunction readOperation(node, objectStack) {\n    var name = node.getAttribute('name');\n    var value = pushParseAndPop({}, OPERATION_PARSERS, node, objectStack);\n    if (!value) {\n        return undefined;\n    }\n    var object = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n    object[name] = value;\n}\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} The operations metadata.\n */\nfunction readOperationsMetadata(node, objectStack) {\n    return pushParseAndPop({}, OPERATIONS_METADATA_PARSERS, node, objectStack);\n}\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} The phone.\n */\nfunction readPhone(node, objectStack) {\n    return pushParseAndPop({}, PHONE_PARSERS, node, objectStack);\n}\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} The service identification.\n */\nfunction readServiceIdentification(node, objectStack) {\n    return pushParseAndPop({}, SERVICE_IDENTIFICATION_PARSERS, node, objectStack);\n}\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} The service contact.\n */\nfunction readServiceContact(node, objectStack) {\n    return pushParseAndPop({}, SERVICE_CONTACT_PARSERS, node, objectStack);\n}\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} The service provider.\n */\nfunction readServiceProvider(node, objectStack) {\n    return pushParseAndPop({}, SERVICE_PROVIDER_PARSERS, node, objectStack);\n}\n/**\n * @param {Node} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {string|undefined} The value.\n */\nfunction readValue(node, objectStack) {\n    return readString(node);\n}\nexport default OWS;\n//# sourceMappingURL=OWS.js.map","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/format/WMTSCapabilities\n */\nimport OWS from './OWS.js';\nimport XML from './XML.js';\nimport { boundingExtent } from '../extent.js';\nimport { makeArrayPusher, makeObjectPropertyPusher, makeObjectPropertySetter, makeStructureNS, pushParseAndPop, } from '../xml.js';\nimport { readDecimal, readPositiveInteger, readString } from './xsd.js';\nimport { readHref } from './xlink.js';\n/**\n * @const\n * @type {Array<null|string>}\n */\nvar NAMESPACE_URIS = [null, 'http://www.opengis.net/wmts/1.0'];\n/**\n * @const\n * @type {Array<null|string>}\n */\nvar OWS_NAMESPACE_URIS = [null, 'http://www.opengis.net/ows/1.1'];\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nvar PARSERS = makeStructureNS(NAMESPACE_URIS, {\n    'Contents': makeObjectPropertySetter(readContents),\n});\n/**\n * @classdesc\n * Format for reading WMTS capabilities data.\n *\n * @api\n */\nvar WMTSCapabilities = /** @class */ (function (_super) {\n    __extends(WMTSCapabilities, _super);\n    function WMTSCapabilities() {\n        var _this = _super.call(this) || this;\n        /**\n         * @type {OWS}\n         * @private\n         */\n        _this.owsParser_ = new OWS();\n        return _this;\n    }\n    /**\n     * @param {Element} node Node.\n     * @return {Object} Object\n     */\n    WMTSCapabilities.prototype.readFromNode = function (node) {\n        var version = node.getAttribute('version');\n        if (version) {\n            version = version.trim();\n        }\n        var WMTSCapabilityObject = this.owsParser_.readFromNode(node);\n        if (!WMTSCapabilityObject) {\n            return null;\n        }\n        WMTSCapabilityObject['version'] = version;\n        WMTSCapabilityObject = pushParseAndPop(WMTSCapabilityObject, PARSERS, node, []);\n        return WMTSCapabilityObject ? WMTSCapabilityObject : null;\n    };\n    return WMTSCapabilities;\n}(XML));\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nvar CONTENTS_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n    'Layer': makeObjectPropertyPusher(readLayer),\n    'TileMatrixSet': makeObjectPropertyPusher(readTileMatrixSet),\n});\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nvar LAYER_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n    'Style': makeObjectPropertyPusher(readStyle),\n    'Format': makeObjectPropertyPusher(readString),\n    'TileMatrixSetLink': makeObjectPropertyPusher(readTileMatrixSetLink),\n    'Dimension': makeObjectPropertyPusher(readDimensions),\n    'ResourceURL': makeObjectPropertyPusher(readResourceUrl),\n}, makeStructureNS(OWS_NAMESPACE_URIS, {\n    'Title': makeObjectPropertySetter(readString),\n    'Abstract': makeObjectPropertySetter(readString),\n    'WGS84BoundingBox': makeObjectPropertySetter(readBoundingBox),\n    'Identifier': makeObjectPropertySetter(readString),\n}));\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nvar STYLE_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n    'LegendURL': makeObjectPropertyPusher(readLegendUrl),\n}, makeStructureNS(OWS_NAMESPACE_URIS, {\n    'Title': makeObjectPropertySetter(readString),\n    'Identifier': makeObjectPropertySetter(readString),\n}));\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nvar TMS_LINKS_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n    'TileMatrixSet': makeObjectPropertySetter(readString),\n    'TileMatrixSetLimits': makeObjectPropertySetter(readTileMatrixLimitsList),\n});\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nvar TMS_LIMITS_LIST_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n    'TileMatrixLimits': makeArrayPusher(readTileMatrixLimits),\n});\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nvar TMS_LIMITS_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n    'TileMatrix': makeObjectPropertySetter(readString),\n    'MinTileRow': makeObjectPropertySetter(readPositiveInteger),\n    'MaxTileRow': makeObjectPropertySetter(readPositiveInteger),\n    'MinTileCol': makeObjectPropertySetter(readPositiveInteger),\n    'MaxTileCol': makeObjectPropertySetter(readPositiveInteger),\n});\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nvar DIMENSION_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n    'Default': makeObjectPropertySetter(readString),\n    'Value': makeObjectPropertyPusher(readString),\n}, makeStructureNS(OWS_NAMESPACE_URIS, {\n    'Identifier': makeObjectPropertySetter(readString),\n}));\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nvar WGS84_BBOX_READERS = makeStructureNS(OWS_NAMESPACE_URIS, {\n    'LowerCorner': makeArrayPusher(readCoordinates),\n    'UpperCorner': makeArrayPusher(readCoordinates),\n});\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nvar TMS_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n    'WellKnownScaleSet': makeObjectPropertySetter(readString),\n    'TileMatrix': makeObjectPropertyPusher(readTileMatrix),\n}, makeStructureNS(OWS_NAMESPACE_URIS, {\n    'SupportedCRS': makeObjectPropertySetter(readString),\n    'Identifier': makeObjectPropertySetter(readString),\n    'BoundingBox': makeObjectPropertySetter(readBoundingBox),\n}));\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nvar TM_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n    'TopLeftCorner': makeObjectPropertySetter(readCoordinates),\n    'ScaleDenominator': makeObjectPropertySetter(readDecimal),\n    'TileWidth': makeObjectPropertySetter(readPositiveInteger),\n    'TileHeight': makeObjectPropertySetter(readPositiveInteger),\n    'MatrixWidth': makeObjectPropertySetter(readPositiveInteger),\n    'MatrixHeight': makeObjectPropertySetter(readPositiveInteger),\n}, makeStructureNS(OWS_NAMESPACE_URIS, {\n    'Identifier': makeObjectPropertySetter(readString),\n}));\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} Attribution object.\n */\nfunction readContents(node, objectStack) {\n    return pushParseAndPop({}, CONTENTS_PARSERS, node, objectStack);\n}\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} Layers object.\n */\nfunction readLayer(node, objectStack) {\n    return pushParseAndPop({}, LAYER_PARSERS, node, objectStack);\n}\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} Tile Matrix Set object.\n */\nfunction readTileMatrixSet(node, objectStack) {\n    return pushParseAndPop({}, TMS_PARSERS, node, objectStack);\n}\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} Style object.\n */\nfunction readStyle(node, objectStack) {\n    var style = pushParseAndPop({}, STYLE_PARSERS, node, objectStack);\n    if (!style) {\n        return undefined;\n    }\n    var isDefault = node.getAttribute('isDefault') === 'true';\n    style['isDefault'] = isDefault;\n    return style;\n}\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} Tile Matrix Set Link object.\n */\nfunction readTileMatrixSetLink(node, objectStack) {\n    return pushParseAndPop({}, TMS_LINKS_PARSERS, node, objectStack);\n}\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} Dimension object.\n */\nfunction readDimensions(node, objectStack) {\n    return pushParseAndPop({}, DIMENSION_PARSERS, node, objectStack);\n}\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} Resource URL object.\n */\nfunction readResourceUrl(node, objectStack) {\n    var format = node.getAttribute('format');\n    var template = node.getAttribute('template');\n    var resourceType = node.getAttribute('resourceType');\n    var resource = {};\n    if (format) {\n        resource['format'] = format;\n    }\n    if (template) {\n        resource['template'] = template;\n    }\n    if (resourceType) {\n        resource['resourceType'] = resourceType;\n    }\n    return resource;\n}\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} BBox object.\n */\nfunction readBoundingBox(node, objectStack) {\n    var coordinates = pushParseAndPop([], WGS84_BBOX_READERS, node, objectStack);\n    if (coordinates.length != 2) {\n        return undefined;\n    }\n    return boundingExtent(coordinates);\n}\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} Legend object.\n */\nfunction readLegendUrl(node, objectStack) {\n    var legend = {};\n    legend['format'] = node.getAttribute('format');\n    legend['href'] = readHref(node);\n    return legend;\n}\n/**\n * @param {Node} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} Coordinates object.\n */\nfunction readCoordinates(node, objectStack) {\n    var coordinates = readString(node).split(/\\s+/);\n    if (!coordinates || coordinates.length != 2) {\n        return undefined;\n    }\n    var x = +coordinates[0];\n    var y = +coordinates[1];\n    if (isNaN(x) || isNaN(y)) {\n        return undefined;\n    }\n    return [x, y];\n}\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} TileMatrix object.\n */\nfunction readTileMatrix(node, objectStack) {\n    return pushParseAndPop({}, TM_PARSERS, node, objectStack);\n}\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} TileMatrixSetLimits Object.\n */\nfunction readTileMatrixLimitsList(node, objectStack) {\n    return pushParseAndPop([], TMS_LIMITS_LIST_PARSERS, node, objectStack);\n}\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} TileMatrixLimits Array.\n */\nfunction readTileMatrixLimits(node, objectStack) {\n    return pushParseAndPop({}, TMS_LIMITS_PARSERS, node, objectStack);\n}\nexport default WMTSCapabilities;\n//# sourceMappingURL=WMTSCapabilities.js.map","/**\n * @module ol/geom/flat/contains\n */\nimport { forEachCorner } from '../../extent.js';\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} Contains extent.\n */\nexport function linearRingContainsExtent(flatCoordinates, offset, end, stride, extent) {\n    var outside = forEachCorner(extent, \n    /**\n     * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n     * @return {boolean} Contains (x, y).\n     */\n    function (coordinate) {\n        return !linearRingContainsXY(flatCoordinates, offset, end, stride, coordinate[0], coordinate[1]);\n    });\n    return !outside;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} x X.\n * @param {number} y Y.\n * @return {boolean} Contains (x, y).\n */\nexport function linearRingContainsXY(flatCoordinates, offset, end, stride, x, y) {\n    // https://geomalgorithms.com/a03-_inclusion.html\n    // Copyright 2000 softSurfer, 2012 Dan Sunday\n    // This code may be freely used and modified for any purpose\n    // providing that this copyright notice is included with it.\n    // SoftSurfer makes no warranty for this code, and cannot be held\n    // liable for any real or imagined damage resulting from its use.\n    // Users of this code must verify correctness for their application.\n    var wn = 0;\n    var x1 = flatCoordinates[end - stride];\n    var y1 = flatCoordinates[end - stride + 1];\n    for (; offset < end; offset += stride) {\n        var x2 = flatCoordinates[offset];\n        var y2 = flatCoordinates[offset + 1];\n        if (y1 <= y) {\n            if (y2 > y && (x2 - x1) * (y - y1) - (x - x1) * (y2 - y1) > 0) {\n                wn++;\n            }\n        }\n        else if (y2 <= y && (x2 - x1) * (y - y1) - (x - x1) * (y2 - y1) < 0) {\n            wn--;\n        }\n        x1 = x2;\n        y1 = y2;\n    }\n    return wn !== 0;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {number} x X.\n * @param {number} y Y.\n * @return {boolean} Contains (x, y).\n */\nexport function linearRingsContainsXY(flatCoordinates, offset, ends, stride, x, y) {\n    if (ends.length === 0) {\n        return false;\n    }\n    if (!linearRingContainsXY(flatCoordinates, offset, ends[0], stride, x, y)) {\n        return false;\n    }\n    for (var i = 1, ii = ends.length; i < ii; ++i) {\n        if (linearRingContainsXY(flatCoordinates, ends[i - 1], ends[i], stride, x, y)) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {number} x X.\n * @param {number} y Y.\n * @return {boolean} Contains (x, y).\n */\nexport function linearRingssContainsXY(flatCoordinates, offset, endss, stride, x, y) {\n    if (endss.length === 0) {\n        return false;\n    }\n    for (var i = 0, ii = endss.length; i < ii; ++i) {\n        var ends = endss[i];\n        if (linearRingsContainsXY(flatCoordinates, offset, ends, stride, x, y)) {\n            return true;\n        }\n        offset = ends[ends.length - 1];\n    }\n    return false;\n}\n//# sourceMappingURL=contains.js.map","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/geom/MultiLineString\n */\nimport GeometryLayout from './GeometryLayout.js';\nimport GeometryType from './GeometryType.js';\nimport LineString from './LineString.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport { arrayMaxSquaredDelta, assignClosestArrayPoint } from './flat/closest.js';\nimport { closestSquaredDistanceXY } from '../extent.js';\nimport { deflateCoordinatesArray } from './flat/deflate.js';\nimport { douglasPeuckerArray } from './flat/simplify.js';\nimport { extend } from '../array.js';\nimport { inflateCoordinatesArray } from './flat/inflate.js';\nimport { interpolatePoint, lineStringsCoordinateAtM, } from './flat/interpolate.js';\nimport { intersectsLineStringArray } from './flat/intersectsextent.js';\n/**\n * @classdesc\n * Multi-linestring geometry.\n *\n * @api\n */\nvar MultiLineString = /** @class */ (function (_super) {\n    __extends(MultiLineString, _super);\n    /**\n     * @param {Array<Array<import(\"../coordinate.js\").Coordinate>|LineString>|Array<number>} coordinates\n     *     Coordinates or LineString geometries. (For internal use, flat coordinates in\n     *     combination with `opt_layout` and `opt_ends` are also accepted.)\n     * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n     * @param {Array<number>} [opt_ends] Flat coordinate ends for internal use.\n     */\n    function MultiLineString(coordinates, opt_layout, opt_ends) {\n        var _this = _super.call(this) || this;\n        /**\n         * @type {Array<number>}\n         * @private\n         */\n        _this.ends_ = [];\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.maxDelta_ = -1;\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.maxDeltaRevision_ = -1;\n        if (Array.isArray(coordinates[0])) {\n            _this.setCoordinates(\n            /** @type {Array<Array<import(\"../coordinate.js\").Coordinate>>} */ (coordinates), opt_layout);\n        }\n        else if (opt_layout !== undefined && opt_ends) {\n            _this.setFlatCoordinates(opt_layout, \n            /** @type {Array<number>} */ (coordinates));\n            _this.ends_ = opt_ends;\n        }\n        else {\n            var layout = _this.getLayout();\n            var lineStrings = /** @type {Array<LineString>} */ (coordinates);\n            var flatCoordinates = [];\n            var ends = [];\n            for (var i = 0, ii = lineStrings.length; i < ii; ++i) {\n                var lineString = lineStrings[i];\n                if (i === 0) {\n                    layout = lineString.getLayout();\n                }\n                extend(flatCoordinates, lineString.getFlatCoordinates());\n                ends.push(flatCoordinates.length);\n            }\n            _this.setFlatCoordinates(layout, flatCoordinates);\n            _this.ends_ = ends;\n        }\n        return _this;\n    }\n    /**\n     * Append the passed linestring to the multilinestring.\n     * @param {LineString} lineString LineString.\n     * @api\n     */\n    MultiLineString.prototype.appendLineString = function (lineString) {\n        if (!this.flatCoordinates) {\n            this.flatCoordinates = lineString.getFlatCoordinates().slice();\n        }\n        else {\n            extend(this.flatCoordinates, lineString.getFlatCoordinates().slice());\n        }\n        this.ends_.push(this.flatCoordinates.length);\n        this.changed();\n    };\n    /**\n     * Make a complete copy of the geometry.\n     * @return {!MultiLineString} Clone.\n     * @api\n     */\n    MultiLineString.prototype.clone = function () {\n        var multiLineString = new MultiLineString(this.flatCoordinates.slice(), this.layout, this.ends_.slice());\n        multiLineString.applyProperties(this);\n        return multiLineString;\n    };\n    /**\n     * @param {number} x X.\n     * @param {number} y Y.\n     * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n     * @param {number} minSquaredDistance Minimum squared distance.\n     * @return {number} Minimum squared distance.\n     */\n    MultiLineString.prototype.closestPointXY = function (x, y, closestPoint, minSquaredDistance) {\n        if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n            return minSquaredDistance;\n        }\n        if (this.maxDeltaRevision_ != this.getRevision()) {\n            this.maxDelta_ = Math.sqrt(arrayMaxSquaredDelta(this.flatCoordinates, 0, this.ends_, this.stride, 0));\n            this.maxDeltaRevision_ = this.getRevision();\n        }\n        return assignClosestArrayPoint(this.flatCoordinates, 0, this.ends_, this.stride, this.maxDelta_, false, x, y, closestPoint, minSquaredDistance);\n    };\n    /**\n     * Returns the coordinate at `m` using linear interpolation, or `null` if no\n     * such coordinate exists.\n     *\n     * `opt_extrapolate` controls extrapolation beyond the range of Ms in the\n     * MultiLineString. If `opt_extrapolate` is `true` then Ms less than the first\n     * M will return the first coordinate and Ms greater than the last M will\n     * return the last coordinate.\n     *\n     * `opt_interpolate` controls interpolation between consecutive LineStrings\n     * within the MultiLineString. If `opt_interpolate` is `true` the coordinates\n     * will be linearly interpolated between the last coordinate of one LineString\n     * and the first coordinate of the next LineString.  If `opt_interpolate` is\n     * `false` then the function will return `null` for Ms falling between\n     * LineStrings.\n     *\n     * @param {number} m M.\n     * @param {boolean} [opt_extrapolate] Extrapolate. Default is `false`.\n     * @param {boolean} [opt_interpolate] Interpolate. Default is `false`.\n     * @return {import(\"../coordinate.js\").Coordinate|null} Coordinate.\n     * @api\n     */\n    MultiLineString.prototype.getCoordinateAtM = function (m, opt_extrapolate, opt_interpolate) {\n        if ((this.layout != GeometryLayout.XYM &&\n            this.layout != GeometryLayout.XYZM) ||\n            this.flatCoordinates.length === 0) {\n            return null;\n        }\n        var extrapolate = opt_extrapolate !== undefined ? opt_extrapolate : false;\n        var interpolate = opt_interpolate !== undefined ? opt_interpolate : false;\n        return lineStringsCoordinateAtM(this.flatCoordinates, 0, this.ends_, this.stride, m, extrapolate, interpolate);\n    };\n    /**\n     * Return the coordinates of the multilinestring.\n     * @return {Array<Array<import(\"../coordinate.js\").Coordinate>>} Coordinates.\n     * @api\n     */\n    MultiLineString.prototype.getCoordinates = function () {\n        return inflateCoordinatesArray(this.flatCoordinates, 0, this.ends_, this.stride);\n    };\n    /**\n     * @return {Array<number>} Ends.\n     */\n    MultiLineString.prototype.getEnds = function () {\n        return this.ends_;\n    };\n    /**\n     * Return the linestring at the specified index.\n     * @param {number} index Index.\n     * @return {LineString} LineString.\n     * @api\n     */\n    MultiLineString.prototype.getLineString = function (index) {\n        if (index < 0 || this.ends_.length <= index) {\n            return null;\n        }\n        return new LineString(this.flatCoordinates.slice(index === 0 ? 0 : this.ends_[index - 1], this.ends_[index]), this.layout);\n    };\n    /**\n     * Return the linestrings of this multilinestring.\n     * @return {Array<LineString>} LineStrings.\n     * @api\n     */\n    MultiLineString.prototype.getLineStrings = function () {\n        var flatCoordinates = this.flatCoordinates;\n        var ends = this.ends_;\n        var layout = this.layout;\n        /** @type {Array<LineString>} */\n        var lineStrings = [];\n        var offset = 0;\n        for (var i = 0, ii = ends.length; i < ii; ++i) {\n            var end = ends[i];\n            var lineString = new LineString(flatCoordinates.slice(offset, end), layout);\n            lineStrings.push(lineString);\n            offset = end;\n        }\n        return lineStrings;\n    };\n    /**\n     * @return {Array<number>} Flat midpoints.\n     */\n    MultiLineString.prototype.getFlatMidpoints = function () {\n        var midpoints = [];\n        var flatCoordinates = this.flatCoordinates;\n        var offset = 0;\n        var ends = this.ends_;\n        var stride = this.stride;\n        for (var i = 0, ii = ends.length; i < ii; ++i) {\n            var end = ends[i];\n            var midpoint = interpolatePoint(flatCoordinates, offset, end, stride, 0.5);\n            extend(midpoints, midpoint);\n            offset = end;\n        }\n        return midpoints;\n    };\n    /**\n     * @param {number} squaredTolerance Squared tolerance.\n     * @return {MultiLineString} Simplified MultiLineString.\n     * @protected\n     */\n    MultiLineString.prototype.getSimplifiedGeometryInternal = function (squaredTolerance) {\n        var simplifiedFlatCoordinates = [];\n        var simplifiedEnds = [];\n        simplifiedFlatCoordinates.length = douglasPeuckerArray(this.flatCoordinates, 0, this.ends_, this.stride, squaredTolerance, simplifiedFlatCoordinates, 0, simplifiedEnds);\n        return new MultiLineString(simplifiedFlatCoordinates, GeometryLayout.XY, simplifiedEnds);\n    };\n    /**\n     * Get the type of this geometry.\n     * @return {import(\"./GeometryType.js\").default} Geometry type.\n     * @api\n     */\n    MultiLineString.prototype.getType = function () {\n        return GeometryType.MULTI_LINE_STRING;\n    };\n    /**\n     * Test if the geometry and the passed extent intersect.\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @return {boolean} `true` if the geometry and the extent intersect.\n     * @api\n     */\n    MultiLineString.prototype.intersectsExtent = function (extent) {\n        return intersectsLineStringArray(this.flatCoordinates, 0, this.ends_, this.stride, extent);\n    };\n    /**\n     * Set the coordinates of the multilinestring.\n     * @param {!Array<Array<import(\"../coordinate.js\").Coordinate>>} coordinates Coordinates.\n     * @param {GeometryLayout} [opt_layout] Layout.\n     * @api\n     */\n    MultiLineString.prototype.setCoordinates = function (coordinates, opt_layout) {\n        this.setLayout(opt_layout, coordinates, 2);\n        if (!this.flatCoordinates) {\n            this.flatCoordinates = [];\n        }\n        var ends = deflateCoordinatesArray(this.flatCoordinates, 0, coordinates, this.stride, this.ends_);\n        this.flatCoordinates.length = ends.length === 0 ? 0 : ends[ends.length - 1];\n        this.changed();\n    };\n    return MultiLineString;\n}(SimpleGeometry));\nexport default MultiLineString;\n//# sourceMappingURL=MultiLineString.js.map","/**\n * @module ol/geom/flat/reverse\n */\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n */\nexport function coordinates(flatCoordinates, offset, end, stride) {\n    while (offset < end - stride) {\n        for (var i = 0; i < stride; ++i) {\n            var tmp = flatCoordinates[offset + i];\n            flatCoordinates[offset + i] = flatCoordinates[end - stride + i];\n            flatCoordinates[end - stride + i] = tmp;\n        }\n        offset += stride;\n        end -= stride;\n    }\n}\n//# sourceMappingURL=reverse.js.map","/**\n * @module ol/geom/flat/orient\n */\nimport { coordinates as reverseCoordinates } from './reverse.js';\n/**\n * Is the linear ring oriented clockwise in a coordinate system with a bottom-left\n * coordinate origin? For a coordinate system with a top-left coordinate origin,\n * the ring's orientation is clockwise when this function returns false.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @return {boolean} Is clockwise.\n */\nexport function linearRingIsClockwise(flatCoordinates, offset, end, stride) {\n    // https://stackoverflow.com/q/1165647/clockwise-method#1165943\n    // https://github.com/OSGeo/gdal/blob/master/gdal/ogr/ogrlinearring.cpp\n    var edge = 0;\n    var x1 = flatCoordinates[end - stride];\n    var y1 = flatCoordinates[end - stride + 1];\n    for (; offset < end; offset += stride) {\n        var x2 = flatCoordinates[offset];\n        var y2 = flatCoordinates[offset + 1];\n        edge += (x2 - x1) * (y2 + y1);\n        x1 = x2;\n        y1 = y2;\n    }\n    return edge === 0 ? undefined : edge > 0;\n}\n/**\n * Determines if linear rings are oriented.  By default, left-hand orientation\n * is tested (first ring must be clockwise, remaining rings counter-clockwise).\n * To test for right-hand orientation, use the `opt_right` argument.\n *\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Array of end indexes.\n * @param {number} stride Stride.\n * @param {boolean} [opt_right] Test for right-hand orientation\n *     (counter-clockwise exterior ring and clockwise interior rings).\n * @return {boolean} Rings are correctly oriented.\n */\nexport function linearRingsAreOriented(flatCoordinates, offset, ends, stride, opt_right) {\n    var right = opt_right !== undefined ? opt_right : false;\n    for (var i = 0, ii = ends.length; i < ii; ++i) {\n        var end = ends[i];\n        var isClockwise = linearRingIsClockwise(flatCoordinates, offset, end, stride);\n        if (i === 0) {\n            if ((right && isClockwise) || (!right && !isClockwise)) {\n                return false;\n            }\n        }\n        else {\n            if ((right && !isClockwise) || (!right && isClockwise)) {\n                return false;\n            }\n        }\n        offset = end;\n    }\n    return true;\n}\n/**\n * Determines if linear rings are oriented.  By default, left-hand orientation\n * is tested (first ring must be clockwise, remaining rings counter-clockwise).\n * To test for right-hand orientation, use the `opt_right` argument.\n *\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Array of array of end indexes.\n * @param {number} stride Stride.\n * @param {boolean} [opt_right] Test for right-hand orientation\n *     (counter-clockwise exterior ring and clockwise interior rings).\n * @return {boolean} Rings are correctly oriented.\n */\nexport function linearRingssAreOriented(flatCoordinates, offset, endss, stride, opt_right) {\n    for (var i = 0, ii = endss.length; i < ii; ++i) {\n        var ends = endss[i];\n        if (!linearRingsAreOriented(flatCoordinates, offset, ends, stride, opt_right)) {\n            return false;\n        }\n        if (ends.length) {\n            offset = ends[ends.length - 1];\n        }\n    }\n    return true;\n}\n/**\n * Orient coordinates in a flat array of linear rings.  By default, rings\n * are oriented following the left-hand rule (clockwise for exterior and\n * counter-clockwise for interior rings).  To orient according to the\n * right-hand rule, use the `opt_right` argument.\n *\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {boolean} [opt_right] Follow the right-hand rule for orientation.\n * @return {number} End.\n */\nexport function orientLinearRings(flatCoordinates, offset, ends, stride, opt_right) {\n    var right = opt_right !== undefined ? opt_right : false;\n    for (var i = 0, ii = ends.length; i < ii; ++i) {\n        var end = ends[i];\n        var isClockwise = linearRingIsClockwise(flatCoordinates, offset, end, stride);\n        var reverse = i === 0\n            ? (right && isClockwise) || (!right && !isClockwise)\n            : (right && !isClockwise) || (!right && isClockwise);\n        if (reverse) {\n            reverseCoordinates(flatCoordinates, offset, end, stride);\n        }\n        offset = end;\n    }\n    return offset;\n}\n/**\n * Orient coordinates in a flat array of linear rings.  By default, rings\n * are oriented following the left-hand rule (clockwise for exterior and\n * counter-clockwise for interior rings).  To orient according to the\n * right-hand rule, use the `opt_right` argument.\n *\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Array of array of end indexes.\n * @param {number} stride Stride.\n * @param {boolean} [opt_right] Follow the right-hand rule for orientation.\n * @return {number} End.\n */\nexport function orientLinearRingsArray(flatCoordinates, offset, endss, stride, opt_right) {\n    for (var i = 0, ii = endss.length; i < ii; ++i) {\n        offset = orientLinearRings(flatCoordinates, offset, endss[i], stride, opt_right);\n    }\n    return offset;\n}\n/**\n * Return a two-dimensional endss\n * @param {Array<number>} flatCoordinates Flat coordinates\n * @param {Array<number>} ends Linear ring end indexes\n * @return {Array<Array<number>>} Two dimensional endss array that can\n * be used to contruct a MultiPolygon\n */\nexport function inflateEnds(flatCoordinates, ends) {\n    var endss = [];\n    var offset = 0;\n    var prevEndIndex = 0;\n    for (var i = 0, ii = ends.length; i < ii; ++i) {\n        var end = ends[i];\n        // classifies an array of rings into polygons with outer rings and holes\n        if (!linearRingIsClockwise(flatCoordinates, offset, end, 2)) {\n            endss.push(ends.slice(prevEndIndex, i + 1));\n        }\n        else {\n            if (endss.length === 0) {\n                continue;\n            }\n            endss[endss.length - 1].push(ends[prevEndIndex]);\n        }\n        prevEndIndex = i + 1;\n        offset = end;\n    }\n    return endss;\n}\n//# sourceMappingURL=orient.js.map","/**\n * @module ol/geom/GeometryLayout\n */\n/**\n * The coordinate layout for geometries, indicating whether a 3rd or 4th z ('Z')\n * or measure ('M') coordinate is available. Supported values are `'XY'`,\n * `'XYZ'`, `'XYM'`, `'XYZM'`.\n * @enum {string}\n */\nexport default {\n    XY: 'XY',\n    XYZ: 'XYZ',\n    XYM: 'XYM',\n    XYZM: 'XYZM',\n};\n//# sourceMappingURL=GeometryLayout.js.map","/**\n * @module ol/geom/flat/length\n */\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @return {number} Length.\n */\nexport function lineStringLength(flatCoordinates, offset, end, stride) {\n    var x1 = flatCoordinates[offset];\n    var y1 = flatCoordinates[offset + 1];\n    var length = 0;\n    for (var i = offset + stride; i < end; i += stride) {\n        var x2 = flatCoordinates[i];\n        var y2 = flatCoordinates[i + 1];\n        length += Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n        x1 = x2;\n        y1 = y2;\n    }\n    return length;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @return {number} Perimeter.\n */\nexport function linearRingLength(flatCoordinates, offset, end, stride) {\n    var perimeter = lineStringLength(flatCoordinates, offset, end, stride);\n    var dx = flatCoordinates[end - stride] - flatCoordinates[offset];\n    var dy = flatCoordinates[end - stride + 1] - flatCoordinates[offset + 1];\n    perimeter += Math.sqrt(dx * dx + dy * dy);\n    return perimeter;\n}\n//# sourceMappingURL=length.js.map","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/geom/Polygon\n */\nimport GeometryLayout from './GeometryLayout.js';\nimport GeometryType from './GeometryType.js';\nimport LinearRing from './LinearRing.js';\nimport Point from './Point.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport { arrayMaxSquaredDelta, assignClosestArrayPoint } from './flat/closest.js';\nimport { closestSquaredDistanceXY, getCenter } from '../extent.js';\nimport { deflateCoordinatesArray } from './flat/deflate.js';\nimport { extend } from '../array.js';\nimport { getInteriorPointOfArray } from './flat/interiorpoint.js';\nimport { inflateCoordinatesArray } from './flat/inflate.js';\nimport { intersectsLinearRingArray } from './flat/intersectsextent.js';\nimport { linearRingsAreOriented, orientLinearRings } from './flat/orient.js';\nimport { linearRings as linearRingsArea } from './flat/area.js';\nimport { linearRingsContainsXY } from './flat/contains.js';\nimport { modulo } from '../math.js';\nimport { quantizeArray } from './flat/simplify.js';\nimport { offset as sphereOffset } from '../sphere.js';\n/**\n * @classdesc\n * Polygon geometry.\n *\n * @api\n */\nvar Polygon = /** @class */ (function (_super) {\n    __extends(Polygon, _super);\n    /**\n     * @param {!Array<Array<import(\"../coordinate.js\").Coordinate>>|!Array<number>} coordinates\n     *     Array of linear rings that define the polygon. The first linear ring of the\n     *     array defines the outer-boundary or surface of the polygon. Each subsequent\n     *     linear ring defines a hole in the surface of the polygon. A linear ring is\n     *     an array of vertices' coordinates where the first coordinate and the last are\n     *     equivalent. (For internal use, flat coordinates in combination with\n     *     `opt_layout` and `opt_ends` are also accepted.)\n     * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n     * @param {Array<number>} [opt_ends] Ends (for internal use with flat coordinates).\n     */\n    function Polygon(coordinates, opt_layout, opt_ends) {\n        var _this = _super.call(this) || this;\n        /**\n         * @type {Array<number>}\n         * @private\n         */\n        _this.ends_ = [];\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.flatInteriorPointRevision_ = -1;\n        /**\n         * @private\n         * @type {import(\"../coordinate.js\").Coordinate}\n         */\n        _this.flatInteriorPoint_ = null;\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.maxDelta_ = -1;\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.maxDeltaRevision_ = -1;\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.orientedRevision_ = -1;\n        /**\n         * @private\n         * @type {Array<number>}\n         */\n        _this.orientedFlatCoordinates_ = null;\n        if (opt_layout !== undefined && opt_ends) {\n            _this.setFlatCoordinates(opt_layout, \n            /** @type {Array<number>} */ (coordinates));\n            _this.ends_ = opt_ends;\n        }\n        else {\n            _this.setCoordinates(\n            /** @type {Array<Array<import(\"../coordinate.js\").Coordinate>>} */ (coordinates), opt_layout);\n        }\n        return _this;\n    }\n    /**\n     * Append the passed linear ring to this polygon.\n     * @param {LinearRing} linearRing Linear ring.\n     * @api\n     */\n    Polygon.prototype.appendLinearRing = function (linearRing) {\n        if (!this.flatCoordinates) {\n            this.flatCoordinates = linearRing.getFlatCoordinates().slice();\n        }\n        else {\n            extend(this.flatCoordinates, linearRing.getFlatCoordinates());\n        }\n        this.ends_.push(this.flatCoordinates.length);\n        this.changed();\n    };\n    /**\n     * Make a complete copy of the geometry.\n     * @return {!Polygon} Clone.\n     * @api\n     */\n    Polygon.prototype.clone = function () {\n        var polygon = new Polygon(this.flatCoordinates.slice(), this.layout, this.ends_.slice());\n        polygon.applyProperties(this);\n        return polygon;\n    };\n    /**\n     * @param {number} x X.\n     * @param {number} y Y.\n     * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n     * @param {number} minSquaredDistance Minimum squared distance.\n     * @return {number} Minimum squared distance.\n     */\n    Polygon.prototype.closestPointXY = function (x, y, closestPoint, minSquaredDistance) {\n        if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n            return minSquaredDistance;\n        }\n        if (this.maxDeltaRevision_ != this.getRevision()) {\n            this.maxDelta_ = Math.sqrt(arrayMaxSquaredDelta(this.flatCoordinates, 0, this.ends_, this.stride, 0));\n            this.maxDeltaRevision_ = this.getRevision();\n        }\n        return assignClosestArrayPoint(this.flatCoordinates, 0, this.ends_, this.stride, this.maxDelta_, true, x, y, closestPoint, minSquaredDistance);\n    };\n    /**\n     * @param {number} x X.\n     * @param {number} y Y.\n     * @return {boolean} Contains (x, y).\n     */\n    Polygon.prototype.containsXY = function (x, y) {\n        return linearRingsContainsXY(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, x, y);\n    };\n    /**\n     * Return the area of the polygon on projected plane.\n     * @return {number} Area (on projected plane).\n     * @api\n     */\n    Polygon.prototype.getArea = function () {\n        return linearRingsArea(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride);\n    };\n    /**\n     * Get the coordinate array for this geometry.  This array has the structure\n     * of a GeoJSON coordinate array for polygons.\n     *\n     * @param {boolean} [opt_right] Orient coordinates according to the right-hand\n     *     rule (counter-clockwise for exterior and clockwise for interior rings).\n     *     If `false`, coordinates will be oriented according to the left-hand rule\n     *     (clockwise for exterior and counter-clockwise for interior rings).\n     *     By default, coordinate orientation will depend on how the geometry was\n     *     constructed.\n     * @return {Array<Array<import(\"../coordinate.js\").Coordinate>>} Coordinates.\n     * @api\n     */\n    Polygon.prototype.getCoordinates = function (opt_right) {\n        var flatCoordinates;\n        if (opt_right !== undefined) {\n            flatCoordinates = this.getOrientedFlatCoordinates().slice();\n            orientLinearRings(flatCoordinates, 0, this.ends_, this.stride, opt_right);\n        }\n        else {\n            flatCoordinates = this.flatCoordinates;\n        }\n        return inflateCoordinatesArray(flatCoordinates, 0, this.ends_, this.stride);\n    };\n    /**\n     * @return {Array<number>} Ends.\n     */\n    Polygon.prototype.getEnds = function () {\n        return this.ends_;\n    };\n    /**\n     * @return {Array<number>} Interior point.\n     */\n    Polygon.prototype.getFlatInteriorPoint = function () {\n        if (this.flatInteriorPointRevision_ != this.getRevision()) {\n            var flatCenter = getCenter(this.getExtent());\n            this.flatInteriorPoint_ = getInteriorPointOfArray(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, flatCenter, 0);\n            this.flatInteriorPointRevision_ = this.getRevision();\n        }\n        return this.flatInteriorPoint_;\n    };\n    /**\n     * Return an interior point of the polygon.\n     * @return {Point} Interior point as XYM coordinate, where M is the\n     * length of the horizontal intersection that the point belongs to.\n     * @api\n     */\n    Polygon.prototype.getInteriorPoint = function () {\n        return new Point(this.getFlatInteriorPoint(), GeometryLayout.XYM);\n    };\n    /**\n     * Return the number of rings of the polygon,  this includes the exterior\n     * ring and any interior rings.\n     *\n     * @return {number} Number of rings.\n     * @api\n     */\n    Polygon.prototype.getLinearRingCount = function () {\n        return this.ends_.length;\n    };\n    /**\n     * Return the Nth linear ring of the polygon geometry. Return `null` if the\n     * given index is out of range.\n     * The exterior linear ring is available at index `0` and the interior rings\n     * at index `1` and beyond.\n     *\n     * @param {number} index Index.\n     * @return {LinearRing|null} Linear ring.\n     * @api\n     */\n    Polygon.prototype.getLinearRing = function (index) {\n        if (index < 0 || this.ends_.length <= index) {\n            return null;\n        }\n        return new LinearRing(this.flatCoordinates.slice(index === 0 ? 0 : this.ends_[index - 1], this.ends_[index]), this.layout);\n    };\n    /**\n     * Return the linear rings of the polygon.\n     * @return {Array<LinearRing>} Linear rings.\n     * @api\n     */\n    Polygon.prototype.getLinearRings = function () {\n        var layout = this.layout;\n        var flatCoordinates = this.flatCoordinates;\n        var ends = this.ends_;\n        var linearRings = [];\n        var offset = 0;\n        for (var i = 0, ii = ends.length; i < ii; ++i) {\n            var end = ends[i];\n            var linearRing = new LinearRing(flatCoordinates.slice(offset, end), layout);\n            linearRings.push(linearRing);\n            offset = end;\n        }\n        return linearRings;\n    };\n    /**\n     * @return {Array<number>} Oriented flat coordinates.\n     */\n    Polygon.prototype.getOrientedFlatCoordinates = function () {\n        if (this.orientedRevision_ != this.getRevision()) {\n            var flatCoordinates = this.flatCoordinates;\n            if (linearRingsAreOriented(flatCoordinates, 0, this.ends_, this.stride)) {\n                this.orientedFlatCoordinates_ = flatCoordinates;\n            }\n            else {\n                this.orientedFlatCoordinates_ = flatCoordinates.slice();\n                this.orientedFlatCoordinates_.length = orientLinearRings(this.orientedFlatCoordinates_, 0, this.ends_, this.stride);\n            }\n            this.orientedRevision_ = this.getRevision();\n        }\n        return this.orientedFlatCoordinates_;\n    };\n    /**\n     * @param {number} squaredTolerance Squared tolerance.\n     * @return {Polygon} Simplified Polygon.\n     * @protected\n     */\n    Polygon.prototype.getSimplifiedGeometryInternal = function (squaredTolerance) {\n        var simplifiedFlatCoordinates = [];\n        var simplifiedEnds = [];\n        simplifiedFlatCoordinates.length = quantizeArray(this.flatCoordinates, 0, this.ends_, this.stride, Math.sqrt(squaredTolerance), simplifiedFlatCoordinates, 0, simplifiedEnds);\n        return new Polygon(simplifiedFlatCoordinates, GeometryLayout.XY, simplifiedEnds);\n    };\n    /**\n     * Get the type of this geometry.\n     * @return {import(\"./GeometryType.js\").default} Geometry type.\n     * @api\n     */\n    Polygon.prototype.getType = function () {\n        return GeometryType.POLYGON;\n    };\n    /**\n     * Test if the geometry and the passed extent intersect.\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @return {boolean} `true` if the geometry and the extent intersect.\n     * @api\n     */\n    Polygon.prototype.intersectsExtent = function (extent) {\n        return intersectsLinearRingArray(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, extent);\n    };\n    /**\n     * Set the coordinates of the polygon.\n     * @param {!Array<Array<import(\"../coordinate.js\").Coordinate>>} coordinates Coordinates.\n     * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n     * @api\n     */\n    Polygon.prototype.setCoordinates = function (coordinates, opt_layout) {\n        this.setLayout(opt_layout, coordinates, 2);\n        if (!this.flatCoordinates) {\n            this.flatCoordinates = [];\n        }\n        var ends = deflateCoordinatesArray(this.flatCoordinates, 0, coordinates, this.stride, this.ends_);\n        this.flatCoordinates.length = ends.length === 0 ? 0 : ends[ends.length - 1];\n        this.changed();\n    };\n    return Polygon;\n}(SimpleGeometry));\nexport default Polygon;\n/**\n * Create an approximation of a circle on the surface of a sphere.\n * @param {import(\"../coordinate.js\").Coordinate} center Center (`[lon, lat]` in degrees).\n * @param {number} radius The great-circle distance from the center to\n *     the polygon vertices in meters.\n * @param {number} [opt_n] Optional number of vertices for the resulting\n *     polygon. Default is `32`.\n * @param {number} [opt_sphereRadius] Optional radius for the sphere (defaults to\n *     the Earth's mean radius using the WGS84 ellipsoid).\n * @return {Polygon} The \"circular\" polygon.\n * @api\n */\nexport function circular(center, radius, opt_n, opt_sphereRadius) {\n    var n = opt_n ? opt_n : 32;\n    /** @type {Array<number>} */\n    var flatCoordinates = [];\n    for (var i = 0; i < n; ++i) {\n        extend(flatCoordinates, sphereOffset(center, radius, (2 * Math.PI * i) / n, opt_sphereRadius));\n    }\n    flatCoordinates.push(flatCoordinates[0], flatCoordinates[1]);\n    return new Polygon(flatCoordinates, GeometryLayout.XY, [\n        flatCoordinates.length,\n    ]);\n}\n/**\n * Create a polygon from an extent. The layout used is `XY`.\n * @param {import(\"../extent.js\").Extent} extent The extent.\n * @return {Polygon} The polygon.\n * @api\n */\nexport function fromExtent(extent) {\n    var minX = extent[0];\n    var minY = extent[1];\n    var maxX = extent[2];\n    var maxY = extent[3];\n    var flatCoordinates = [\n        minX,\n        minY,\n        minX,\n        maxY,\n        maxX,\n        maxY,\n        maxX,\n        minY,\n        minX,\n        minY,\n    ];\n    return new Polygon(flatCoordinates, GeometryLayout.XY, [\n        flatCoordinates.length,\n    ]);\n}\n/**\n * Create a regular polygon from a circle.\n * @param {import(\"./Circle.js\").default} circle Circle geometry.\n * @param {number} [opt_sides] Number of sides of the polygon. Default is 32.\n * @param {number} [opt_angle] Start angle for the first vertex of the polygon in\n *     counter-clockwise radians. 0 means East. Default is 0.\n * @return {Polygon} Polygon geometry.\n * @api\n */\nexport function fromCircle(circle, opt_sides, opt_angle) {\n    var sides = opt_sides ? opt_sides : 32;\n    var stride = circle.getStride();\n    var layout = circle.getLayout();\n    var center = circle.getCenter();\n    var arrayLength = stride * (sides + 1);\n    var flatCoordinates = new Array(arrayLength);\n    for (var i = 0; i < arrayLength; i += stride) {\n        flatCoordinates[i] = 0;\n        flatCoordinates[i + 1] = 0;\n        for (var j = 2; j < stride; j++) {\n            flatCoordinates[i + j] = center[j];\n        }\n    }\n    var ends = [flatCoordinates.length];\n    var polygon = new Polygon(flatCoordinates, layout, ends);\n    makeRegular(polygon, center, circle.getRadius(), opt_angle);\n    return polygon;\n}\n/**\n * Modify the coordinates of a polygon to make it a regular polygon.\n * @param {Polygon} polygon Polygon geometry.\n * @param {import(\"../coordinate.js\").Coordinate} center Center of the regular polygon.\n * @param {number} radius Radius of the regular polygon.\n * @param {number} [opt_angle] Start angle for the first vertex of the polygon in\n *     counter-clockwise radians. 0 means East. Default is 0.\n */\nexport function makeRegular(polygon, center, radius, opt_angle) {\n    var flatCoordinates = polygon.getFlatCoordinates();\n    var stride = polygon.getStride();\n    var sides = flatCoordinates.length / stride - 1;\n    var startAngle = opt_angle ? opt_angle : 0;\n    for (var i = 0; i <= sides; ++i) {\n        var offset = i * stride;\n        var angle = startAngle + (modulo(i, sides) * 2 * Math.PI) / sides;\n        flatCoordinates[offset] = center[0] + radius * Math.cos(angle);\n        flatCoordinates[offset + 1] = center[1] + radius * Math.sin(angle);\n    }\n    polygon.changed();\n}\n//# sourceMappingURL=Polygon.js.map","/**\n * @module ol/featureloader\n */\nimport FormatType from './format/FormatType.js';\nimport { VOID } from './functions.js';\n/**\n *\n * @type {boolean}\n * @private\n */\nvar withCredentials = false;\n/**\n * {@link module:ol/source/Vector~VectorSource} sources use a function of this type to\n * load features.\n *\n * This function takes up to 5 arguments. These are an {@link module:ol/extent~Extent} representing\n * the area to be loaded, a `{number}` representing the resolution (map units per pixel), an\n * {@link module:ol/proj/Projection~Projection} for the projection, an optional success callback that should get\n * the loaded features passed as an argument and an optional failure callback with no arguments. If\n * the callbacks are not used, the corresponding vector source will not fire `'featuresloadend'` and\n * `'featuresloaderror'` events. `this` within the function is bound to the\n * {@link module:ol/source/Vector~VectorSource} it's called from.\n *\n * The function is responsible for loading the features and adding them to the\n * source.\n * @typedef {function(this:(import(\"./source/Vector\").default|import(\"./VectorTile.js\").default),\n *           import(\"./extent.js\").Extent,\n *           number,\n *           import(\"./proj/Projection.js\").default,\n *           function(Array<import(\"./Feature.js\").default>): void=,\n *           function(): void=): void} FeatureLoader\n * @api\n */\n/**\n * {@link module:ol/source/Vector~VectorSource} sources use a function of this type to\n * get the url to load features from.\n *\n * This function takes an {@link module:ol/extent~Extent} representing the area\n * to be loaded, a `{number}` representing the resolution (map units per pixel)\n * and an {@link module:ol/proj/Projection~Projection} for the projection  as\n * arguments and returns a `{string}` representing the URL.\n * @typedef {function(import(\"./extent.js\").Extent, number, import(\"./proj/Projection.js\").default): string} FeatureUrlFunction\n * @api\n */\n/**\n * @param {string|FeatureUrlFunction} url Feature URL service.\n * @param {import(\"./format/Feature.js\").default} format Feature format.\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\n * @param {function(Array<import(\"./Feature.js\").default>, import(\"./proj/Projection.js\").default): void} success Success\n *      Function called with the loaded features and optionally with the data projection.\n * @param {function(): void} failure Failure\n *      Function called when loading failed.\n */\nexport function loadFeaturesXhr(url, format, extent, resolution, projection, success, failure) {\n    var xhr = new XMLHttpRequest();\n    xhr.open('GET', typeof url === 'function' ? url(extent, resolution, projection) : url, true);\n    if (format.getType() == FormatType.ARRAY_BUFFER) {\n        xhr.responseType = 'arraybuffer';\n    }\n    xhr.withCredentials = withCredentials;\n    /**\n     * @param {Event} event Event.\n     * @private\n     */\n    xhr.onload = function (event) {\n        // status will be 0 for file:// urls\n        if (!xhr.status || (xhr.status >= 200 && xhr.status < 300)) {\n            var type = format.getType();\n            /** @type {Document|Node|Object|string|undefined} */\n            var source = void 0;\n            if (type == FormatType.JSON || type == FormatType.TEXT) {\n                source = xhr.responseText;\n            }\n            else if (type == FormatType.XML) {\n                source = xhr.responseXML;\n                if (!source) {\n                    source = new DOMParser().parseFromString(xhr.responseText, 'application/xml');\n                }\n            }\n            else if (type == FormatType.ARRAY_BUFFER) {\n                source = /** @type {ArrayBuffer} */ (xhr.response);\n            }\n            if (source) {\n                success(\n                /** @type {Array<import(\"./Feature.js\").default>} */\n                (format.readFeatures(source, {\n                    extent: extent,\n                    featureProjection: projection,\n                })), format.readProjection(source));\n            }\n            else {\n                failure();\n            }\n        }\n        else {\n            failure();\n        }\n    };\n    /**\n     * @private\n     */\n    xhr.onerror = failure;\n    xhr.send();\n}\n/**\n * Create an XHR feature loader for a `url` and `format`. The feature loader\n * loads features (with XHR), parses the features, and adds them to the\n * vector source.\n * @param {string|FeatureUrlFunction} url Feature URL service.\n * @param {import(\"./format/Feature.js\").default} format Feature format.\n * @return {FeatureLoader} The feature loader.\n * @api\n */\nexport function xhr(url, format) {\n    /**\n     * @param {import(\"./extent.js\").Extent} extent Extent.\n     * @param {number} resolution Resolution.\n     * @param {import(\"./proj/Projection.js\").default} projection Projection.\n     * @param {function(Array<import(\"./Feature.js\").default>): void} [success] Success\n     *      Function called when loading succeeded.\n     * @param {function(): void} [failure] Failure\n     *      Function called when loading failed.\n     * @this {import(\"./source/Vector\").default}\n     */\n    return function (extent, resolution, projection, success, failure) {\n        var source = /** @type {import(\"./source/Vector\").default} */ (this);\n        loadFeaturesXhr(url, format, extent, resolution, projection, \n        /**\n         * @param {Array<import(\"./Feature.js\").default>} features The loaded features.\n         * @param {import(\"./proj/Projection.js\").default} dataProjection Data\n         * projection.\n         */\n        function (features, dataProjection) {\n            source.addFeatures(features);\n            if (success !== undefined) {\n                success(features);\n            }\n        }, \n        /* FIXME handle error */ failure ? failure : VOID);\n    };\n}\n/**\n * Setter for the withCredentials configuration for the XHR.\n *\n * @param {boolean} xhrWithCredentials The value of withCredentials to set.\n * Compare https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/\n * @api\n */\nexport function setWithCredentials(xhrWithCredentials) {\n    withCredentials = xhrWithCredentials;\n}\n//# sourceMappingURL=featureloader.js.map","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/geom/LineString\n */\nimport GeometryLayout from './GeometryLayout.js';\nimport GeometryType from './GeometryType.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport { assignClosestPoint, maxSquaredDelta } from './flat/closest.js';\nimport { closestSquaredDistanceXY } from '../extent.js';\nimport { deflateCoordinates } from './flat/deflate.js';\nimport { douglasPeucker } from './flat/simplify.js';\nimport { extend } from '../array.js';\nimport { forEach as forEachSegment } from './flat/segments.js';\nimport { inflateCoordinates } from './flat/inflate.js';\nimport { interpolatePoint, lineStringCoordinateAtM } from './flat/interpolate.js';\nimport { intersectsLineString } from './flat/intersectsextent.js';\nimport { lineStringLength } from './flat/length.js';\n/**\n * @classdesc\n * Linestring geometry.\n *\n * @api\n */\nvar LineString = /** @class */ (function (_super) {\n    __extends(LineString, _super);\n    /**\n     * @param {Array<import(\"../coordinate.js\").Coordinate>|Array<number>} coordinates Coordinates.\n     *     For internal use, flat coordinates in combination with `opt_layout` are also accepted.\n     * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n     */\n    function LineString(coordinates, opt_layout) {\n        var _this = _super.call(this) || this;\n        /**\n         * @private\n         * @type {import(\"../coordinate.js\").Coordinate}\n         */\n        _this.flatMidpoint_ = null;\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.flatMidpointRevision_ = -1;\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.maxDelta_ = -1;\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.maxDeltaRevision_ = -1;\n        if (opt_layout !== undefined && !Array.isArray(coordinates[0])) {\n            _this.setFlatCoordinates(opt_layout, \n            /** @type {Array<number>} */ (coordinates));\n        }\n        else {\n            _this.setCoordinates(\n            /** @type {Array<import(\"../coordinate.js\").Coordinate>} */ (coordinates), opt_layout);\n        }\n        return _this;\n    }\n    /**\n     * Append the passed coordinate to the coordinates of the linestring.\n     * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n     * @api\n     */\n    LineString.prototype.appendCoordinate = function (coordinate) {\n        if (!this.flatCoordinates) {\n            this.flatCoordinates = coordinate.slice();\n        }\n        else {\n            extend(this.flatCoordinates, coordinate);\n        }\n        this.changed();\n    };\n    /**\n     * Make a complete copy of the geometry.\n     * @return {!LineString} Clone.\n     * @api\n     */\n    LineString.prototype.clone = function () {\n        var lineString = new LineString(this.flatCoordinates.slice(), this.layout);\n        lineString.applyProperties(this);\n        return lineString;\n    };\n    /**\n     * @param {number} x X.\n     * @param {number} y Y.\n     * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n     * @param {number} minSquaredDistance Minimum squared distance.\n     * @return {number} Minimum squared distance.\n     */\n    LineString.prototype.closestPointXY = function (x, y, closestPoint, minSquaredDistance) {\n        if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n            return minSquaredDistance;\n        }\n        if (this.maxDeltaRevision_ != this.getRevision()) {\n            this.maxDelta_ = Math.sqrt(maxSquaredDelta(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, 0));\n            this.maxDeltaRevision_ = this.getRevision();\n        }\n        return assignClosestPoint(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, this.maxDelta_, false, x, y, closestPoint, minSquaredDistance);\n    };\n    /**\n     * Iterate over each segment, calling the provided callback.\n     * If the callback returns a truthy value the function returns that\n     * value immediately. Otherwise the function returns `false`.\n     *\n     * @param {function(this: S, import(\"../coordinate.js\").Coordinate, import(\"../coordinate.js\").Coordinate): T} callback Function\n     *     called for each segment. The function will receive two arguments, the start and end coordinates of the segment.\n     * @return {T|boolean} Value.\n     * @template T,S\n     * @api\n     */\n    LineString.prototype.forEachSegment = function (callback) {\n        return forEachSegment(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, callback);\n    };\n    /**\n     * Returns the coordinate at `m` using linear interpolation, or `null` if no\n     * such coordinate exists.\n     *\n     * `opt_extrapolate` controls extrapolation beyond the range of Ms in the\n     * MultiLineString. If `opt_extrapolate` is `true` then Ms less than the first\n     * M will return the first coordinate and Ms greater than the last M will\n     * return the last coordinate.\n     *\n     * @param {number} m M.\n     * @param {boolean} [opt_extrapolate] Extrapolate. Default is `false`.\n     * @return {import(\"../coordinate.js\").Coordinate|null} Coordinate.\n     * @api\n     */\n    LineString.prototype.getCoordinateAtM = function (m, opt_extrapolate) {\n        if (this.layout != GeometryLayout.XYM &&\n            this.layout != GeometryLayout.XYZM) {\n            return null;\n        }\n        var extrapolate = opt_extrapolate !== undefined ? opt_extrapolate : false;\n        return lineStringCoordinateAtM(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, m, extrapolate);\n    };\n    /**\n     * Return the coordinates of the linestring.\n     * @return {Array<import(\"../coordinate.js\").Coordinate>} Coordinates.\n     * @api\n     */\n    LineString.prototype.getCoordinates = function () {\n        return inflateCoordinates(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);\n    };\n    /**\n     * Return the coordinate at the provided fraction along the linestring.\n     * The `fraction` is a number between 0 and 1, where 0 is the start of the\n     * linestring and 1 is the end.\n     * @param {number} fraction Fraction.\n     * @param {import(\"../coordinate.js\").Coordinate} [opt_dest] Optional coordinate whose values will\n     *     be modified. If not provided, a new coordinate will be returned.\n     * @return {import(\"../coordinate.js\").Coordinate} Coordinate of the interpolated point.\n     * @api\n     */\n    LineString.prototype.getCoordinateAt = function (fraction, opt_dest) {\n        return interpolatePoint(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, fraction, opt_dest, this.stride);\n    };\n    /**\n     * Return the length of the linestring on projected plane.\n     * @return {number} Length (on projected plane).\n     * @api\n     */\n    LineString.prototype.getLength = function () {\n        return lineStringLength(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);\n    };\n    /**\n     * @return {Array<number>} Flat midpoint.\n     */\n    LineString.prototype.getFlatMidpoint = function () {\n        if (this.flatMidpointRevision_ != this.getRevision()) {\n            this.flatMidpoint_ = this.getCoordinateAt(0.5, this.flatMidpoint_);\n            this.flatMidpointRevision_ = this.getRevision();\n        }\n        return this.flatMidpoint_;\n    };\n    /**\n     * @param {number} squaredTolerance Squared tolerance.\n     * @return {LineString} Simplified LineString.\n     * @protected\n     */\n    LineString.prototype.getSimplifiedGeometryInternal = function (squaredTolerance) {\n        var simplifiedFlatCoordinates = [];\n        simplifiedFlatCoordinates.length = douglasPeucker(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, squaredTolerance, simplifiedFlatCoordinates, 0);\n        return new LineString(simplifiedFlatCoordinates, GeometryLayout.XY);\n    };\n    /**\n     * Get the type of this geometry.\n     * @return {import(\"./GeometryType.js\").default} Geometry type.\n     * @api\n     */\n    LineString.prototype.getType = function () {\n        return GeometryType.LINE_STRING;\n    };\n    /**\n     * Test if the geometry and the passed extent intersect.\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @return {boolean} `true` if the geometry and the extent intersect.\n     * @api\n     */\n    LineString.prototype.intersectsExtent = function (extent) {\n        return intersectsLineString(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, extent);\n    };\n    /**\n     * Set the coordinates of the linestring.\n     * @param {!Array<import(\"../coordinate.js\").Coordinate>} coordinates Coordinates.\n     * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n     * @api\n     */\n    LineString.prototype.setCoordinates = function (coordinates, opt_layout) {\n        this.setLayout(opt_layout, coordinates, 1);\n        if (!this.flatCoordinates) {\n            this.flatCoordinates = [];\n        }\n        this.flatCoordinates.length = deflateCoordinates(this.flatCoordinates, 0, coordinates, this.stride);\n        this.changed();\n    };\n    return LineString;\n}(SimpleGeometry));\nexport default LineString;\n//# sourceMappingURL=LineString.js.map","/**\n * @module ol/geom/flat/straightchunk\n */\n/**\n * @param {number} maxAngle Maximum acceptable angle delta between segments.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @return {Array<number>} Start and end of the first suitable chunk of the\n * given `flatCoordinates`.\n */\nexport function matchingChunk(maxAngle, flatCoordinates, offset, end, stride) {\n    var chunkStart = offset;\n    var chunkEnd = offset;\n    var chunkM = 0;\n    var m = 0;\n    var start = offset;\n    var acos, i, m12, m23, x1, y1, x12, y12, x23, y23;\n    for (i = offset; i < end; i += stride) {\n        var x2 = flatCoordinates[i];\n        var y2 = flatCoordinates[i + 1];\n        if (x1 !== undefined) {\n            x23 = x2 - x1;\n            y23 = y2 - y1;\n            m23 = Math.sqrt(x23 * x23 + y23 * y23);\n            if (x12 !== undefined) {\n                m += m12;\n                acos = Math.acos((x12 * x23 + y12 * y23) / (m12 * m23));\n                if (acos > maxAngle) {\n                    if (m > chunkM) {\n                        chunkM = m;\n                        chunkStart = start;\n                        chunkEnd = i;\n                    }\n                    m = 0;\n                    start = i - stride;\n                }\n            }\n            m12 = m23;\n            x12 = x23;\n            y12 = y23;\n        }\n        x1 = x2;\n        y1 = y2;\n    }\n    m += m23;\n    return m > chunkM ? [start, i] : [chunkStart, chunkEnd];\n}\n//# sourceMappingURL=straightchunk.js.map","/**\n * @module ol/geom/flat/center\n */\nimport { createEmpty, createOrUpdateFromFlatCoordinates } from '../../extent.js';\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @return {Array<number>} Flat centers.\n */\nexport function linearRingss(flatCoordinates, offset, endss, stride) {\n    var flatCenters = [];\n    var extent = createEmpty();\n    for (var i = 0, ii = endss.length; i < ii; ++i) {\n        var ends = endss[i];\n        extent = createOrUpdateFromFlatCoordinates(flatCoordinates, offset, ends[0], stride);\n        flatCenters.push((extent[0] + extent[2]) / 2, (extent[1] + extent[3]) / 2);\n        offset = ends[ends.length - 1];\n    }\n    return flatCenters;\n}\n//# sourceMappingURL=center.js.map","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/geom/MultiPolygon\n */\nimport GeometryLayout from './GeometryLayout.js';\nimport GeometryType from './GeometryType.js';\nimport MultiPoint from './MultiPoint.js';\nimport Polygon from './Polygon.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport { assignClosestMultiArrayPoint, multiArrayMaxSquaredDelta, } from './flat/closest.js';\nimport { closestSquaredDistanceXY } from '../extent.js';\nimport { deflateMultiCoordinatesArray } from './flat/deflate.js';\nimport { extend } from '../array.js';\nimport { getInteriorPointsOfMultiArray } from './flat/interiorpoint.js';\nimport { inflateMultiCoordinatesArray } from './flat/inflate.js';\nimport { intersectsLinearRingMultiArray } from './flat/intersectsextent.js';\nimport { linearRingssAreOriented, orientLinearRingsArray, } from './flat/orient.js';\nimport { linearRingss as linearRingssArea } from './flat/area.js';\nimport { linearRingss as linearRingssCenter } from './flat/center.js';\nimport { linearRingssContainsXY } from './flat/contains.js';\nimport { quantizeMultiArray } from './flat/simplify.js';\n/**\n * @classdesc\n * Multi-polygon geometry.\n *\n * @api\n */\nvar MultiPolygon = /** @class */ (function (_super) {\n    __extends(MultiPolygon, _super);\n    /**\n     * @param {Array<Array<Array<import(\"../coordinate.js\").Coordinate>>|Polygon>|Array<number>} coordinates Coordinates.\n     *     For internal use, flat coordinates in combination with `opt_layout` and `opt_endss` are also accepted.\n     * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n     * @param {Array<Array<number>>} [opt_endss] Array of ends for internal use with flat coordinates.\n     */\n    function MultiPolygon(coordinates, opt_layout, opt_endss) {\n        var _this = _super.call(this) || this;\n        /**\n         * @type {Array<Array<number>>}\n         * @private\n         */\n        _this.endss_ = [];\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.flatInteriorPointsRevision_ = -1;\n        /**\n         * @private\n         * @type {Array<number>}\n         */\n        _this.flatInteriorPoints_ = null;\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.maxDelta_ = -1;\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.maxDeltaRevision_ = -1;\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.orientedRevision_ = -1;\n        /**\n         * @private\n         * @type {Array<number>}\n         */\n        _this.orientedFlatCoordinates_ = null;\n        if (!opt_endss && !Array.isArray(coordinates[0])) {\n            var layout = _this.getLayout();\n            var polygons = /** @type {Array<Polygon>} */ (coordinates);\n            var flatCoordinates = [];\n            var endss = [];\n            for (var i = 0, ii = polygons.length; i < ii; ++i) {\n                var polygon = polygons[i];\n                if (i === 0) {\n                    layout = polygon.getLayout();\n                }\n                var offset = flatCoordinates.length;\n                var ends = polygon.getEnds();\n                for (var j = 0, jj = ends.length; j < jj; ++j) {\n                    ends[j] += offset;\n                }\n                extend(flatCoordinates, polygon.getFlatCoordinates());\n                endss.push(ends);\n            }\n            opt_layout = layout;\n            coordinates = flatCoordinates;\n            opt_endss = endss;\n        }\n        if (opt_layout !== undefined && opt_endss) {\n            _this.setFlatCoordinates(opt_layout, \n            /** @type {Array<number>} */ (coordinates));\n            _this.endss_ = opt_endss;\n        }\n        else {\n            _this.setCoordinates(\n            /** @type {Array<Array<Array<import(\"../coordinate.js\").Coordinate>>>} */ (coordinates), opt_layout);\n        }\n        return _this;\n    }\n    /**\n     * Append the passed polygon to this multipolygon.\n     * @param {Polygon} polygon Polygon.\n     * @api\n     */\n    MultiPolygon.prototype.appendPolygon = function (polygon) {\n        /** @type {Array<number>} */\n        var ends;\n        if (!this.flatCoordinates) {\n            this.flatCoordinates = polygon.getFlatCoordinates().slice();\n            ends = polygon.getEnds().slice();\n            this.endss_.push();\n        }\n        else {\n            var offset = this.flatCoordinates.length;\n            extend(this.flatCoordinates, polygon.getFlatCoordinates());\n            ends = polygon.getEnds().slice();\n            for (var i = 0, ii = ends.length; i < ii; ++i) {\n                ends[i] += offset;\n            }\n        }\n        this.endss_.push(ends);\n        this.changed();\n    };\n    /**\n     * Make a complete copy of the geometry.\n     * @return {!MultiPolygon} Clone.\n     * @api\n     */\n    MultiPolygon.prototype.clone = function () {\n        var len = this.endss_.length;\n        var newEndss = new Array(len);\n        for (var i = 0; i < len; ++i) {\n            newEndss[i] = this.endss_[i].slice();\n        }\n        var multiPolygon = new MultiPolygon(this.flatCoordinates.slice(), this.layout, newEndss);\n        multiPolygon.applyProperties(this);\n        return multiPolygon;\n    };\n    /**\n     * @param {number} x X.\n     * @param {number} y Y.\n     * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n     * @param {number} minSquaredDistance Minimum squared distance.\n     * @return {number} Minimum squared distance.\n     */\n    MultiPolygon.prototype.closestPointXY = function (x, y, closestPoint, minSquaredDistance) {\n        if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n            return minSquaredDistance;\n        }\n        if (this.maxDeltaRevision_ != this.getRevision()) {\n            this.maxDelta_ = Math.sqrt(multiArrayMaxSquaredDelta(this.flatCoordinates, 0, this.endss_, this.stride, 0));\n            this.maxDeltaRevision_ = this.getRevision();\n        }\n        return assignClosestMultiArrayPoint(this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride, this.maxDelta_, true, x, y, closestPoint, minSquaredDistance);\n    };\n    /**\n     * @param {number} x X.\n     * @param {number} y Y.\n     * @return {boolean} Contains (x, y).\n     */\n    MultiPolygon.prototype.containsXY = function (x, y) {\n        return linearRingssContainsXY(this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride, x, y);\n    };\n    /**\n     * Return the area of the multipolygon on projected plane.\n     * @return {number} Area (on projected plane).\n     * @api\n     */\n    MultiPolygon.prototype.getArea = function () {\n        return linearRingssArea(this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride);\n    };\n    /**\n     * Get the coordinate array for this geometry.  This array has the structure\n     * of a GeoJSON coordinate array for multi-polygons.\n     *\n     * @param {boolean} [opt_right] Orient coordinates according to the right-hand\n     *     rule (counter-clockwise for exterior and clockwise for interior rings).\n     *     If `false`, coordinates will be oriented according to the left-hand rule\n     *     (clockwise for exterior and counter-clockwise for interior rings).\n     *     By default, coordinate orientation will depend on how the geometry was\n     *     constructed.\n     * @return {Array<Array<Array<import(\"../coordinate.js\").Coordinate>>>} Coordinates.\n     * @api\n     */\n    MultiPolygon.prototype.getCoordinates = function (opt_right) {\n        var flatCoordinates;\n        if (opt_right !== undefined) {\n            flatCoordinates = this.getOrientedFlatCoordinates().slice();\n            orientLinearRingsArray(flatCoordinates, 0, this.endss_, this.stride, opt_right);\n        }\n        else {\n            flatCoordinates = this.flatCoordinates;\n        }\n        return inflateMultiCoordinatesArray(flatCoordinates, 0, this.endss_, this.stride);\n    };\n    /**\n     * @return {Array<Array<number>>} Endss.\n     */\n    MultiPolygon.prototype.getEndss = function () {\n        return this.endss_;\n    };\n    /**\n     * @return {Array<number>} Flat interior points.\n     */\n    MultiPolygon.prototype.getFlatInteriorPoints = function () {\n        if (this.flatInteriorPointsRevision_ != this.getRevision()) {\n            var flatCenters = linearRingssCenter(this.flatCoordinates, 0, this.endss_, this.stride);\n            this.flatInteriorPoints_ = getInteriorPointsOfMultiArray(this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride, flatCenters);\n            this.flatInteriorPointsRevision_ = this.getRevision();\n        }\n        return this.flatInteriorPoints_;\n    };\n    /**\n     * Return the interior points as {@link module:ol/geom/MultiPoint~MultiPoint multipoint}.\n     * @return {MultiPoint} Interior points as XYM coordinates, where M is\n     * the length of the horizontal intersection that the point belongs to.\n     * @api\n     */\n    MultiPolygon.prototype.getInteriorPoints = function () {\n        return new MultiPoint(this.getFlatInteriorPoints().slice(), GeometryLayout.XYM);\n    };\n    /**\n     * @return {Array<number>} Oriented flat coordinates.\n     */\n    MultiPolygon.prototype.getOrientedFlatCoordinates = function () {\n        if (this.orientedRevision_ != this.getRevision()) {\n            var flatCoordinates = this.flatCoordinates;\n            if (linearRingssAreOriented(flatCoordinates, 0, this.endss_, this.stride)) {\n                this.orientedFlatCoordinates_ = flatCoordinates;\n            }\n            else {\n                this.orientedFlatCoordinates_ = flatCoordinates.slice();\n                this.orientedFlatCoordinates_.length = orientLinearRingsArray(this.orientedFlatCoordinates_, 0, this.endss_, this.stride);\n            }\n            this.orientedRevision_ = this.getRevision();\n        }\n        return this.orientedFlatCoordinates_;\n    };\n    /**\n     * @param {number} squaredTolerance Squared tolerance.\n     * @return {MultiPolygon} Simplified MultiPolygon.\n     * @protected\n     */\n    MultiPolygon.prototype.getSimplifiedGeometryInternal = function (squaredTolerance) {\n        var simplifiedFlatCoordinates = [];\n        var simplifiedEndss = [];\n        simplifiedFlatCoordinates.length = quantizeMultiArray(this.flatCoordinates, 0, this.endss_, this.stride, Math.sqrt(squaredTolerance), simplifiedFlatCoordinates, 0, simplifiedEndss);\n        return new MultiPolygon(simplifiedFlatCoordinates, GeometryLayout.XY, simplifiedEndss);\n    };\n    /**\n     * Return the polygon at the specified index.\n     * @param {number} index Index.\n     * @return {Polygon} Polygon.\n     * @api\n     */\n    MultiPolygon.prototype.getPolygon = function (index) {\n        if (index < 0 || this.endss_.length <= index) {\n            return null;\n        }\n        var offset;\n        if (index === 0) {\n            offset = 0;\n        }\n        else {\n            var prevEnds = this.endss_[index - 1];\n            offset = prevEnds[prevEnds.length - 1];\n        }\n        var ends = this.endss_[index].slice();\n        var end = ends[ends.length - 1];\n        if (offset !== 0) {\n            for (var i = 0, ii = ends.length; i < ii; ++i) {\n                ends[i] -= offset;\n            }\n        }\n        return new Polygon(this.flatCoordinates.slice(offset, end), this.layout, ends);\n    };\n    /**\n     * Return the polygons of this multipolygon.\n     * @return {Array<Polygon>} Polygons.\n     * @api\n     */\n    MultiPolygon.prototype.getPolygons = function () {\n        var layout = this.layout;\n        var flatCoordinates = this.flatCoordinates;\n        var endss = this.endss_;\n        var polygons = [];\n        var offset = 0;\n        for (var i = 0, ii = endss.length; i < ii; ++i) {\n            var ends = endss[i].slice();\n            var end = ends[ends.length - 1];\n            if (offset !== 0) {\n                for (var j = 0, jj = ends.length; j < jj; ++j) {\n                    ends[j] -= offset;\n                }\n            }\n            var polygon = new Polygon(flatCoordinates.slice(offset, end), layout, ends);\n            polygons.push(polygon);\n            offset = end;\n        }\n        return polygons;\n    };\n    /**\n     * Get the type of this geometry.\n     * @return {import(\"./GeometryType.js\").default} Geometry type.\n     * @api\n     */\n    MultiPolygon.prototype.getType = function () {\n        return GeometryType.MULTI_POLYGON;\n    };\n    /**\n     * Test if the geometry and the passed extent intersect.\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @return {boolean} `true` if the geometry and the extent intersect.\n     * @api\n     */\n    MultiPolygon.prototype.intersectsExtent = function (extent) {\n        return intersectsLinearRingMultiArray(this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride, extent);\n    };\n    /**\n     * Set the coordinates of the multipolygon.\n     * @param {!Array<Array<Array<import(\"../coordinate.js\").Coordinate>>>} coordinates Coordinates.\n     * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n     * @api\n     */\n    MultiPolygon.prototype.setCoordinates = function (coordinates, opt_layout) {\n        this.setLayout(opt_layout, coordinates, 3);\n        if (!this.flatCoordinates) {\n            this.flatCoordinates = [];\n        }\n        var endss = deflateMultiCoordinatesArray(this.flatCoordinates, 0, coordinates, this.stride, this.endss_);\n        if (endss.length === 0) {\n            this.flatCoordinates.length = 0;\n        }\n        else {\n            var lastEnds = endss[endss.length - 1];\n            this.flatCoordinates.length =\n                lastEnds.length === 0 ? 0 : lastEnds[lastEnds.length - 1];\n        }\n        this.changed();\n    };\n    return MultiPolygon;\n}(SimpleGeometry));\nexport default MultiPolygon;\n//# sourceMappingURL=MultiPolygon.js.map","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/geom/Geometry\n */\nimport BaseObject from '../Object.js';\nimport Units from '../proj/Units.js';\nimport { abstract } from '../util.js';\nimport { compose as composeTransform, create as createTransform, } from '../transform.js';\nimport { createEmpty, createOrUpdateEmpty, getHeight, returnOrUpdate, } from '../extent.js';\nimport { get as getProjection, getTransform } from '../proj.js';\nimport { memoizeOne } from '../functions.js';\nimport { transform2D } from './flat/transform.js';\n/**\n * @type {import(\"../transform.js\").Transform}\n */\nvar tmpTransform = createTransform();\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for vector geometries.\n *\n * To get notified of changes to the geometry, register a listener for the\n * generic `change` event on your geometry instance.\n *\n * @abstract\n * @api\n */\nvar Geometry = /** @class */ (function (_super) {\n    __extends(Geometry, _super);\n    function Geometry() {\n        var _this = _super.call(this) || this;\n        /**\n         * @private\n         * @type {import(\"../extent.js\").Extent}\n         */\n        _this.extent_ = createEmpty();\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.extentRevision_ = -1;\n        /**\n         * @protected\n         * @type {number}\n         */\n        _this.simplifiedGeometryMaxMinSquaredTolerance = 0;\n        /**\n         * @protected\n         * @type {number}\n         */\n        _this.simplifiedGeometryRevision = 0;\n        /**\n         * Get a transformed and simplified version of the geometry.\n         * @abstract\n         * @param {number} revision The geometry revision.\n         * @param {number} squaredTolerance Squared tolerance.\n         * @param {import(\"../proj.js\").TransformFunction} [opt_transform] Optional transform function.\n         * @return {Geometry} Simplified geometry.\n         */\n        _this.simplifyTransformedInternal = memoizeOne(function (revision, squaredTolerance, opt_transform) {\n            if (!opt_transform) {\n                return this.getSimplifiedGeometry(squaredTolerance);\n            }\n            var clone = this.clone();\n            clone.applyTransform(opt_transform);\n            return clone.getSimplifiedGeometry(squaredTolerance);\n        });\n        return _this;\n    }\n    /**\n     * Get a transformed and simplified version of the geometry.\n     * @abstract\n     * @param {number} squaredTolerance Squared tolerance.\n     * @param {import(\"../proj.js\").TransformFunction} [opt_transform] Optional transform function.\n     * @return {Geometry} Simplified geometry.\n     */\n    Geometry.prototype.simplifyTransformed = function (squaredTolerance, opt_transform) {\n        return this.simplifyTransformedInternal(this.getRevision(), squaredTolerance, opt_transform);\n    };\n    /**\n     * Make a complete copy of the geometry.\n     * @abstract\n     * @return {!Geometry} Clone.\n     */\n    Geometry.prototype.clone = function () {\n        return abstract();\n    };\n    /**\n     * @abstract\n     * @param {number} x X.\n     * @param {number} y Y.\n     * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n     * @param {number} minSquaredDistance Minimum squared distance.\n     * @return {number} Minimum squared distance.\n     */\n    Geometry.prototype.closestPointXY = function (x, y, closestPoint, minSquaredDistance) {\n        return abstract();\n    };\n    /**\n     * @param {number} x X.\n     * @param {number} y Y.\n     * @return {boolean} Contains (x, y).\n     */\n    Geometry.prototype.containsXY = function (x, y) {\n        var coord = this.getClosestPoint([x, y]);\n        return coord[0] === x && coord[1] === y;\n    };\n    /**\n     * Return the closest point of the geometry to the passed point as\n     * {@link module:ol/coordinate~Coordinate coordinate}.\n     * @param {import(\"../coordinate.js\").Coordinate} point Point.\n     * @param {import(\"../coordinate.js\").Coordinate} [opt_closestPoint] Closest point.\n     * @return {import(\"../coordinate.js\").Coordinate} Closest point.\n     * @api\n     */\n    Geometry.prototype.getClosestPoint = function (point, opt_closestPoint) {\n        var closestPoint = opt_closestPoint ? opt_closestPoint : [NaN, NaN];\n        this.closestPointXY(point[0], point[1], closestPoint, Infinity);\n        return closestPoint;\n    };\n    /**\n     * Returns true if this geometry includes the specified coordinate. If the\n     * coordinate is on the boundary of the geometry, returns false.\n     * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n     * @return {boolean} Contains coordinate.\n     * @api\n     */\n    Geometry.prototype.intersectsCoordinate = function (coordinate) {\n        return this.containsXY(coordinate[0], coordinate[1]);\n    };\n    /**\n     * @abstract\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @protected\n     * @return {import(\"../extent.js\").Extent} extent Extent.\n     */\n    Geometry.prototype.computeExtent = function (extent) {\n        return abstract();\n    };\n    /**\n     * Get the extent of the geometry.\n     * @param {import(\"../extent.js\").Extent} [opt_extent] Extent.\n     * @return {import(\"../extent.js\").Extent} extent Extent.\n     * @api\n     */\n    Geometry.prototype.getExtent = function (opt_extent) {\n        if (this.extentRevision_ != this.getRevision()) {\n            var extent = this.computeExtent(this.extent_);\n            if (isNaN(extent[0]) || isNaN(extent[1])) {\n                createOrUpdateEmpty(extent);\n            }\n            this.extentRevision_ = this.getRevision();\n        }\n        return returnOrUpdate(this.extent_, opt_extent);\n    };\n    /**\n     * Rotate the geometry around a given coordinate. This modifies the geometry\n     * coordinates in place.\n     * @abstract\n     * @param {number} angle Rotation angle in radians.\n     * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\n     * @api\n     */\n    Geometry.prototype.rotate = function (angle, anchor) {\n        abstract();\n    };\n    /**\n     * Scale the geometry (with an optional origin).  This modifies the geometry\n     * coordinates in place.\n     * @abstract\n     * @param {number} sx The scaling factor in the x-direction.\n     * @param {number} [opt_sy] The scaling factor in the y-direction (defaults to sx).\n     * @param {import(\"../coordinate.js\").Coordinate} [opt_anchor] The scale origin (defaults to the center\n     *     of the geometry extent).\n     * @api\n     */\n    Geometry.prototype.scale = function (sx, opt_sy, opt_anchor) {\n        abstract();\n    };\n    /**\n     * Create a simplified version of this geometry.  For linestrings, this uses\n     * the [Douglas Peucker](https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm)\n     * algorithm.  For polygons, a quantization-based\n     * simplification is used to preserve topology.\n     * @param {number} tolerance The tolerance distance for simplification.\n     * @return {Geometry} A new, simplified version of the original geometry.\n     * @api\n     */\n    Geometry.prototype.simplify = function (tolerance) {\n        return this.getSimplifiedGeometry(tolerance * tolerance);\n    };\n    /**\n     * Create a simplified version of this geometry using the Douglas Peucker\n     * algorithm.\n     * See https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm.\n     * @abstract\n     * @param {number} squaredTolerance Squared tolerance.\n     * @return {Geometry} Simplified geometry.\n     */\n    Geometry.prototype.getSimplifiedGeometry = function (squaredTolerance) {\n        return abstract();\n    };\n    /**\n     * Get the type of this geometry.\n     * @abstract\n     * @return {import(\"./GeometryType.js\").default} Geometry type.\n     */\n    Geometry.prototype.getType = function () {\n        return abstract();\n    };\n    /**\n     * Apply a transform function to the coordinates of the geometry.\n     * The geometry is modified in place.\n     * If you do not want the geometry modified in place, first `clone()` it and\n     * then use this function on the clone.\n     * @abstract\n     * @param {import(\"../proj.js\").TransformFunction} transformFn Transform function.\n     * Called with a flat array of geometry coordinates.\n     */\n    Geometry.prototype.applyTransform = function (transformFn) {\n        abstract();\n    };\n    /**\n     * Test if the geometry and the passed extent intersect.\n     * @abstract\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @return {boolean} `true` if the geometry and the extent intersect.\n     */\n    Geometry.prototype.intersectsExtent = function (extent) {\n        return abstract();\n    };\n    /**\n     * Translate the geometry.  This modifies the geometry coordinates in place.  If\n     * instead you want a new geometry, first `clone()` this geometry.\n     * @abstract\n     * @param {number} deltaX Delta X.\n     * @param {number} deltaY Delta Y.\n     * @api\n     */\n    Geometry.prototype.translate = function (deltaX, deltaY) {\n        abstract();\n    };\n    /**\n     * Transform each coordinate of the geometry from one coordinate reference\n     * system to another. The geometry is modified in place.\n     * For example, a line will be transformed to a line and a circle to a circle.\n     * If you do not want the geometry modified in place, first `clone()` it and\n     * then use this function on the clone.\n     *\n     * @param {import(\"../proj.js\").ProjectionLike} source The current projection.  Can be a\n     *     string identifier or a {@link module:ol/proj/Projection~Projection} object.\n     * @param {import(\"../proj.js\").ProjectionLike} destination The desired projection.  Can be a\n     *     string identifier or a {@link module:ol/proj/Projection~Projection} object.\n     * @return {Geometry} This geometry.  Note that original geometry is\n     *     modified in place.\n     * @api\n     */\n    Geometry.prototype.transform = function (source, destination) {\n        /** @type {import(\"../proj/Projection.js\").default} */\n        var sourceProj = getProjection(source);\n        var transformFn = sourceProj.getUnits() == Units.TILE_PIXELS\n            ? function (inCoordinates, outCoordinates, stride) {\n                var pixelExtent = sourceProj.getExtent();\n                var projectedExtent = sourceProj.getWorldExtent();\n                var scale = getHeight(projectedExtent) / getHeight(pixelExtent);\n                composeTransform(tmpTransform, projectedExtent[0], projectedExtent[3], scale, -scale, 0, 0, 0);\n                transform2D(inCoordinates, 0, inCoordinates.length, stride, tmpTransform, outCoordinates);\n                return getTransform(sourceProj, destination)(inCoordinates, outCoordinates, stride);\n            }\n            : getTransform(sourceProj, destination);\n        this.applyTransform(transformFn);\n        return this;\n    };\n    return Geometry;\n}(BaseObject));\nexport default Geometry;\n//# sourceMappingURL=Geometry.js.map","/**\n * @module ol/geom/flat/closest\n */\nimport { lerp, squaredDistance as squaredDx } from '../../math.js';\n/**\n * Returns the point on the 2D line segment flatCoordinates[offset1] to\n * flatCoordinates[offset2] that is closest to the point (x, y).  Extra\n * dimensions are linearly interpolated.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset1 Offset 1.\n * @param {number} offset2 Offset 2.\n * @param {number} stride Stride.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {Array<number>} closestPoint Closest point.\n */\nfunction assignClosest(flatCoordinates, offset1, offset2, stride, x, y, closestPoint) {\n    var x1 = flatCoordinates[offset1];\n    var y1 = flatCoordinates[offset1 + 1];\n    var dx = flatCoordinates[offset2] - x1;\n    var dy = flatCoordinates[offset2 + 1] - y1;\n    var offset;\n    if (dx === 0 && dy === 0) {\n        offset = offset1;\n    }\n    else {\n        var t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);\n        if (t > 1) {\n            offset = offset2;\n        }\n        else if (t > 0) {\n            for (var i = 0; i < stride; ++i) {\n                closestPoint[i] = lerp(flatCoordinates[offset1 + i], flatCoordinates[offset2 + i], t);\n            }\n            closestPoint.length = stride;\n            return;\n        }\n        else {\n            offset = offset1;\n        }\n    }\n    for (var i = 0; i < stride; ++i) {\n        closestPoint[i] = flatCoordinates[offset + i];\n    }\n    closestPoint.length = stride;\n}\n/**\n * Return the squared of the largest distance between any pair of consecutive\n * coordinates.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} max Max squared delta.\n * @return {number} Max squared delta.\n */\nexport function maxSquaredDelta(flatCoordinates, offset, end, stride, max) {\n    var x1 = flatCoordinates[offset];\n    var y1 = flatCoordinates[offset + 1];\n    for (offset += stride; offset < end; offset += stride) {\n        var x2 = flatCoordinates[offset];\n        var y2 = flatCoordinates[offset + 1];\n        var squaredDelta = squaredDx(x1, y1, x2, y2);\n        if (squaredDelta > max) {\n            max = squaredDelta;\n        }\n        x1 = x2;\n        y1 = y2;\n    }\n    return max;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {number} max Max squared delta.\n * @return {number} Max squared delta.\n */\nexport function arrayMaxSquaredDelta(flatCoordinates, offset, ends, stride, max) {\n    for (var i = 0, ii = ends.length; i < ii; ++i) {\n        var end = ends[i];\n        max = maxSquaredDelta(flatCoordinates, offset, end, stride, max);\n        offset = end;\n    }\n    return max;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {number} max Max squared delta.\n * @return {number} Max squared delta.\n */\nexport function multiArrayMaxSquaredDelta(flatCoordinates, offset, endss, stride, max) {\n    for (var i = 0, ii = endss.length; i < ii; ++i) {\n        var ends = endss[i];\n        max = arrayMaxSquaredDelta(flatCoordinates, offset, ends, stride, max);\n        offset = ends[ends.length - 1];\n    }\n    return max;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} maxDelta Max delta.\n * @param {boolean} isRing Is ring.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {Array<number>} closestPoint Closest point.\n * @param {number} minSquaredDistance Minimum squared distance.\n * @param {Array<number>} [opt_tmpPoint] Temporary point object.\n * @return {number} Minimum squared distance.\n */\nexport function assignClosestPoint(flatCoordinates, offset, end, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance, opt_tmpPoint) {\n    if (offset == end) {\n        return minSquaredDistance;\n    }\n    var i, squaredDistance;\n    if (maxDelta === 0) {\n        // All points are identical, so just test the first point.\n        squaredDistance = squaredDx(x, y, flatCoordinates[offset], flatCoordinates[offset + 1]);\n        if (squaredDistance < minSquaredDistance) {\n            for (i = 0; i < stride; ++i) {\n                closestPoint[i] = flatCoordinates[offset + i];\n            }\n            closestPoint.length = stride;\n            return squaredDistance;\n        }\n        else {\n            return minSquaredDistance;\n        }\n    }\n    var tmpPoint = opt_tmpPoint ? opt_tmpPoint : [NaN, NaN];\n    var index = offset + stride;\n    while (index < end) {\n        assignClosest(flatCoordinates, index - stride, index, stride, x, y, tmpPoint);\n        squaredDistance = squaredDx(x, y, tmpPoint[0], tmpPoint[1]);\n        if (squaredDistance < minSquaredDistance) {\n            minSquaredDistance = squaredDistance;\n            for (i = 0; i < stride; ++i) {\n                closestPoint[i] = tmpPoint[i];\n            }\n            closestPoint.length = stride;\n            index += stride;\n        }\n        else {\n            // Skip ahead multiple points, because we know that all the skipped\n            // points cannot be any closer than the closest point we have found so\n            // far.  We know this because we know how close the current point is, how\n            // close the closest point we have found so far is, and the maximum\n            // distance between consecutive points.  For example, if we're currently\n            // at distance 10, the best we've found so far is 3, and that the maximum\n            // distance between consecutive points is 2, then we'll need to skip at\n            // least (10 - 3) / 2 == 3 (rounded down) points to have any chance of\n            // finding a closer point.  We use Math.max(..., 1) to ensure that we\n            // always advance at least one point, to avoid an infinite loop.\n            index +=\n                stride *\n                    Math.max(((Math.sqrt(squaredDistance) - Math.sqrt(minSquaredDistance)) /\n                        maxDelta) |\n                        0, 1);\n        }\n    }\n    if (isRing) {\n        // Check the closing segment.\n        assignClosest(flatCoordinates, end - stride, offset, stride, x, y, tmpPoint);\n        squaredDistance = squaredDx(x, y, tmpPoint[0], tmpPoint[1]);\n        if (squaredDistance < minSquaredDistance) {\n            minSquaredDistance = squaredDistance;\n            for (i = 0; i < stride; ++i) {\n                closestPoint[i] = tmpPoint[i];\n            }\n            closestPoint.length = stride;\n        }\n    }\n    return minSquaredDistance;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {number} maxDelta Max delta.\n * @param {boolean} isRing Is ring.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {Array<number>} closestPoint Closest point.\n * @param {number} minSquaredDistance Minimum squared distance.\n * @param {Array<number>} [opt_tmpPoint] Temporary point object.\n * @return {number} Minimum squared distance.\n */\nexport function assignClosestArrayPoint(flatCoordinates, offset, ends, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance, opt_tmpPoint) {\n    var tmpPoint = opt_tmpPoint ? opt_tmpPoint : [NaN, NaN];\n    for (var i = 0, ii = ends.length; i < ii; ++i) {\n        var end = ends[i];\n        minSquaredDistance = assignClosestPoint(flatCoordinates, offset, end, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance, tmpPoint);\n        offset = end;\n    }\n    return minSquaredDistance;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {number} maxDelta Max delta.\n * @param {boolean} isRing Is ring.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {Array<number>} closestPoint Closest point.\n * @param {number} minSquaredDistance Minimum squared distance.\n * @param {Array<number>} [opt_tmpPoint] Temporary point object.\n * @return {number} Minimum squared distance.\n */\nexport function assignClosestMultiArrayPoint(flatCoordinates, offset, endss, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance, opt_tmpPoint) {\n    var tmpPoint = opt_tmpPoint ? opt_tmpPoint : [NaN, NaN];\n    for (var i = 0, ii = endss.length; i < ii; ++i) {\n        var ends = endss[i];\n        minSquaredDistance = assignClosestArrayPoint(flatCoordinates, offset, ends, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance, tmpPoint);\n        offset = ends[ends.length - 1];\n    }\n    return minSquaredDistance;\n}\n//# sourceMappingURL=closest.js.map","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/geom/MultiPoint\n */\nimport GeometryType from './GeometryType.js';\nimport Point from './Point.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport { closestSquaredDistanceXY, containsXY } from '../extent.js';\nimport { deflateCoordinates } from './flat/deflate.js';\nimport { extend } from '../array.js';\nimport { inflateCoordinates } from './flat/inflate.js';\nimport { squaredDistance as squaredDx } from '../math.js';\n/**\n * @classdesc\n * Multi-point geometry.\n *\n * @api\n */\nvar MultiPoint = /** @class */ (function (_super) {\n    __extends(MultiPoint, _super);\n    /**\n     * @param {Array<import(\"../coordinate.js\").Coordinate>|Array<number>} coordinates Coordinates.\n     *     For internal use, flat coordinates in combination with `opt_layout` are also accepted.\n     * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n     */\n    function MultiPoint(coordinates, opt_layout) {\n        var _this = _super.call(this) || this;\n        if (opt_layout && !Array.isArray(coordinates[0])) {\n            _this.setFlatCoordinates(opt_layout, \n            /** @type {Array<number>} */ (coordinates));\n        }\n        else {\n            _this.setCoordinates(\n            /** @type {Array<import(\"../coordinate.js\").Coordinate>} */ (coordinates), opt_layout);\n        }\n        return _this;\n    }\n    /**\n     * Append the passed point to this multipoint.\n     * @param {Point} point Point.\n     * @api\n     */\n    MultiPoint.prototype.appendPoint = function (point) {\n        if (!this.flatCoordinates) {\n            this.flatCoordinates = point.getFlatCoordinates().slice();\n        }\n        else {\n            extend(this.flatCoordinates, point.getFlatCoordinates());\n        }\n        this.changed();\n    };\n    /**\n     * Make a complete copy of the geometry.\n     * @return {!MultiPoint} Clone.\n     * @api\n     */\n    MultiPoint.prototype.clone = function () {\n        var multiPoint = new MultiPoint(this.flatCoordinates.slice(), this.layout);\n        multiPoint.applyProperties(this);\n        return multiPoint;\n    };\n    /**\n     * @param {number} x X.\n     * @param {number} y Y.\n     * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n     * @param {number} minSquaredDistance Minimum squared distance.\n     * @return {number} Minimum squared distance.\n     */\n    MultiPoint.prototype.closestPointXY = function (x, y, closestPoint, minSquaredDistance) {\n        if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n            return minSquaredDistance;\n        }\n        var flatCoordinates = this.flatCoordinates;\n        var stride = this.stride;\n        for (var i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n            var squaredDistance = squaredDx(x, y, flatCoordinates[i], flatCoordinates[i + 1]);\n            if (squaredDistance < minSquaredDistance) {\n                minSquaredDistance = squaredDistance;\n                for (var j = 0; j < stride; ++j) {\n                    closestPoint[j] = flatCoordinates[i + j];\n                }\n                closestPoint.length = stride;\n            }\n        }\n        return minSquaredDistance;\n    };\n    /**\n     * Return the coordinates of the multipoint.\n     * @return {Array<import(\"../coordinate.js\").Coordinate>} Coordinates.\n     * @api\n     */\n    MultiPoint.prototype.getCoordinates = function () {\n        return inflateCoordinates(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);\n    };\n    /**\n     * Return the point at the specified index.\n     * @param {number} index Index.\n     * @return {Point} Point.\n     * @api\n     */\n    MultiPoint.prototype.getPoint = function (index) {\n        var n = !this.flatCoordinates\n            ? 0\n            : this.flatCoordinates.length / this.stride;\n        if (index < 0 || n <= index) {\n            return null;\n        }\n        return new Point(this.flatCoordinates.slice(index * this.stride, (index + 1) * this.stride), this.layout);\n    };\n    /**\n     * Return the points of this multipoint.\n     * @return {Array<Point>} Points.\n     * @api\n     */\n    MultiPoint.prototype.getPoints = function () {\n        var flatCoordinates = this.flatCoordinates;\n        var layout = this.layout;\n        var stride = this.stride;\n        /** @type {Array<Point>} */\n        var points = [];\n        for (var i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n            var point = new Point(flatCoordinates.slice(i, i + stride), layout);\n            points.push(point);\n        }\n        return points;\n    };\n    /**\n     * Get the type of this geometry.\n     * @return {import(\"./GeometryType.js\").default} Geometry type.\n     * @api\n     */\n    MultiPoint.prototype.getType = function () {\n        return GeometryType.MULTI_POINT;\n    };\n    /**\n     * Test if the geometry and the passed extent intersect.\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @return {boolean} `true` if the geometry and the extent intersect.\n     * @api\n     */\n    MultiPoint.prototype.intersectsExtent = function (extent) {\n        var flatCoordinates = this.flatCoordinates;\n        var stride = this.stride;\n        for (var i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n            var x = flatCoordinates[i];\n            var y = flatCoordinates[i + 1];\n            if (containsXY(extent, x, y)) {\n                return true;\n            }\n        }\n        return false;\n    };\n    /**\n     * Set the coordinates of the multipoint.\n     * @param {!Array<import(\"../coordinate.js\").Coordinate>} coordinates Coordinates.\n     * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n     * @api\n     */\n    MultiPoint.prototype.setCoordinates = function (coordinates, opt_layout) {\n        this.setLayout(opt_layout, coordinates, 1);\n        if (!this.flatCoordinates) {\n            this.flatCoordinates = [];\n        }\n        this.flatCoordinates.length = deflateCoordinates(this.flatCoordinates, 0, coordinates, this.stride);\n        this.changed();\n    };\n    return MultiPoint;\n}(SimpleGeometry));\nexport default MultiPoint;\n//# sourceMappingURL=MultiPoint.js.map","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/geom/SimpleGeometry\n */\nimport Geometry from './Geometry.js';\nimport GeometryLayout from './GeometryLayout.js';\nimport { abstract } from '../util.js';\nimport { createOrUpdateFromFlatCoordinates, getCenter } from '../extent.js';\nimport { rotate, scale, transform2D, translate } from './flat/transform.js';\n/**\n * @classdesc\n * Abstract base class; only used for creating subclasses; do not instantiate\n * in apps, as cannot be rendered.\n *\n * @abstract\n * @api\n */\nvar SimpleGeometry = /** @class */ (function (_super) {\n    __extends(SimpleGeometry, _super);\n    function SimpleGeometry() {\n        var _this = _super.call(this) || this;\n        /**\n         * @protected\n         * @type {import(\"./GeometryLayout.js\").default}\n         */\n        _this.layout = GeometryLayout.XY;\n        /**\n         * @protected\n         * @type {number}\n         */\n        _this.stride = 2;\n        /**\n         * @protected\n         * @type {Array<number>}\n         */\n        _this.flatCoordinates = null;\n        return _this;\n    }\n    /**\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @protected\n     * @return {import(\"../extent.js\").Extent} extent Extent.\n     */\n    SimpleGeometry.prototype.computeExtent = function (extent) {\n        return createOrUpdateFromFlatCoordinates(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, extent);\n    };\n    /**\n     * @abstract\n     * @return {Array<*> | null} Coordinates.\n     */\n    SimpleGeometry.prototype.getCoordinates = function () {\n        return abstract();\n    };\n    /**\n     * Return the first coordinate of the geometry.\n     * @return {import(\"../coordinate.js\").Coordinate} First coordinate.\n     * @api\n     */\n    SimpleGeometry.prototype.getFirstCoordinate = function () {\n        return this.flatCoordinates.slice(0, this.stride);\n    };\n    /**\n     * @return {Array<number>} Flat coordinates.\n     */\n    SimpleGeometry.prototype.getFlatCoordinates = function () {\n        return this.flatCoordinates;\n    };\n    /**\n     * Return the last coordinate of the geometry.\n     * @return {import(\"../coordinate.js\").Coordinate} Last point.\n     * @api\n     */\n    SimpleGeometry.prototype.getLastCoordinate = function () {\n        return this.flatCoordinates.slice(this.flatCoordinates.length - this.stride);\n    };\n    /**\n     * Return the {@link module:ol/geom/GeometryLayout layout} of the geometry.\n     * @return {import(\"./GeometryLayout.js\").default} Layout.\n     * @api\n     */\n    SimpleGeometry.prototype.getLayout = function () {\n        return this.layout;\n    };\n    /**\n     * Create a simplified version of this geometry using the Douglas Peucker algorithm.\n     * @param {number} squaredTolerance Squared tolerance.\n     * @return {SimpleGeometry} Simplified geometry.\n     */\n    SimpleGeometry.prototype.getSimplifiedGeometry = function (squaredTolerance) {\n        if (this.simplifiedGeometryRevision !== this.getRevision()) {\n            this.simplifiedGeometryMaxMinSquaredTolerance = 0;\n            this.simplifiedGeometryRevision = this.getRevision();\n        }\n        // If squaredTolerance is negative or if we know that simplification will not\n        // have any effect then just return this.\n        if (squaredTolerance < 0 ||\n            (this.simplifiedGeometryMaxMinSquaredTolerance !== 0 &&\n                squaredTolerance <= this.simplifiedGeometryMaxMinSquaredTolerance)) {\n            return this;\n        }\n        var simplifiedGeometry = this.getSimplifiedGeometryInternal(squaredTolerance);\n        var simplifiedFlatCoordinates = simplifiedGeometry.getFlatCoordinates();\n        if (simplifiedFlatCoordinates.length < this.flatCoordinates.length) {\n            return simplifiedGeometry;\n        }\n        else {\n            // Simplification did not actually remove any coordinates.  We now know\n            // that any calls to getSimplifiedGeometry with a squaredTolerance less\n            // than or equal to the current squaredTolerance will also not have any\n            // effect.  This allows us to short circuit simplification (saving CPU\n            // cycles) and prevents the cache of simplified geometries from filling\n            // up with useless identical copies of this geometry (saving memory).\n            this.simplifiedGeometryMaxMinSquaredTolerance = squaredTolerance;\n            return this;\n        }\n    };\n    /**\n     * @param {number} squaredTolerance Squared tolerance.\n     * @return {SimpleGeometry} Simplified geometry.\n     * @protected\n     */\n    SimpleGeometry.prototype.getSimplifiedGeometryInternal = function (squaredTolerance) {\n        return this;\n    };\n    /**\n     * @return {number} Stride.\n     */\n    SimpleGeometry.prototype.getStride = function () {\n        return this.stride;\n    };\n    /**\n     * @param {import(\"./GeometryLayout.js\").default} layout Layout.\n     * @param {Array<number>} flatCoordinates Flat coordinates.\n     */\n    SimpleGeometry.prototype.setFlatCoordinates = function (layout, flatCoordinates) {\n        this.stride = getStrideForLayout(layout);\n        this.layout = layout;\n        this.flatCoordinates = flatCoordinates;\n    };\n    /**\n     * @abstract\n     * @param {!Array<*>} coordinates Coordinates.\n     * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n     */\n    SimpleGeometry.prototype.setCoordinates = function (coordinates, opt_layout) {\n        abstract();\n    };\n    /**\n     * @param {import(\"./GeometryLayout.js\").default|undefined} layout Layout.\n     * @param {Array<*>} coordinates Coordinates.\n     * @param {number} nesting Nesting.\n     * @protected\n     */\n    SimpleGeometry.prototype.setLayout = function (layout, coordinates, nesting) {\n        /** @type {number} */\n        var stride;\n        if (layout) {\n            stride = getStrideForLayout(layout);\n        }\n        else {\n            for (var i = 0; i < nesting; ++i) {\n                if (coordinates.length === 0) {\n                    this.layout = GeometryLayout.XY;\n                    this.stride = 2;\n                    return;\n                }\n                else {\n                    coordinates = /** @type {Array} */ (coordinates[0]);\n                }\n            }\n            stride = coordinates.length;\n            layout = getLayoutForStride(stride);\n        }\n        this.layout = layout;\n        this.stride = stride;\n    };\n    /**\n     * Apply a transform function to the coordinates of the geometry.\n     * The geometry is modified in place.\n     * If you do not want the geometry modified in place, first `clone()` it and\n     * then use this function on the clone.\n     * @param {import(\"../proj.js\").TransformFunction} transformFn Transform function.\n     * Called with a flat array of geometry coordinates.\n     * @api\n     */\n    SimpleGeometry.prototype.applyTransform = function (transformFn) {\n        if (this.flatCoordinates) {\n            transformFn(this.flatCoordinates, this.flatCoordinates, this.stride);\n            this.changed();\n        }\n    };\n    /**\n     * Rotate the geometry around a given coordinate. This modifies the geometry\n     * coordinates in place.\n     * @param {number} angle Rotation angle in counter-clockwise radians.\n     * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\n     * @api\n     */\n    SimpleGeometry.prototype.rotate = function (angle, anchor) {\n        var flatCoordinates = this.getFlatCoordinates();\n        if (flatCoordinates) {\n            var stride = this.getStride();\n            rotate(flatCoordinates, 0, flatCoordinates.length, stride, angle, anchor, flatCoordinates);\n            this.changed();\n        }\n    };\n    /**\n     * Scale the geometry (with an optional origin).  This modifies the geometry\n     * coordinates in place.\n     * @param {number} sx The scaling factor in the x-direction.\n     * @param {number} [opt_sy] The scaling factor in the y-direction (defaults to sx).\n     * @param {import(\"../coordinate.js\").Coordinate} [opt_anchor] The scale origin (defaults to the center\n     *     of the geometry extent).\n     * @api\n     */\n    SimpleGeometry.prototype.scale = function (sx, opt_sy, opt_anchor) {\n        var sy = opt_sy;\n        if (sy === undefined) {\n            sy = sx;\n        }\n        var anchor = opt_anchor;\n        if (!anchor) {\n            anchor = getCenter(this.getExtent());\n        }\n        var flatCoordinates = this.getFlatCoordinates();\n        if (flatCoordinates) {\n            var stride = this.getStride();\n            scale(flatCoordinates, 0, flatCoordinates.length, stride, sx, sy, anchor, flatCoordinates);\n            this.changed();\n        }\n    };\n    /**\n     * Translate the geometry.  This modifies the geometry coordinates in place.  If\n     * instead you want a new geometry, first `clone()` this geometry.\n     * @param {number} deltaX Delta X.\n     * @param {number} deltaY Delta Y.\n     * @api\n     */\n    SimpleGeometry.prototype.translate = function (deltaX, deltaY) {\n        var flatCoordinates = this.getFlatCoordinates();\n        if (flatCoordinates) {\n            var stride = this.getStride();\n            translate(flatCoordinates, 0, flatCoordinates.length, stride, deltaX, deltaY, flatCoordinates);\n            this.changed();\n        }\n    };\n    return SimpleGeometry;\n}(Geometry));\n/**\n * @param {number} stride Stride.\n * @return {import(\"./GeometryLayout.js\").default} layout Layout.\n */\nfunction getLayoutForStride(stride) {\n    var layout;\n    if (stride == 2) {\n        layout = GeometryLayout.XY;\n    }\n    else if (stride == 3) {\n        layout = GeometryLayout.XYZ;\n    }\n    else if (stride == 4) {\n        layout = GeometryLayout.XYZM;\n    }\n    return /** @type {import(\"./GeometryLayout.js\").default} */ (layout);\n}\n/**\n * @param {import(\"./GeometryLayout.js\").default} layout Layout.\n * @return {number} Stride.\n */\nexport function getStrideForLayout(layout) {\n    var stride;\n    if (layout == GeometryLayout.XY) {\n        stride = 2;\n    }\n    else if (layout == GeometryLayout.XYZ || layout == GeometryLayout.XYM) {\n        stride = 3;\n    }\n    else if (layout == GeometryLayout.XYZM) {\n        stride = 4;\n    }\n    return /** @type {number} */ (stride);\n}\n/**\n * @param {SimpleGeometry} simpleGeometry Simple geometry.\n * @param {import(\"../transform.js\").Transform} transform Transform.\n * @param {Array<number>} [opt_dest] Destination.\n * @return {Array<number>} Transformed flat coordinates.\n */\nexport function transformGeom2D(simpleGeometry, transform, opt_dest) {\n    var flatCoordinates = simpleGeometry.getFlatCoordinates();\n    if (!flatCoordinates) {\n        return null;\n    }\n    else {\n        var stride = simpleGeometry.getStride();\n        return transform2D(flatCoordinates, 0, flatCoordinates.length, stride, transform, opt_dest);\n    }\n}\nexport default SimpleGeometry;\n//# sourceMappingURL=SimpleGeometry.js.map","/**\n * @module ol/format/Feature\n */\nimport Units from '../proj/Units.js';\nimport { abstract } from '../util.js';\nimport { assign } from '../obj.js';\nimport { equivalent as equivalentProjection, get as getProjection, transformExtent, } from '../proj.js';\n/**\n * @typedef {Object} ReadOptions\n * @property {import(\"../proj.js\").ProjectionLike} [dataProjection] Projection of the data we are reading.\n * If not provided, the projection will be derived from the data (where possible) or\n * the `dataProjection` of the format is assigned (where set). If the projection\n * can not be derived from the data and if no `dataProjection` is set for a format,\n * the features will not be reprojected.\n * @property {import(\"../extent.js\").Extent} [extent] Tile extent in map units of the tile being read.\n * This is only required when reading data with tile pixels as geometry units. When configured,\n * a `dataProjection` with `TILE_PIXELS` as `units` and the tile's pixel extent as `extent` needs to be\n * provided.\n * @property {import(\"../proj.js\").ProjectionLike} [featureProjection] Projection of the feature geometries\n * created by the format reader. If not provided, features will be returned in the\n * `dataProjection`.\n */\n/**\n * @typedef {Object} WriteOptions\n * @property {import(\"../proj.js\").ProjectionLike} [dataProjection] Projection of the data we are writing.\n * If not provided, the `dataProjection` of the format is assigned (where set).\n * If no `dataProjection` is set for a format, the features will be returned\n * in the `featureProjection`.\n * @property {import(\"../proj.js\").ProjectionLike} [featureProjection] Projection of the feature geometries\n * that will be serialized by the format writer. If not provided, geometries are assumed\n * to be in the `dataProjection` if that is set; in other words, they are not transformed.\n * @property {boolean} [rightHanded] When writing geometries, follow the right-hand\n * rule for linear ring orientation.  This means that polygons will have counter-clockwise\n * exterior rings and clockwise interior rings.  By default, coordinates are serialized\n * as they are provided at construction.  If `true`, the right-hand rule will\n * be applied.  If `false`, the left-hand rule will be applied (clockwise for\n * exterior and counter-clockwise for interior rings).  Note that not all\n * formats support this.  The GeoJSON format does use this property when writing\n * geometries.\n * @property {number} [decimals] Maximum number of decimal places for coordinates.\n * Coordinates are stored internally as floats, but floating-point arithmetic can create\n * coordinates with a large number of decimal places, not generally wanted on output.\n * Set a number here to round coordinates. Can also be used to ensure that\n * coordinates read in can be written back out with the same number of decimals.\n * Default is no rounding.\n */\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for feature formats.\n * {@link module:ol/format/Feature~FeatureFormat} subclasses provide the ability to decode and encode\n * {@link module:ol/Feature~Feature} objects from a variety of commonly used geospatial\n * file formats.  See the documentation for each format for more details.\n *\n * @abstract\n * @api\n */\nvar FeatureFormat = /** @class */ (function () {\n    function FeatureFormat() {\n        /**\n         * @protected\n         * @type {import(\"../proj/Projection.js\").default|undefined}\n         */\n        this.dataProjection = undefined;\n        /**\n         * @protected\n         * @type {import(\"../proj/Projection.js\").default|undefined}\n         */\n        this.defaultFeatureProjection = undefined;\n        /**\n         * A list media types supported by the format in descending order of preference.\n         * @type {Array<string>}\n         */\n        this.supportedMediaTypes = null;\n    }\n    /**\n     * Adds the data projection to the read options.\n     * @param {Document|Element|Object|string} source Source.\n     * @param {ReadOptions} [opt_options] Options.\n     * @return {ReadOptions|undefined} Options.\n     * @protected\n     */\n    FeatureFormat.prototype.getReadOptions = function (source, opt_options) {\n        var options;\n        if (opt_options) {\n            var dataProjection = opt_options.dataProjection\n                ? getProjection(opt_options.dataProjection)\n                : this.readProjection(source);\n            if (opt_options.extent &&\n                dataProjection &&\n                dataProjection.getUnits() === Units.TILE_PIXELS) {\n                dataProjection = getProjection(dataProjection);\n                dataProjection.setWorldExtent(opt_options.extent);\n            }\n            options = {\n                dataProjection: dataProjection,\n                featureProjection: opt_options.featureProjection,\n            };\n        }\n        return this.adaptOptions(options);\n    };\n    /**\n     * Sets the `dataProjection` on the options, if no `dataProjection`\n     * is set.\n     * @param {WriteOptions|ReadOptions|undefined} options\n     *     Options.\n     * @protected\n     * @return {WriteOptions|ReadOptions|undefined}\n     *     Updated options.\n     */\n    FeatureFormat.prototype.adaptOptions = function (options) {\n        return assign({\n            dataProjection: this.dataProjection,\n            featureProjection: this.defaultFeatureProjection,\n        }, options);\n    };\n    /**\n     * @abstract\n     * @return {import(\"./FormatType.js\").default} Format.\n     */\n    FeatureFormat.prototype.getType = function () {\n        return abstract();\n    };\n    /**\n     * Read a single feature from a source.\n     *\n     * @abstract\n     * @param {Document|Element|Object|string} source Source.\n     * @param {ReadOptions} [opt_options] Read options.\n     * @return {import(\"../Feature.js\").FeatureLike} Feature.\n     */\n    FeatureFormat.prototype.readFeature = function (source, opt_options) {\n        return abstract();\n    };\n    /**\n     * Read all features from a source.\n     *\n     * @abstract\n     * @param {Document|Element|ArrayBuffer|Object|string} source Source.\n     * @param {ReadOptions} [opt_options] Read options.\n     * @return {Array<import(\"../Feature.js\").FeatureLike>} Features.\n     */\n    FeatureFormat.prototype.readFeatures = function (source, opt_options) {\n        return abstract();\n    };\n    /**\n     * Read a single geometry from a source.\n     *\n     * @abstract\n     * @param {Document|Element|Object|string} source Source.\n     * @param {ReadOptions} [opt_options] Read options.\n     * @return {import(\"../geom/Geometry.js\").default} Geometry.\n     */\n    FeatureFormat.prototype.readGeometry = function (source, opt_options) {\n        return abstract();\n    };\n    /**\n     * Read the projection from a source.\n     *\n     * @abstract\n     * @param {Document|Element|Object|string} source Source.\n     * @return {import(\"../proj/Projection.js\").default|undefined} Projection.\n     */\n    FeatureFormat.prototype.readProjection = function (source) {\n        return abstract();\n    };\n    /**\n     * Encode a feature in this format.\n     *\n     * @abstract\n     * @param {import(\"../Feature.js\").default} feature Feature.\n     * @param {WriteOptions} [opt_options] Write options.\n     * @return {string|ArrayBuffer} Result.\n     */\n    FeatureFormat.prototype.writeFeature = function (feature, opt_options) {\n        return abstract();\n    };\n    /**\n     * Encode an array of features in this format.\n     *\n     * @abstract\n     * @param {Array<import(\"../Feature.js\").default>} features Features.\n     * @param {WriteOptions} [opt_options] Write options.\n     * @return {string|ArrayBuffer} Result.\n     */\n    FeatureFormat.prototype.writeFeatures = function (features, opt_options) {\n        return abstract();\n    };\n    /**\n     * Write a single geometry in this format.\n     *\n     * @abstract\n     * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n     * @param {WriteOptions} [opt_options] Write options.\n     * @return {string|ArrayBuffer} Result.\n     */\n    FeatureFormat.prototype.writeGeometry = function (geometry, opt_options) {\n        return abstract();\n    };\n    return FeatureFormat;\n}());\nexport default FeatureFormat;\n/**\n * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {boolean} write Set to true for writing, false for reading.\n * @param {WriteOptions|ReadOptions} [opt_options] Options.\n * @return {import(\"../geom/Geometry.js\").default} Transformed geometry.\n */\nexport function transformGeometryWithOptions(geometry, write, opt_options) {\n    var featureProjection = opt_options\n        ? getProjection(opt_options.featureProjection)\n        : null;\n    var dataProjection = opt_options\n        ? getProjection(opt_options.dataProjection)\n        : null;\n    var transformed;\n    if (featureProjection &&\n        dataProjection &&\n        !equivalentProjection(featureProjection, dataProjection)) {\n        transformed = (write ? geometry.clone() : geometry).transform(write ? featureProjection : dataProjection, write ? dataProjection : featureProjection);\n    }\n    else {\n        transformed = geometry;\n    }\n    if (write &&\n        opt_options &&\n        /** @type {WriteOptions} */ (opt_options).decimals !== undefined) {\n        var power_1 = Math.pow(10, \n        /** @type {WriteOptions} */ (opt_options).decimals);\n        // if decimals option on write, round each coordinate appropriately\n        /**\n         * @param {Array<number>} coordinates Coordinates.\n         * @return {Array<number>} Transformed coordinates.\n         */\n        var transform = function (coordinates) {\n            for (var i = 0, ii = coordinates.length; i < ii; ++i) {\n                coordinates[i] = Math.round(coordinates[i] * power_1) / power_1;\n            }\n            return coordinates;\n        };\n        if (transformed === geometry) {\n            transformed = geometry.clone();\n        }\n        transformed.applyTransform(transform);\n    }\n    return transformed;\n}\n/**\n * @param {import(\"../extent.js\").Extent} extent Extent.\n * @param {ReadOptions} [opt_options] Read options.\n * @return {import(\"../extent.js\").Extent} Transformed extent.\n */\nexport function transformExtentWithOptions(extent, opt_options) {\n    var featureProjection = opt_options\n        ? getProjection(opt_options.featureProjection)\n        : null;\n    var dataProjection = opt_options\n        ? getProjection(opt_options.dataProjection)\n        : null;\n    if (featureProjection &&\n        dataProjection &&\n        !equivalentProjection(featureProjection, dataProjection)) {\n        return transformExtent(extent, dataProjection, featureProjection);\n    }\n    else {\n        return extent;\n    }\n}\n//# sourceMappingURL=Feature.js.map","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/format/JSONFeature\n */\nimport FeatureFormat from './Feature.js';\nimport FormatType from './FormatType.js';\nimport { abstract } from '../util.js';\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for JSON feature formats.\n *\n * @abstract\n */\nvar JSONFeature = /** @class */ (function (_super) {\n    __extends(JSONFeature, _super);\n    function JSONFeature() {\n        return _super.call(this) || this;\n    }\n    /**\n     * @return {import(\"./FormatType.js\").default} Format.\n     */\n    JSONFeature.prototype.getType = function () {\n        return FormatType.JSON;\n    };\n    /**\n     * Read a feature.  Only works for a single feature. Use `readFeatures` to\n     * read a feature collection.\n     *\n     * @param {ArrayBuffer|Document|Element|Object|string} source Source.\n     * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n     * @return {import(\"../Feature.js\").default} Feature.\n     * @api\n     */\n    JSONFeature.prototype.readFeature = function (source, opt_options) {\n        return this.readFeatureFromObject(getObject(source), this.getReadOptions(source, opt_options));\n    };\n    /**\n     * Read all features.  Works with both a single feature and a feature\n     * collection.\n     *\n     * @param {ArrayBuffer|Document|Element|Object|string} source Source.\n     * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n     * @return {Array<import(\"../Feature.js\").default>} Features.\n     * @api\n     */\n    JSONFeature.prototype.readFeatures = function (source, opt_options) {\n        return this.readFeaturesFromObject(getObject(source), this.getReadOptions(source, opt_options));\n    };\n    /**\n     * @abstract\n     * @param {Object} object Object.\n     * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n     * @protected\n     * @return {import(\"../Feature.js\").default} Feature.\n     */\n    JSONFeature.prototype.readFeatureFromObject = function (object, opt_options) {\n        return abstract();\n    };\n    /**\n     * @abstract\n     * @param {Object} object Object.\n     * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n     * @protected\n     * @return {Array<import(\"../Feature.js\").default>} Features.\n     */\n    JSONFeature.prototype.readFeaturesFromObject = function (object, opt_options) {\n        return abstract();\n    };\n    /**\n     * Read a geometry.\n     *\n     * @param {ArrayBuffer|Document|Element|Object|string} source Source.\n     * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n     * @return {import(\"../geom/Geometry.js\").default} Geometry.\n     * @api\n     */\n    JSONFeature.prototype.readGeometry = function (source, opt_options) {\n        return this.readGeometryFromObject(getObject(source), this.getReadOptions(source, opt_options));\n    };\n    /**\n     * @abstract\n     * @param {Object} object Object.\n     * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n     * @protected\n     * @return {import(\"../geom/Geometry.js\").default} Geometry.\n     */\n    JSONFeature.prototype.readGeometryFromObject = function (object, opt_options) {\n        return abstract();\n    };\n    /**\n     * Read the projection.\n     *\n     * @param {ArrayBuffer|Document|Element|Object|string} source Source.\n     * @return {import(\"../proj/Projection.js\").default} Projection.\n     * @api\n     */\n    JSONFeature.prototype.readProjection = function (source) {\n        return this.readProjectionFromObject(getObject(source));\n    };\n    /**\n     * @abstract\n     * @param {Object} object Object.\n     * @protected\n     * @return {import(\"../proj/Projection.js\").default} Projection.\n     */\n    JSONFeature.prototype.readProjectionFromObject = function (object) {\n        return abstract();\n    };\n    /**\n     * Encode a feature as string.\n     *\n     * @param {import(\"../Feature.js\").default} feature Feature.\n     * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n     * @return {string} Encoded feature.\n     * @api\n     */\n    JSONFeature.prototype.writeFeature = function (feature, opt_options) {\n        return JSON.stringify(this.writeFeatureObject(feature, opt_options));\n    };\n    /**\n     * @abstract\n     * @param {import(\"../Feature.js\").default} feature Feature.\n     * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n     * @return {Object} Object.\n     */\n    JSONFeature.prototype.writeFeatureObject = function (feature, opt_options) {\n        return abstract();\n    };\n    /**\n     * Encode an array of features as string.\n     *\n     * @param {Array<import(\"../Feature.js\").default>} features Features.\n     * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n     * @return {string} Encoded features.\n     * @api\n     */\n    JSONFeature.prototype.writeFeatures = function (features, opt_options) {\n        return JSON.stringify(this.writeFeaturesObject(features, opt_options));\n    };\n    /**\n     * @abstract\n     * @param {Array<import(\"../Feature.js\").default>} features Features.\n     * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n     * @return {Object} Object.\n     */\n    JSONFeature.prototype.writeFeaturesObject = function (features, opt_options) {\n        return abstract();\n    };\n    /**\n     * Encode a geometry as string.\n     *\n     * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n     * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n     * @return {string} Encoded geometry.\n     * @api\n     */\n    JSONFeature.prototype.writeGeometry = function (geometry, opt_options) {\n        return JSON.stringify(this.writeGeometryObject(geometry, opt_options));\n    };\n    /**\n     * @abstract\n     * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n     * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n     * @return {Object} Object.\n     */\n    JSONFeature.prototype.writeGeometryObject = function (geometry, opt_options) {\n        return abstract();\n    };\n    return JSONFeature;\n}(FeatureFormat));\n/**\n * @param {Document|Element|Object|string} source Source.\n * @return {Object} Object.\n */\nfunction getObject(source) {\n    if (typeof source === 'string') {\n        var object = JSON.parse(source);\n        return object ? /** @type {Object} */ (object) : null;\n    }\n    else if (source !== null) {\n        return source;\n    }\n    else {\n        return null;\n    }\n}\nexport default JSONFeature;\n//# sourceMappingURL=JSONFeature.js.map","/**\n * @module ol/format/GeoJSON\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport Feature from '../Feature.js';\nimport GeometryCollection from '../geom/GeometryCollection.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport JSONFeature from './JSONFeature.js';\nimport LineString from '../geom/LineString.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPoint from '../geom/MultiPoint.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport Point from '../geom/Point.js';\nimport Polygon from '../geom/Polygon.js';\nimport { assert } from '../asserts.js';\nimport { assign, isEmpty } from '../obj.js';\nimport { get as getProjection } from '../proj.js';\nimport { transformGeometryWithOptions } from './Feature.js';\n/**\n * @typedef {import(\"geojson\").GeoJSON} GeoJSONObject\n * @typedef {import(\"geojson\").Feature} GeoJSONFeature\n * @typedef {import(\"geojson\").FeatureCollection} GeoJSONFeatureCollection\n * @typedef {import(\"geojson\").Geometry} GeoJSONGeometry\n * @typedef {import(\"geojson\").Point} GeoJSONPoint\n * @typedef {import(\"geojson\").LineString} GeoJSONLineString\n * @typedef {import(\"geojson\").Polygon} GeoJSONPolygon\n * @typedef {import(\"geojson\").MultiPoint} GeoJSONMultiPoint\n * @typedef {import(\"geojson\").MultiLineString} GeoJSONMultiLineString\n * @typedef {import(\"geojson\").MultiPolygon} GeoJSONMultiPolygon\n * @typedef {import(\"geojson\").GeometryCollection} GeoJSONGeometryCollection\n */\n/**\n * @typedef {Object} Options\n * @property {import(\"../proj.js\").ProjectionLike} [dataProjection='EPSG:4326'] Default data projection.\n * @property {import(\"../proj.js\").ProjectionLike} [featureProjection] Projection for features read or\n * written by the format.  Options passed to read or write methods will take precedence.\n * @property {string} [geometryName] Geometry name to use when creating features.\n * @property {boolean} [extractGeometryName=false] Certain GeoJSON providers include\n * the geometry_name field in the feature GeoJSON. If set to `true` the GeoJSON reader\n * will look for that field to set the geometry name. If both this field is set to `true`\n * and a `geometryName` is provided, the `geometryName` will take precedence.\n */\n/**\n * @classdesc\n * Feature format for reading and writing data in the GeoJSON format.\n *\n * @api\n */\nvar GeoJSON = /** @class */ (function (_super) {\n    __extends(GeoJSON, _super);\n    /**\n     * @param {Options} [opt_options] Options.\n     */\n    function GeoJSON(opt_options) {\n        var _this = this;\n        var options = opt_options ? opt_options : {};\n        _this = _super.call(this) || this;\n        /**\n         * @type {import(\"../proj/Projection.js\").default}\n         */\n        _this.dataProjection = getProjection(options.dataProjection ? options.dataProjection : 'EPSG:4326');\n        if (options.featureProjection) {\n            /**\n             * @type {import(\"../proj/Projection.js\").default}\n             */\n            _this.defaultFeatureProjection = getProjection(options.featureProjection);\n        }\n        /**\n         * Name of the geometry attribute for features.\n         * @type {string|undefined}\n         * @private\n         */\n        _this.geometryName_ = options.geometryName;\n        /**\n         * Look for the geometry name in the feature GeoJSON\n         * @type {boolean|undefined}\n         * @private\n         */\n        _this.extractGeometryName_ = options.extractGeometryName;\n        _this.supportedMediaTypes = [\n            'application/geo+json',\n            'application/vnd.geo+json',\n        ];\n        return _this;\n    }\n    /**\n     * @param {Object} object Object.\n     * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n     * @protected\n     * @return {import(\"../Feature.js\").default} Feature.\n     */\n    GeoJSON.prototype.readFeatureFromObject = function (object, opt_options) {\n        /**\n         * @type {GeoJSONFeature}\n         */\n        var geoJSONFeature = null;\n        if (object['type'] === 'Feature') {\n            geoJSONFeature = /** @type {GeoJSONFeature} */ (object);\n        }\n        else {\n            geoJSONFeature = {\n                'type': 'Feature',\n                'geometry': /** @type {GeoJSONGeometry} */ (object),\n                'properties': null,\n            };\n        }\n        var geometry = readGeometry(geoJSONFeature['geometry'], opt_options);\n        var feature = new Feature();\n        if (this.geometryName_) {\n            feature.setGeometryName(this.geometryName_);\n        }\n        else if (this.extractGeometryName_ &&\n            'geometry_name' in geoJSONFeature !== undefined) {\n            feature.setGeometryName(geoJSONFeature['geometry_name']);\n        }\n        feature.setGeometry(geometry);\n        if ('id' in geoJSONFeature) {\n            feature.setId(geoJSONFeature['id']);\n        }\n        if (geoJSONFeature['properties']) {\n            feature.setProperties(geoJSONFeature['properties'], true);\n        }\n        return feature;\n    };\n    /**\n     * @param {Object} object Object.\n     * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n     * @protected\n     * @return {Array<Feature>} Features.\n     */\n    GeoJSON.prototype.readFeaturesFromObject = function (object, opt_options) {\n        var geoJSONObject = /** @type {GeoJSONObject} */ (object);\n        /** @type {Array<import(\"../Feature.js\").default>} */\n        var features = null;\n        if (geoJSONObject['type'] === 'FeatureCollection') {\n            var geoJSONFeatureCollection = /** @type {GeoJSONFeatureCollection} */ (object);\n            features = [];\n            var geoJSONFeatures = geoJSONFeatureCollection['features'];\n            for (var i = 0, ii = geoJSONFeatures.length; i < ii; ++i) {\n                features.push(this.readFeatureFromObject(geoJSONFeatures[i], opt_options));\n            }\n        }\n        else {\n            features = [this.readFeatureFromObject(object, opt_options)];\n        }\n        return features;\n    };\n    /**\n     * @param {GeoJSONGeometry} object Object.\n     * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n     * @protected\n     * @return {import(\"../geom/Geometry.js\").default} Geometry.\n     */\n    GeoJSON.prototype.readGeometryFromObject = function (object, opt_options) {\n        return readGeometry(object, opt_options);\n    };\n    /**\n     * @param {Object} object Object.\n     * @protected\n     * @return {import(\"../proj/Projection.js\").default} Projection.\n     */\n    GeoJSON.prototype.readProjectionFromObject = function (object) {\n        var crs = object['crs'];\n        var projection;\n        if (crs) {\n            if (crs['type'] == 'name') {\n                projection = getProjection(crs['properties']['name']);\n            }\n            else if (crs['type'] === 'EPSG') {\n                projection = getProjection('EPSG:' + crs['properties']['code']);\n            }\n            else {\n                assert(false, 36); // Unknown SRS type\n            }\n        }\n        else {\n            projection = this.dataProjection;\n        }\n        return /** @type {import(\"../proj/Projection.js\").default} */ (projection);\n    };\n    /**\n     * Encode a feature as a GeoJSON Feature object.\n     *\n     * @param {import(\"../Feature.js\").default} feature Feature.\n     * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n     * @return {GeoJSONFeature} Object.\n     * @api\n     */\n    GeoJSON.prototype.writeFeatureObject = function (feature, opt_options) {\n        opt_options = this.adaptOptions(opt_options);\n        /** @type {GeoJSONFeature} */\n        var object = {\n            'type': 'Feature',\n            geometry: null,\n            properties: null,\n        };\n        var id = feature.getId();\n        if (id !== undefined) {\n            object.id = id;\n        }\n        if (!feature.hasProperties()) {\n            return object;\n        }\n        var properties = feature.getProperties();\n        var geometry = feature.getGeometry();\n        if (geometry) {\n            object.geometry = writeGeometry(geometry, opt_options);\n            delete properties[feature.getGeometryName()];\n        }\n        if (!isEmpty(properties)) {\n            object.properties = properties;\n        }\n        return object;\n    };\n    /**\n     * Encode an array of features as a GeoJSON object.\n     *\n     * @param {Array<import(\"../Feature.js\").default>} features Features.\n     * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n     * @return {GeoJSONFeatureCollection} GeoJSON Object.\n     * @api\n     */\n    GeoJSON.prototype.writeFeaturesObject = function (features, opt_options) {\n        opt_options = this.adaptOptions(opt_options);\n        var objects = [];\n        for (var i = 0, ii = features.length; i < ii; ++i) {\n            objects.push(this.writeFeatureObject(features[i], opt_options));\n        }\n        return {\n            type: 'FeatureCollection',\n            features: objects,\n        };\n    };\n    /**\n     * Encode a geometry as a GeoJSON object.\n     *\n     * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n     * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n     * @return {GeoJSONGeometry|GeoJSONGeometryCollection} Object.\n     * @api\n     */\n    GeoJSON.prototype.writeGeometryObject = function (geometry, opt_options) {\n        return writeGeometry(geometry, this.adaptOptions(opt_options));\n    };\n    return GeoJSON;\n}(JSONFeature));\n/**\n * @param {GeoJSONGeometry|GeoJSONGeometryCollection} object Object.\n * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n * @return {import(\"../geom/Geometry.js\").default} Geometry.\n */\nfunction readGeometry(object, opt_options) {\n    if (!object) {\n        return null;\n    }\n    /**\n     * @type {import(\"../geom/Geometry.js\").default}\n     */\n    var geometry;\n    switch (object['type']) {\n        case GeometryType.POINT: {\n            geometry = readPointGeometry(/** @type {GeoJSONPoint} */ (object));\n            break;\n        }\n        case GeometryType.LINE_STRING: {\n            geometry = readLineStringGeometry(\n            /** @type {GeoJSONLineString} */ (object));\n            break;\n        }\n        case GeometryType.POLYGON: {\n            geometry = readPolygonGeometry(/** @type {GeoJSONPolygon} */ (object));\n            break;\n        }\n        case GeometryType.MULTI_POINT: {\n            geometry = readMultiPointGeometry(\n            /** @type {GeoJSONMultiPoint} */ (object));\n            break;\n        }\n        case GeometryType.MULTI_LINE_STRING: {\n            geometry = readMultiLineStringGeometry(\n            /** @type {GeoJSONMultiLineString} */ (object));\n            break;\n        }\n        case GeometryType.MULTI_POLYGON: {\n            geometry = readMultiPolygonGeometry(\n            /** @type {GeoJSONMultiPolygon} */ (object));\n            break;\n        }\n        case GeometryType.GEOMETRY_COLLECTION: {\n            geometry = readGeometryCollectionGeometry(\n            /** @type {GeoJSONGeometryCollection} */ (object));\n            break;\n        }\n        default: {\n            throw new Error('Unsupported GeoJSON type: ' + object.type);\n        }\n    }\n    return transformGeometryWithOptions(geometry, false, opt_options);\n}\n/**\n * @param {GeoJSONGeometryCollection} object Object.\n * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n * @return {GeometryCollection} Geometry collection.\n */\nfunction readGeometryCollectionGeometry(object, opt_options) {\n    var geometries = object['geometries'].map(\n    /**\n     * @param {GeoJSONGeometry} geometry Geometry.\n     * @return {import(\"../geom/Geometry.js\").default} geometry Geometry.\n     */\n    function (geometry) {\n        return readGeometry(geometry, opt_options);\n    });\n    return new GeometryCollection(geometries);\n}\n/**\n * @param {GeoJSONPoint} object Object.\n * @return {Point} Point.\n */\nfunction readPointGeometry(object) {\n    return new Point(object['coordinates']);\n}\n/**\n * @param {GeoJSONLineString} object Object.\n * @return {LineString} LineString.\n */\nfunction readLineStringGeometry(object) {\n    return new LineString(object['coordinates']);\n}\n/**\n * @param {GeoJSONMultiLineString} object Object.\n * @return {MultiLineString} MultiLineString.\n */\nfunction readMultiLineStringGeometry(object) {\n    return new MultiLineString(object['coordinates']);\n}\n/**\n * @param {GeoJSONMultiPoint} object Object.\n * @return {MultiPoint} MultiPoint.\n */\nfunction readMultiPointGeometry(object) {\n    return new MultiPoint(object['coordinates']);\n}\n/**\n * @param {GeoJSONMultiPolygon} object Object.\n * @return {MultiPolygon} MultiPolygon.\n */\nfunction readMultiPolygonGeometry(object) {\n    return new MultiPolygon(object['coordinates']);\n}\n/**\n * @param {GeoJSONPolygon} object Object.\n * @return {Polygon} Polygon.\n */\nfunction readPolygonGeometry(object) {\n    return new Polygon(object['coordinates']);\n}\n/**\n * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeGeometry(geometry, opt_options) {\n    geometry = transformGeometryWithOptions(geometry, true, opt_options);\n    var type = geometry.getType();\n    /** @type {GeoJSONGeometry} */\n    var geoJSON;\n    switch (type) {\n        case GeometryType.POINT: {\n            geoJSON = writePointGeometry(\n            /** @type {Point} */ (geometry), opt_options);\n            break;\n        }\n        case GeometryType.LINE_STRING: {\n            geoJSON = writeLineStringGeometry(\n            /** @type {LineString} */ (geometry), opt_options);\n            break;\n        }\n        case GeometryType.POLYGON: {\n            geoJSON = writePolygonGeometry(\n            /** @type {Polygon} */ (geometry), opt_options);\n            break;\n        }\n        case GeometryType.MULTI_POINT: {\n            geoJSON = writeMultiPointGeometry(\n            /** @type {MultiPoint} */ (geometry), opt_options);\n            break;\n        }\n        case GeometryType.MULTI_LINE_STRING: {\n            geoJSON = writeMultiLineStringGeometry(\n            /** @type {MultiLineString} */ (geometry), opt_options);\n            break;\n        }\n        case GeometryType.MULTI_POLYGON: {\n            geoJSON = writeMultiPolygonGeometry(\n            /** @type {MultiPolygon} */ (geometry), opt_options);\n            break;\n        }\n        case GeometryType.GEOMETRY_COLLECTION: {\n            geoJSON = writeGeometryCollectionGeometry(\n            /** @type {GeometryCollection} */ (geometry), opt_options);\n            break;\n        }\n        case GeometryType.CIRCLE: {\n            geoJSON = {\n                type: 'GeometryCollection',\n                geometries: [],\n            };\n            break;\n        }\n        default: {\n            throw new Error('Unsupported geometry type: ' + type);\n        }\n    }\n    return geoJSON;\n}\n/**\n * @param {GeometryCollection} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {GeoJSONGeometryCollection} GeoJSON geometry collection.\n */\nfunction writeGeometryCollectionGeometry(geometry, opt_options) {\n    var geometries = geometry.getGeometriesArray().map(function (geometry) {\n        var options = assign({}, opt_options);\n        delete options.featureProjection;\n        return writeGeometry(geometry, options);\n    });\n    return {\n        type: 'GeometryCollection',\n        geometries: geometries,\n    };\n}\n/**\n * @param {LineString} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeLineStringGeometry(geometry, opt_options) {\n    return {\n        type: 'LineString',\n        coordinates: geometry.getCoordinates(),\n    };\n}\n/**\n * @param {MultiLineString} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeMultiLineStringGeometry(geometry, opt_options) {\n    return {\n        type: 'MultiLineString',\n        coordinates: geometry.getCoordinates(),\n    };\n}\n/**\n * @param {MultiPoint} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeMultiPointGeometry(geometry, opt_options) {\n    return {\n        type: 'MultiPoint',\n        coordinates: geometry.getCoordinates(),\n    };\n}\n/**\n * @param {MultiPolygon} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeMultiPolygonGeometry(geometry, opt_options) {\n    var right;\n    if (opt_options) {\n        right = opt_options.rightHanded;\n    }\n    return {\n        type: 'MultiPolygon',\n        coordinates: geometry.getCoordinates(right),\n    };\n}\n/**\n * @param {Point} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writePointGeometry(geometry, opt_options) {\n    return {\n        type: 'Point',\n        coordinates: geometry.getCoordinates(),\n    };\n}\n/**\n * @param {Polygon} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writePolygonGeometry(geometry, opt_options) {\n    var right;\n    if (opt_options) {\n        right = opt_options.rightHanded;\n    }\n    return {\n        type: 'Polygon',\n        coordinates: geometry.getCoordinates(right),\n    };\n}\nexport default GeoJSON;\n//# sourceMappingURL=GeoJSON.js.map","/**\n * @module ol/geom/flat/deflate\n */\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n * @param {number} stride Stride.\n * @return {number} offset Offset.\n */\nexport function deflateCoordinate(flatCoordinates, offset, coordinate, stride) {\n    for (var i = 0, ii = coordinate.length; i < ii; ++i) {\n        flatCoordinates[offset++] = coordinate[i];\n    }\n    return offset;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<import(\"../../coordinate.js\").Coordinate>} coordinates Coordinates.\n * @param {number} stride Stride.\n * @return {number} offset Offset.\n */\nexport function deflateCoordinates(flatCoordinates, offset, coordinates, stride) {\n    for (var i = 0, ii = coordinates.length; i < ii; ++i) {\n        var coordinate = coordinates[i];\n        for (var j = 0; j < stride; ++j) {\n            flatCoordinates[offset++] = coordinate[j];\n        }\n    }\n    return offset;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<import(\"../../coordinate.js\").Coordinate>>} coordinatess Coordinatess.\n * @param {number} stride Stride.\n * @param {Array<number>} [opt_ends] Ends.\n * @return {Array<number>} Ends.\n */\nexport function deflateCoordinatesArray(flatCoordinates, offset, coordinatess, stride, opt_ends) {\n    var ends = opt_ends ? opt_ends : [];\n    var i = 0;\n    for (var j = 0, jj = coordinatess.length; j < jj; ++j) {\n        var end = deflateCoordinates(flatCoordinates, offset, coordinatess[j], stride);\n        ends[i++] = end;\n        offset = end;\n    }\n    ends.length = i;\n    return ends;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<Array<import(\"../../coordinate.js\").Coordinate>>>} coordinatesss Coordinatesss.\n * @param {number} stride Stride.\n * @param {Array<Array<number>>} [opt_endss] Endss.\n * @return {Array<Array<number>>} Endss.\n */\nexport function deflateMultiCoordinatesArray(flatCoordinates, offset, coordinatesss, stride, opt_endss) {\n    var endss = opt_endss ? opt_endss : [];\n    var i = 0;\n    for (var j = 0, jj = coordinatesss.length; j < jj; ++j) {\n        var ends = deflateCoordinatesArray(flatCoordinates, offset, coordinatesss[j], stride, endss[i]);\n        endss[i++] = ends;\n        offset = ends[ends.length - 1];\n    }\n    endss.length = i;\n    return endss;\n}\n//# sourceMappingURL=deflate.js.map","/**\n * @module ol/geom/flat/interpolate\n */\nimport { binarySearch } from '../../array.js';\nimport { lerp } from '../../math.js';\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} fraction Fraction.\n * @param {Array<number>} [opt_dest] Destination.\n * @param {number} [opt_dimension] Destination dimension (default is `2`)\n * @return {Array<number>} Destination.\n */\nexport function interpolatePoint(flatCoordinates, offset, end, stride, fraction, opt_dest, opt_dimension) {\n    var o, t;\n    var n = (end - offset) / stride;\n    if (n === 1) {\n        o = offset;\n    }\n    else if (n === 2) {\n        o = offset;\n        t = fraction;\n    }\n    else if (n !== 0) {\n        var x1 = flatCoordinates[offset];\n        var y1 = flatCoordinates[offset + 1];\n        var length_1 = 0;\n        var cumulativeLengths = [0];\n        for (var i = offset + stride; i < end; i += stride) {\n            var x2 = flatCoordinates[i];\n            var y2 = flatCoordinates[i + 1];\n            length_1 += Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n            cumulativeLengths.push(length_1);\n            x1 = x2;\n            y1 = y2;\n        }\n        var target = fraction * length_1;\n        var index = binarySearch(cumulativeLengths, target);\n        if (index < 0) {\n            t =\n                (target - cumulativeLengths[-index - 2]) /\n                    (cumulativeLengths[-index - 1] - cumulativeLengths[-index - 2]);\n            o = offset + (-index - 2) * stride;\n        }\n        else {\n            o = offset + index * stride;\n        }\n    }\n    var dimension = opt_dimension > 1 ? opt_dimension : 2;\n    var dest = opt_dest ? opt_dest : new Array(dimension);\n    for (var i = 0; i < dimension; ++i) {\n        dest[i] =\n            o === undefined\n                ? NaN\n                : t === undefined\n                    ? flatCoordinates[o + i]\n                    : lerp(flatCoordinates[o + i], flatCoordinates[o + stride + i], t);\n    }\n    return dest;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} m M.\n * @param {boolean} extrapolate Extrapolate.\n * @return {import(\"../../coordinate.js\").Coordinate|null} Coordinate.\n */\nexport function lineStringCoordinateAtM(flatCoordinates, offset, end, stride, m, extrapolate) {\n    if (end == offset) {\n        return null;\n    }\n    var coordinate;\n    if (m < flatCoordinates[offset + stride - 1]) {\n        if (extrapolate) {\n            coordinate = flatCoordinates.slice(offset, offset + stride);\n            coordinate[stride - 1] = m;\n            return coordinate;\n        }\n        else {\n            return null;\n        }\n    }\n    else if (flatCoordinates[end - 1] < m) {\n        if (extrapolate) {\n            coordinate = flatCoordinates.slice(end - stride, end);\n            coordinate[stride - 1] = m;\n            return coordinate;\n        }\n        else {\n            return null;\n        }\n    }\n    // FIXME use O(1) search\n    if (m == flatCoordinates[offset + stride - 1]) {\n        return flatCoordinates.slice(offset, offset + stride);\n    }\n    var lo = offset / stride;\n    var hi = end / stride;\n    while (lo < hi) {\n        var mid = (lo + hi) >> 1;\n        if (m < flatCoordinates[(mid + 1) * stride - 1]) {\n            hi = mid;\n        }\n        else {\n            lo = mid + 1;\n        }\n    }\n    var m0 = flatCoordinates[lo * stride - 1];\n    if (m == m0) {\n        return flatCoordinates.slice((lo - 1) * stride, (lo - 1) * stride + stride);\n    }\n    var m1 = flatCoordinates[(lo + 1) * stride - 1];\n    var t = (m - m0) / (m1 - m0);\n    coordinate = [];\n    for (var i = 0; i < stride - 1; ++i) {\n        coordinate.push(lerp(flatCoordinates[(lo - 1) * stride + i], flatCoordinates[lo * stride + i], t));\n    }\n    coordinate.push(m);\n    return coordinate;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {number} m M.\n * @param {boolean} extrapolate Extrapolate.\n * @param {boolean} interpolate Interpolate.\n * @return {import(\"../../coordinate.js\").Coordinate|null} Coordinate.\n */\nexport function lineStringsCoordinateAtM(flatCoordinates, offset, ends, stride, m, extrapolate, interpolate) {\n    if (interpolate) {\n        return lineStringCoordinateAtM(flatCoordinates, offset, ends[ends.length - 1], stride, m, extrapolate);\n    }\n    var coordinate;\n    if (m < flatCoordinates[stride - 1]) {\n        if (extrapolate) {\n            coordinate = flatCoordinates.slice(0, stride);\n            coordinate[stride - 1] = m;\n            return coordinate;\n        }\n        else {\n            return null;\n        }\n    }\n    if (flatCoordinates[flatCoordinates.length - 1] < m) {\n        if (extrapolate) {\n            coordinate = flatCoordinates.slice(flatCoordinates.length - stride);\n            coordinate[stride - 1] = m;\n            return coordinate;\n        }\n        else {\n            return null;\n        }\n    }\n    for (var i = 0, ii = ends.length; i < ii; ++i) {\n        var end = ends[i];\n        if (offset == end) {\n            continue;\n        }\n        if (m < flatCoordinates[offset + stride - 1]) {\n            return null;\n        }\n        else if (m <= flatCoordinates[end - 1]) {\n            return lineStringCoordinateAtM(flatCoordinates, offset, end, stride, m, false);\n        }\n        offset = end;\n    }\n    return null;\n}\n//# sourceMappingURL=interpolate.js.map","/**\n * @module ol/geom/flat/area\n */\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @return {number} Area.\n */\nexport function linearRing(flatCoordinates, offset, end, stride) {\n    var twiceArea = 0;\n    var x1 = flatCoordinates[end - stride];\n    var y1 = flatCoordinates[end - stride + 1];\n    for (; offset < end; offset += stride) {\n        var x2 = flatCoordinates[offset];\n        var y2 = flatCoordinates[offset + 1];\n        twiceArea += y1 * x2 - x1 * y2;\n        x1 = x2;\n        y1 = y2;\n    }\n    return twiceArea / 2;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @return {number} Area.\n */\nexport function linearRings(flatCoordinates, offset, ends, stride) {\n    var area = 0;\n    for (var i = 0, ii = ends.length; i < ii; ++i) {\n        var end = ends[i];\n        area += linearRing(flatCoordinates, offset, end, stride);\n        offset = end;\n    }\n    return area;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @return {number} Area.\n */\nexport function linearRingss(flatCoordinates, offset, endss, stride) {\n    var area = 0;\n    for (var i = 0, ii = endss.length; i < ii; ++i) {\n        var ends = endss[i];\n        area += linearRings(flatCoordinates, offset, ends, stride);\n        offset = ends[ends.length - 1];\n    }\n    return area;\n}\n//# sourceMappingURL=area.js.map","/**\n * @module ol/geom/flat/inflate\n */\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {Array<import(\"../../coordinate.js\").Coordinate>} [opt_coordinates] Coordinates.\n * @return {Array<import(\"../../coordinate.js\").Coordinate>} Coordinates.\n */\nexport function inflateCoordinates(flatCoordinates, offset, end, stride, opt_coordinates) {\n    var coordinates = opt_coordinates !== undefined ? opt_coordinates : [];\n    var i = 0;\n    for (var j = offset; j < end; j += stride) {\n        coordinates[i++] = flatCoordinates.slice(j, j + stride);\n    }\n    coordinates.length = i;\n    return coordinates;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {Array<Array<import(\"../../coordinate.js\").Coordinate>>} [opt_coordinatess] Coordinatess.\n * @return {Array<Array<import(\"../../coordinate.js\").Coordinate>>} Coordinatess.\n */\nexport function inflateCoordinatesArray(flatCoordinates, offset, ends, stride, opt_coordinatess) {\n    var coordinatess = opt_coordinatess !== undefined ? opt_coordinatess : [];\n    var i = 0;\n    for (var j = 0, jj = ends.length; j < jj; ++j) {\n        var end = ends[j];\n        coordinatess[i++] = inflateCoordinates(flatCoordinates, offset, end, stride, coordinatess[i]);\n        offset = end;\n    }\n    coordinatess.length = i;\n    return coordinatess;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {Array<Array<Array<import(\"../../coordinate.js\").Coordinate>>>} [opt_coordinatesss]\n *     Coordinatesss.\n * @return {Array<Array<Array<import(\"../../coordinate.js\").Coordinate>>>} Coordinatesss.\n */\nexport function inflateMultiCoordinatesArray(flatCoordinates, offset, endss, stride, opt_coordinatesss) {\n    var coordinatesss = opt_coordinatesss !== undefined ? opt_coordinatesss : [];\n    var i = 0;\n    for (var j = 0, jj = endss.length; j < jj; ++j) {\n        var ends = endss[j];\n        coordinatesss[i++] = inflateCoordinatesArray(flatCoordinates, offset, ends, stride, coordinatesss[i]);\n        offset = ends[ends.length - 1];\n    }\n    coordinatesss.length = i;\n    return coordinatesss;\n}\n//# sourceMappingURL=inflate.js.map","/**\n * @module ol/geom/flat/transform\n */\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {import(\"../../transform.js\").Transform} transform Transform.\n * @param {Array<number>} [opt_dest] Destination.\n * @return {Array<number>} Transformed coordinates.\n */\nexport function transform2D(flatCoordinates, offset, end, stride, transform, opt_dest) {\n    var dest = opt_dest ? opt_dest : [];\n    var i = 0;\n    for (var j = offset; j < end; j += stride) {\n        var x = flatCoordinates[j];\n        var y = flatCoordinates[j + 1];\n        dest[i++] = transform[0] * x + transform[2] * y + transform[4];\n        dest[i++] = transform[1] * x + transform[3] * y + transform[5];\n    }\n    if (opt_dest && dest.length != i) {\n        dest.length = i;\n    }\n    return dest;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} angle Angle.\n * @param {Array<number>} anchor Rotation anchor point.\n * @param {Array<number>} [opt_dest] Destination.\n * @return {Array<number>} Transformed coordinates.\n */\nexport function rotate(flatCoordinates, offset, end, stride, angle, anchor, opt_dest) {\n    var dest = opt_dest ? opt_dest : [];\n    var cos = Math.cos(angle);\n    var sin = Math.sin(angle);\n    var anchorX = anchor[0];\n    var anchorY = anchor[1];\n    var i = 0;\n    for (var j = offset; j < end; j += stride) {\n        var deltaX = flatCoordinates[j] - anchorX;\n        var deltaY = flatCoordinates[j + 1] - anchorY;\n        dest[i++] = anchorX + deltaX * cos - deltaY * sin;\n        dest[i++] = anchorY + deltaX * sin + deltaY * cos;\n        for (var k = j + 2; k < j + stride; ++k) {\n            dest[i++] = flatCoordinates[k];\n        }\n    }\n    if (opt_dest && dest.length != i) {\n        dest.length = i;\n    }\n    return dest;\n}\n/**\n * Scale the coordinates.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} sx Scale factor in the x-direction.\n * @param {number} sy Scale factor in the y-direction.\n * @param {Array<number>} anchor Scale anchor point.\n * @param {Array<number>} [opt_dest] Destination.\n * @return {Array<number>} Transformed coordinates.\n */\nexport function scale(flatCoordinates, offset, end, stride, sx, sy, anchor, opt_dest) {\n    var dest = opt_dest ? opt_dest : [];\n    var anchorX = anchor[0];\n    var anchorY = anchor[1];\n    var i = 0;\n    for (var j = offset; j < end; j += stride) {\n        var deltaX = flatCoordinates[j] - anchorX;\n        var deltaY = flatCoordinates[j + 1] - anchorY;\n        dest[i++] = anchorX + sx * deltaX;\n        dest[i++] = anchorY + sy * deltaY;\n        for (var k = j + 2; k < j + stride; ++k) {\n            dest[i++] = flatCoordinates[k];\n        }\n    }\n    if (opt_dest && dest.length != i) {\n        dest.length = i;\n    }\n    return dest;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} deltaX Delta X.\n * @param {number} deltaY Delta Y.\n * @param {Array<number>} [opt_dest] Destination.\n * @return {Array<number>} Transformed coordinates.\n */\nexport function translate(flatCoordinates, offset, end, stride, deltaX, deltaY, opt_dest) {\n    var dest = opt_dest ? opt_dest : [];\n    var i = 0;\n    for (var j = offset; j < end; j += stride) {\n        dest[i++] = flatCoordinates[j] + deltaX;\n        dest[i++] = flatCoordinates[j + 1] + deltaY;\n        for (var k = j + 2; k < j + stride; ++k) {\n            dest[i++] = flatCoordinates[k];\n        }\n    }\n    if (opt_dest && dest.length != i) {\n        dest.length = i;\n    }\n    return dest;\n}\n//# sourceMappingURL=transform.js.map","/**\n * @module ol/geom/flat/intersectsextent\n */\nimport { containsExtent, createEmpty, extendFlatCoordinates, intersects, intersectsSegment, } from '../../extent.js';\nimport { forEach as forEachSegment } from './segments.js';\nimport { linearRingContainsExtent, linearRingContainsXY } from './contains.js';\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\nexport function intersectsLineString(flatCoordinates, offset, end, stride, extent) {\n    var coordinatesExtent = extendFlatCoordinates(createEmpty(), flatCoordinates, offset, end, stride);\n    if (!intersects(extent, coordinatesExtent)) {\n        return false;\n    }\n    if (containsExtent(extent, coordinatesExtent)) {\n        return true;\n    }\n    if (coordinatesExtent[0] >= extent[0] && coordinatesExtent[2] <= extent[2]) {\n        return true;\n    }\n    if (coordinatesExtent[1] >= extent[1] && coordinatesExtent[3] <= extent[3]) {\n        return true;\n    }\n    return forEachSegment(flatCoordinates, offset, end, stride, \n    /**\n     * @param {import(\"../../coordinate.js\").Coordinate} point1 Start point.\n     * @param {import(\"../../coordinate.js\").Coordinate} point2 End point.\n     * @return {boolean} `true` if the segment and the extent intersect,\n     *     `false` otherwise.\n     */\n    function (point1, point2) {\n        return intersectsSegment(extent, point1, point2);\n    });\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\nexport function intersectsLineStringArray(flatCoordinates, offset, ends, stride, extent) {\n    for (var i = 0, ii = ends.length; i < ii; ++i) {\n        if (intersectsLineString(flatCoordinates, offset, ends[i], stride, extent)) {\n            return true;\n        }\n        offset = ends[i];\n    }\n    return false;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\nexport function intersectsLinearRing(flatCoordinates, offset, end, stride, extent) {\n    if (intersectsLineString(flatCoordinates, offset, end, stride, extent)) {\n        return true;\n    }\n    if (linearRingContainsXY(flatCoordinates, offset, end, stride, extent[0], extent[1])) {\n        return true;\n    }\n    if (linearRingContainsXY(flatCoordinates, offset, end, stride, extent[0], extent[3])) {\n        return true;\n    }\n    if (linearRingContainsXY(flatCoordinates, offset, end, stride, extent[2], extent[1])) {\n        return true;\n    }\n    if (linearRingContainsXY(flatCoordinates, offset, end, stride, extent[2], extent[3])) {\n        return true;\n    }\n    return false;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\nexport function intersectsLinearRingArray(flatCoordinates, offset, ends, stride, extent) {\n    if (!intersectsLinearRing(flatCoordinates, offset, ends[0], stride, extent)) {\n        return false;\n    }\n    if (ends.length === 1) {\n        return true;\n    }\n    for (var i = 1, ii = ends.length; i < ii; ++i) {\n        if (linearRingContainsExtent(flatCoordinates, ends[i - 1], ends[i], stride, extent)) {\n            if (!intersectsLineString(flatCoordinates, ends[i - 1], ends[i], stride, extent)) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\nexport function intersectsLinearRingMultiArray(flatCoordinates, offset, endss, stride, extent) {\n    for (var i = 0, ii = endss.length; i < ii; ++i) {\n        var ends = endss[i];\n        if (intersectsLinearRingArray(flatCoordinates, offset, ends, stride, extent)) {\n            return true;\n        }\n        offset = ends[ends.length - 1];\n    }\n    return false;\n}\n//# sourceMappingURL=intersectsextent.js.map","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/geom/GeometryCollection\n */\nimport EventType from '../events/EventType.js';\nimport Geometry from './Geometry.js';\nimport GeometryType from './GeometryType.js';\nimport { closestSquaredDistanceXY, createOrUpdateEmpty, extend, getCenter, } from '../extent.js';\nimport { listen, unlistenByKey } from '../events.js';\n/**\n * @classdesc\n * An array of {@link module:ol/geom/Geometry~Geometry} objects.\n *\n * @api\n */\nvar GeometryCollection = /** @class */ (function (_super) {\n    __extends(GeometryCollection, _super);\n    /**\n     * @param {Array<Geometry>} [opt_geometries] Geometries.\n     */\n    function GeometryCollection(opt_geometries) {\n        var _this = _super.call(this) || this;\n        /**\n         * @private\n         * @type {Array<Geometry>}\n         */\n        _this.geometries_ = opt_geometries ? opt_geometries : null;\n        /**\n         * @type {Array<import(\"../events.js\").EventsKey>}\n         */\n        _this.changeEventsKeys_ = [];\n        _this.listenGeometriesChange_();\n        return _this;\n    }\n    /**\n     * @private\n     */\n    GeometryCollection.prototype.unlistenGeometriesChange_ = function () {\n        this.changeEventsKeys_.forEach(unlistenByKey);\n        this.changeEventsKeys_.length = 0;\n    };\n    /**\n     * @private\n     */\n    GeometryCollection.prototype.listenGeometriesChange_ = function () {\n        if (!this.geometries_) {\n            return;\n        }\n        for (var i = 0, ii = this.geometries_.length; i < ii; ++i) {\n            this.changeEventsKeys_.push(listen(this.geometries_[i], EventType.CHANGE, this.changed, this));\n        }\n    };\n    /**\n     * Make a complete copy of the geometry.\n     * @return {!GeometryCollection} Clone.\n     * @api\n     */\n    GeometryCollection.prototype.clone = function () {\n        var geometryCollection = new GeometryCollection(null);\n        geometryCollection.setGeometries(this.geometries_);\n        geometryCollection.applyProperties(this);\n        return geometryCollection;\n    };\n    /**\n     * @param {number} x X.\n     * @param {number} y Y.\n     * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n     * @param {number} minSquaredDistance Minimum squared distance.\n     * @return {number} Minimum squared distance.\n     */\n    GeometryCollection.prototype.closestPointXY = function (x, y, closestPoint, minSquaredDistance) {\n        if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n            return minSquaredDistance;\n        }\n        var geometries = this.geometries_;\n        for (var i = 0, ii = geometries.length; i < ii; ++i) {\n            minSquaredDistance = geometries[i].closestPointXY(x, y, closestPoint, minSquaredDistance);\n        }\n        return minSquaredDistance;\n    };\n    /**\n     * @param {number} x X.\n     * @param {number} y Y.\n     * @return {boolean} Contains (x, y).\n     */\n    GeometryCollection.prototype.containsXY = function (x, y) {\n        var geometries = this.geometries_;\n        for (var i = 0, ii = geometries.length; i < ii; ++i) {\n            if (geometries[i].containsXY(x, y)) {\n                return true;\n            }\n        }\n        return false;\n    };\n    /**\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @protected\n     * @return {import(\"../extent.js\").Extent} extent Extent.\n     */\n    GeometryCollection.prototype.computeExtent = function (extent) {\n        createOrUpdateEmpty(extent);\n        var geometries = this.geometries_;\n        for (var i = 0, ii = geometries.length; i < ii; ++i) {\n            extend(extent, geometries[i].getExtent());\n        }\n        return extent;\n    };\n    /**\n     * Return the geometries that make up this geometry collection.\n     * @return {Array<Geometry>} Geometries.\n     * @api\n     */\n    GeometryCollection.prototype.getGeometries = function () {\n        return cloneGeometries(this.geometries_);\n    };\n    /**\n     * @return {Array<Geometry>} Geometries.\n     */\n    GeometryCollection.prototype.getGeometriesArray = function () {\n        return this.geometries_;\n    };\n    /**\n     * @return {Array<Geometry>} Geometries.\n     */\n    GeometryCollection.prototype.getGeometriesArrayRecursive = function () {\n        /** @type {Array<Geometry>} */\n        var geometriesArray = [];\n        var geometries = this.geometries_;\n        for (var i = 0, ii = geometries.length; i < ii; ++i) {\n            if (geometries[i].getType() === this.getType()) {\n                geometriesArray = geometriesArray.concat(\n                /** @type {GeometryCollection} */ (geometries[i]).getGeometriesArrayRecursive());\n            }\n            else {\n                geometriesArray.push(geometries[i]);\n            }\n        }\n        return geometriesArray;\n    };\n    /**\n     * Create a simplified version of this geometry using the Douglas Peucker algorithm.\n     * @param {number} squaredTolerance Squared tolerance.\n     * @return {GeometryCollection} Simplified GeometryCollection.\n     */\n    GeometryCollection.prototype.getSimplifiedGeometry = function (squaredTolerance) {\n        if (this.simplifiedGeometryRevision !== this.getRevision()) {\n            this.simplifiedGeometryMaxMinSquaredTolerance = 0;\n            this.simplifiedGeometryRevision = this.getRevision();\n        }\n        if (squaredTolerance < 0 ||\n            (this.simplifiedGeometryMaxMinSquaredTolerance !== 0 &&\n                squaredTolerance < this.simplifiedGeometryMaxMinSquaredTolerance)) {\n            return this;\n        }\n        var simplifiedGeometries = [];\n        var geometries = this.geometries_;\n        var simplified = false;\n        for (var i = 0, ii = geometries.length; i < ii; ++i) {\n            var geometry = geometries[i];\n            var simplifiedGeometry = geometry.getSimplifiedGeometry(squaredTolerance);\n            simplifiedGeometries.push(simplifiedGeometry);\n            if (simplifiedGeometry !== geometry) {\n                simplified = true;\n            }\n        }\n        if (simplified) {\n            var simplifiedGeometryCollection = new GeometryCollection(null);\n            simplifiedGeometryCollection.setGeometriesArray(simplifiedGeometries);\n            return simplifiedGeometryCollection;\n        }\n        else {\n            this.simplifiedGeometryMaxMinSquaredTolerance = squaredTolerance;\n            return this;\n        }\n    };\n    /**\n     * Get the type of this geometry.\n     * @return {import(\"./GeometryType.js\").default} Geometry type.\n     * @api\n     */\n    GeometryCollection.prototype.getType = function () {\n        return GeometryType.GEOMETRY_COLLECTION;\n    };\n    /**\n     * Test if the geometry and the passed extent intersect.\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @return {boolean} `true` if the geometry and the extent intersect.\n     * @api\n     */\n    GeometryCollection.prototype.intersectsExtent = function (extent) {\n        var geometries = this.geometries_;\n        for (var i = 0, ii = geometries.length; i < ii; ++i) {\n            if (geometries[i].intersectsExtent(extent)) {\n                return true;\n            }\n        }\n        return false;\n    };\n    /**\n     * @return {boolean} Is empty.\n     */\n    GeometryCollection.prototype.isEmpty = function () {\n        return this.geometries_.length === 0;\n    };\n    /**\n     * Rotate the geometry around a given coordinate. This modifies the geometry\n     * coordinates in place.\n     * @param {number} angle Rotation angle in radians.\n     * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\n     * @api\n     */\n    GeometryCollection.prototype.rotate = function (angle, anchor) {\n        var geometries = this.geometries_;\n        for (var i = 0, ii = geometries.length; i < ii; ++i) {\n            geometries[i].rotate(angle, anchor);\n        }\n        this.changed();\n    };\n    /**\n     * Scale the geometry (with an optional origin).  This modifies the geometry\n     * coordinates in place.\n     * @abstract\n     * @param {number} sx The scaling factor in the x-direction.\n     * @param {number} [opt_sy] The scaling factor in the y-direction (defaults to sx).\n     * @param {import(\"../coordinate.js\").Coordinate} [opt_anchor] The scale origin (defaults to the center\n     *     of the geometry extent).\n     * @api\n     */\n    GeometryCollection.prototype.scale = function (sx, opt_sy, opt_anchor) {\n        var anchor = opt_anchor;\n        if (!anchor) {\n            anchor = getCenter(this.getExtent());\n        }\n        var geometries = this.geometries_;\n        for (var i = 0, ii = geometries.length; i < ii; ++i) {\n            geometries[i].scale(sx, opt_sy, anchor);\n        }\n        this.changed();\n    };\n    /**\n     * Set the geometries that make up this geometry collection.\n     * @param {Array<Geometry>} geometries Geometries.\n     * @api\n     */\n    GeometryCollection.prototype.setGeometries = function (geometries) {\n        this.setGeometriesArray(cloneGeometries(geometries));\n    };\n    /**\n     * @param {Array<Geometry>} geometries Geometries.\n     */\n    GeometryCollection.prototype.setGeometriesArray = function (geometries) {\n        this.unlistenGeometriesChange_();\n        this.geometries_ = geometries;\n        this.listenGeometriesChange_();\n        this.changed();\n    };\n    /**\n     * Apply a transform function to the coordinates of the geometry.\n     * The geometry is modified in place.\n     * If you do not want the geometry modified in place, first `clone()` it and\n     * then use this function on the clone.\n     * @param {import(\"../proj.js\").TransformFunction} transformFn Transform function.\n     * Called with a flat array of geometry coordinates.\n     * @api\n     */\n    GeometryCollection.prototype.applyTransform = function (transformFn) {\n        var geometries = this.geometries_;\n        for (var i = 0, ii = geometries.length; i < ii; ++i) {\n            geometries[i].applyTransform(transformFn);\n        }\n        this.changed();\n    };\n    /**\n     * Translate the geometry.  This modifies the geometry coordinates in place.  If\n     * instead you want a new geometry, first `clone()` this geometry.\n     * @param {number} deltaX Delta X.\n     * @param {number} deltaY Delta Y.\n     * @api\n     */\n    GeometryCollection.prototype.translate = function (deltaX, deltaY) {\n        var geometries = this.geometries_;\n        for (var i = 0, ii = geometries.length; i < ii; ++i) {\n            geometries[i].translate(deltaX, deltaY);\n        }\n        this.changed();\n    };\n    /**\n     * Clean up.\n     */\n    GeometryCollection.prototype.disposeInternal = function () {\n        this.unlistenGeometriesChange_();\n        _super.prototype.disposeInternal.call(this);\n    };\n    return GeometryCollection;\n}(Geometry));\n/**\n * @param {Array<Geometry>} geometries Geometries.\n * @return {Array<Geometry>} Cloned geometries.\n */\nfunction cloneGeometries(geometries) {\n    var clonedGeometries = [];\n    for (var i = 0, ii = geometries.length; i < ii; ++i) {\n        clonedGeometries.push(geometries[i].clone());\n    }\n    return clonedGeometries;\n}\nexport default GeometryCollection;\n//# sourceMappingURL=GeometryCollection.js.map","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/geom/Point\n */\nimport GeometryType from './GeometryType.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport { containsXY, createOrUpdateFromCoordinate } from '../extent.js';\nimport { deflateCoordinate } from './flat/deflate.js';\nimport { squaredDistance as squaredDx } from '../math.js';\n/**\n * @classdesc\n * Point geometry.\n *\n * @api\n */\nvar Point = /** @class */ (function (_super) {\n    __extends(Point, _super);\n    /**\n     * @param {import(\"../coordinate.js\").Coordinate} coordinates Coordinates.\n     * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n     */\n    function Point(coordinates, opt_layout) {\n        var _this = _super.call(this) || this;\n        _this.setCoordinates(coordinates, opt_layout);\n        return _this;\n    }\n    /**\n     * Make a complete copy of the geometry.\n     * @return {!Point} Clone.\n     * @api\n     */\n    Point.prototype.clone = function () {\n        var point = new Point(this.flatCoordinates.slice(), this.layout);\n        point.applyProperties(this);\n        return point;\n    };\n    /**\n     * @param {number} x X.\n     * @param {number} y Y.\n     * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n     * @param {number} minSquaredDistance Minimum squared distance.\n     * @return {number} Minimum squared distance.\n     */\n    Point.prototype.closestPointXY = function (x, y, closestPoint, minSquaredDistance) {\n        var flatCoordinates = this.flatCoordinates;\n        var squaredDistance = squaredDx(x, y, flatCoordinates[0], flatCoordinates[1]);\n        if (squaredDistance < minSquaredDistance) {\n            var stride = this.stride;\n            for (var i = 0; i < stride; ++i) {\n                closestPoint[i] = flatCoordinates[i];\n            }\n            closestPoint.length = stride;\n            return squaredDistance;\n        }\n        else {\n            return minSquaredDistance;\n        }\n    };\n    /**\n     * Return the coordinate of the point.\n     * @return {import(\"../coordinate.js\").Coordinate} Coordinates.\n     * @api\n     */\n    Point.prototype.getCoordinates = function () {\n        return !this.flatCoordinates ? [] : this.flatCoordinates.slice();\n    };\n    /**\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @protected\n     * @return {import(\"../extent.js\").Extent} extent Extent.\n     */\n    Point.prototype.computeExtent = function (extent) {\n        return createOrUpdateFromCoordinate(this.flatCoordinates, extent);\n    };\n    /**\n     * Get the type of this geometry.\n     * @return {import(\"./GeometryType.js\").default} Geometry type.\n     * @api\n     */\n    Point.prototype.getType = function () {\n        return GeometryType.POINT;\n    };\n    /**\n     * Test if the geometry and the passed extent intersect.\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @return {boolean} `true` if the geometry and the extent intersect.\n     * @api\n     */\n    Point.prototype.intersectsExtent = function (extent) {\n        return containsXY(extent, this.flatCoordinates[0], this.flatCoordinates[1]);\n    };\n    /**\n     * @param {!Array<*>} coordinates Coordinates.\n     * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n     * @api\n     */\n    Point.prototype.setCoordinates = function (coordinates, opt_layout) {\n        this.setLayout(opt_layout, coordinates, 0);\n        if (!this.flatCoordinates) {\n            this.flatCoordinates = [];\n        }\n        this.flatCoordinates.length = deflateCoordinate(this.flatCoordinates, 0, coordinates, this.stride);\n        this.changed();\n    };\n    return Point;\n}(SimpleGeometry));\nexport default Point;\n//# sourceMappingURL=Point.js.map","/**\n * @module ol/geom/flat/segments\n */\n/**\n * This function calls `callback` for each segment of the flat coordinates\n * array. If the callback returns a truthy value the function returns that\n * value immediately. Otherwise the function returns `false`.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {function(import(\"../../coordinate.js\").Coordinate, import(\"../../coordinate.js\").Coordinate): T} callback Function\n *     called for each segment.\n * @return {T|boolean} Value.\n * @template T\n */\nexport function forEach(flatCoordinates, offset, end, stride, callback) {\n    var ret;\n    offset += stride;\n    for (; offset < end; offset += stride) {\n        ret = callback(flatCoordinates.slice(offset - stride, offset), flatCoordinates.slice(offset, offset + stride));\n        if (ret) {\n            return ret;\n        }\n    }\n    return false;\n}\n//# sourceMappingURL=segments.js.map"],"sourceRoot":""}